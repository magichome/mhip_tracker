
c:/Users/timjf/workspace/miota/mhip_tracker/target/mhip_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  0001ad88  2**0
                  CONTENTS
  3 .data         000000bc  2003dfd8  000daca0  0000dfd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000075c  2003e094  2003e094  0001e094  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000dad5c  000dad5c  0001ad5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000dad84  000dad84  0001ad84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000b4848  00000000  00000000  0001ad88  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011371  00000000  00000000  000cf5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000143b3  00000000  00000000  000e0941  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000020d0  00000000  00000000  000f4cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000033e8  00000000  00000000  000f6dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000357c7  00000000  00000000  000fa1ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002a2b8  00000000  00000000  0012f973  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000d6000  00000000  00000000  00159c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c2f0  00000000  00000000  0022fc2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	d0 a3 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fb4d 	bl	d86cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fb52 	bl	d86e2 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dfd8 	.word	0x2003dfd8
   d4048:	000daca0 	.word	0x000daca0
   d404c:	2003e094 	.word	0x2003e094
   d4050:	2003e094 	.word	0x2003e094
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f965 	bl	d6328 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dac94 	.word	0x000dac94
   d4080:	000dac54 	.word	0x000dac54

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8f2 	b.w	d426c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fa6d 	bl	d4568 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 b917 	b.w	d62c4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bc5d 	b.w	d5954 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 bc5b 	b.w	d5954 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bc61 	b.w	d5964 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 bc5f 	b.w	d5964 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z8setupGPSv>:
// ============================================================================
// GPS : Location Functions 
// ============================================================================

// Configure GPS board
void setupGPS() {
   d40b8:	b510      	push	{r4, lr}
  Serial.println("GPS : setup");
   d40ba:	f002 fca3 	bl	d6a04 <_Z16_fetch_usbserialv>

  // Note: the following code/comments are pasted from the Adafruit example code.  I don't actually know this
  // much about the GPS module.

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);
   d40be:	4c13      	ldr	r4, [pc, #76]	; (d410c <_Z8setupGPSv+0x54>)
// GPS : Location Functions 
// ============================================================================

// Configure GPS board
void setupGPS() {
  Serial.println("GPS : setup");
   d40c0:	4913      	ldr	r1, [pc, #76]	; (d4110 <_Z8setupGPSv+0x58>)
   d40c2:	f002 f85f 	bl	d6184 <_ZN5Print7printlnEPKc>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
   d40c6:	2300      	movs	r3, #0
   d40c8:	2204      	movs	r2, #4
   d40ca:	4912      	ldr	r1, [pc, #72]	; (d4114 <_Z8setupGPSv+0x5c>)
   d40cc:	4812      	ldr	r0, [pc, #72]	; (d4118 <_Z8setupGPSv+0x60>)
   d40ce:	f001 fc29 	bl	d5924 <spark_variable>

  // Note: the following code/comments are pasted from the Adafruit example code.  I don't actually know this
  // much about the GPS module.

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);
   d40d2:	4620      	mov	r0, r4
   d40d4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40d8:	f000 fb4a 	bl	d4770 <_ZN12Adafruit_GPS5beginEm>
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
   d40dc:	4620      	mov	r0, r4
   d40de:	490f      	ldr	r1, [pc, #60]	; (d411c <_Z8setupGPSv+0x64>)
   d40e0:	f000 fb4f 	bl	d4782 <_ZN12Adafruit_GPS11sendCommandEPKc>
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
   d40e4:	4620      	mov	r0, r4
   d40e6:	490e      	ldr	r1, [pc, #56]	; (d4120 <_Z8setupGPSv+0x68>)
   d40e8:	f000 fb4b 	bl	d4782 <_ZN12Adafruit_GPS11sendCommandEPKc>
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);
   d40ec:	490d      	ldr	r1, [pc, #52]	; (d4124 <_Z8setupGPSv+0x6c>)
   d40ee:	4620      	mov	r0, r4
   d40f0:	f000 fb47 	bl	d4782 <_ZN12Adafruit_GPS11sendCommandEPKc>

  delay(1000);
   d40f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d40f8:	f002 f896 	bl	d6228 <delay>

  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
   d40fc:	f002 fd4a 	bl	d6b94 <_Z22__fetch_global_Serial1v>
   d4100:	4909      	ldr	r1, [pc, #36]	; (d4128 <_Z8setupGPSv+0x70>)
}
   d4102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  GPS.sendCommand(PGCMD_ANTENNA);

  delay(1000);

  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
   d4106:	f002 b83d 	b.w	d6184 <_ZN5Print7printlnEPKc>
   d410a:	bf00      	nop
   d410c:	2003e120 	.word	0x2003e120
   d4110:	000da3e4 	.word	0x000da3e4
   d4114:	2003e184 	.word	0x2003e184
   d4118:	000da3f0 	.word	0x000da3f0
   d411c:	000da3f4 	.word	0x000da3f4
   d4120:	000da426 	.word	0x000da426
   d4124:	000da437 	.word	0x000da437
   d4128:	000da446 	.word	0x000da446

000d412c <_Z23calcCloudUpdateIntervall>:
// The cloud update interval varies depending on speed.  Calculate the desired interval given the current speed.
int32_t calcCloudUpdateInterval(int32_t speed) 
{
  int32_t result = TI_GPS_CLOUD_MIN;

  if ( speed > 60 )
   d412c:	283c      	cmp	r0, #60	; 0x3c
   d412e:	dd02      	ble.n	d4136 <_Z23calcCloudUpdateIntervall+0xa>
  {
    result = TI_GPS_CLOUD_MAX;
   d4130:	4b07      	ldr	r3, [pc, #28]	; (d4150 <_Z23calcCloudUpdateIntervall+0x24>)
   d4132:	6818      	ldr	r0, [r3, #0]
   d4134:	4770      	bx	lr
}

// The cloud update interval varies depending on speed.  Calculate the desired interval given the current speed.
int32_t calcCloudUpdateInterval(int32_t speed) 
{
  int32_t result = TI_GPS_CLOUD_MIN;
   d4136:	4b07      	ldr	r3, [pc, #28]	; (d4154 <_Z23calcCloudUpdateIntervall+0x28>)
   d4138:	681b      	ldr	r3, [r3, #0]

  if ( speed > 60 )
  {
    result = TI_GPS_CLOUD_MAX;
  } 
  else if ( speed > 2 )
   d413a:	2802      	cmp	r0, #2
  {
    result = (60 / speed) * TI_GPS_CLOUD_MAX;
   d413c:	bfc9      	itett	gt
   d413e:	233c      	movgt	r3, #60	; 0x3c
}

// The cloud update interval varies depending on speed.  Calculate the desired interval given the current speed.
int32_t calcCloudUpdateInterval(int32_t speed) 
{
  int32_t result = TI_GPS_CLOUD_MIN;
   d4140:	4618      	movle	r0, r3
  {
    result = TI_GPS_CLOUD_MAX;
  } 
  else if ( speed > 2 )
  {
    result = (60 / speed) * TI_GPS_CLOUD_MAX;
   d4142:	fb93 f0f0 	sdivgt	r0, r3, r0
   d4146:	4b02      	ldrgt	r3, [pc, #8]	; (d4150 <_Z23calcCloudUpdateIntervall+0x24>)
   d4148:	bfc4      	itt	gt
   d414a:	681b      	ldrgt	r3, [r3, #0]
   d414c:	4358      	mulgt	r0, r3
  }

  return result;
}
   d414e:	4770      	bx	lr
   d4150:	2003dfe8 	.word	0x2003dfe8
   d4154:	2003dfe0 	.word	0x2003dfe0

000d4158 <_Z8setupDHTv>:
// ============================================================================
// DHT : Temperature / Humidity Functions 
// ============================================================================

// Configure DHT temp/humidity sensor
void setupDHT() {
   d4158:	b508      	push	{r3, lr}
  // Initialize device.
  Serial.println("DHT : setup");
   d415a:	f002 fc53 	bl	d6a04 <_Z16_fetch_usbserialv>
   d415e:	4907      	ldr	r1, [pc, #28]	; (d417c <_Z8setupDHTv+0x24>)
   d4160:	f002 f810 	bl	d6184 <_ZN5Print7printlnEPKc>
   d4164:	2300      	movs	r3, #0
   d4166:	2204      	movs	r2, #4
   d4168:	4905      	ldr	r1, [pc, #20]	; (d4180 <_Z8setupDHTv+0x28>)
   d416a:	4806      	ldr	r0, [pc, #24]	; (d4184 <_Z8setupDHTv+0x2c>)
   d416c:	f001 fbda 	bl	d5924 <spark_variable>

  // This defines a variable with the particle cloud.  It enables us to query the value any time.
  Particle.variable("dht", msg_dht, STRING);

  dht.begin();
   d4170:	4805      	ldr	r0, [pc, #20]	; (d4188 <_Z8setupDHTv+0x30>)
}
   d4172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println("DHT : setup");

  // This defines a variable with the particle cloud.  It enables us to query the value any time.
  Particle.variable("dht", msg_dht, STRING);

  dht.begin();
   d4176:	f000 beb9 	b.w	d4eec <_ZN3DHT5beginEv>
   d417a:	bf00      	nop
   d417c:	000da452 	.word	0x000da452
   d4180:	2003e0a4 	.word	0x2003e0a4
   d4184:	000da45e 	.word	0x000da45e
   d4188:	2003e170 	.word	0x2003e170

000d418c <_Z19validateTempuratureff>:

// Sometimes the DHT will output wildly inaccurate temperatures.  If the current temp differs 
// by over 25% from the last value, we'll consider it invalid.  We'll retry the temp '5' times 
// before reporting the (possibly) invalid temp.  Because, after all, the Tracker  could be 
// on fire and the temp is valid.
boolean validateTempurature(float t, float h) {
   d418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  // the two checks below are never valid so we count the retrys
  if (isnan(h) || isnan(t)) {
   d4190:	eef4 0a60 	vcmp.f32	s1, s1
   d4194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr

// Sometimes the DHT will output wildly inaccurate temperatures.  If the current temp differs 
// by over 25% from the last value, we'll consider it invalid.  We'll retry the temp '5' times 
// before reporting the (possibly) invalid temp.  Because, after all, the Tracker  could be 
// on fire and the temp is valid.
boolean validateTempurature(float t, float h) {
   d4198:	ed2d 8b02 	vpush	{d8}
   d419c:	eeb0 8a40 	vmov.f32	s16, s0
  // the two checks below are never valid so we count the retrys
  if (isnan(h) || isnan(t)) {
   d41a0:	d604      	bvs.n	d41ac <_Z19validateTempuratureff+0x20>
   d41a2:	eeb4 0a40 	vcmp.f32	s0, s0
   d41a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41aa:	d703      	bvc.n	d41b4 <_Z19validateTempuratureff+0x28>
    Serial.println("DHT : failed to read");
   d41ac:	f002 fc2a 	bl	d6a04 <_Z16_fetch_usbserialv>
   d41b0:	4926      	ldr	r1, [pc, #152]	; (d424c <_Z19validateTempuratureff+0xc0>)
   d41b2:	e010      	b.n	d41d6 <_Z19validateTempuratureff+0x4a>
    return false;
  }

  if ( t > 200 || t < -200 ) {
   d41b4:	eddf 7a26 	vldr	s15, [pc, #152]	; d4250 <_Z19validateTempuratureff+0xc4>
   d41b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d41bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41c0:	dc06      	bgt.n	d41d0 <_Z19validateTempuratureff+0x44>
   d41c2:	eddf 7a24 	vldr	s15, [pc, #144]	; d4254 <_Z19validateTempuratureff+0xc8>
   d41c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d41ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d41ce:	d506      	bpl.n	d41de <_Z19validateTempuratureff+0x52>
    Serial.println("DHT : invalid temperature");
   d41d0:	f002 fc18 	bl	d6a04 <_Z16_fetch_usbserialv>
   d41d4:	4920      	ldr	r1, [pc, #128]	; (d4258 <_Z19validateTempuratureff+0xcc>)
   d41d6:	f001 ffd5 	bl	d6184 <_ZN5Print7printlnEPKc>
    return false;
   d41da:	2000      	movs	r0, #0
   d41dc:	e031      	b.n	d4242 <_Z19validateTempuratureff+0xb6>
  }

  // if we still have reties left to give, and the temp is out of range by some 25%
  // do a retry
  if ( t_count < 5 && (t < t_last * 0.75 || t > t_last * 1.25) ) {
   d41de:	4c1f      	ldr	r4, [pc, #124]	; (d425c <_Z19validateTempuratureff+0xd0>)
   d41e0:	f8df a084 	ldr.w	sl, [pc, #132]	; d4268 <_Z19validateTempuratureff+0xdc>
   d41e4:	8825      	ldrh	r5, [r4, #0]
   d41e6:	2d04      	cmp	r5, #4
   d41e8:	d826      	bhi.n	d4238 <_Z19validateTempuratureff+0xac>
   d41ea:	ee10 0a10 	vmov	r0, s0
   d41ee:	f003 feb3 	bl	d7f58 <__aeabi_f2d>
   d41f2:	4606      	mov	r6, r0
   d41f4:	f8da 0000 	ldr.w	r0, [sl]
   d41f8:	460f      	mov	r7, r1
   d41fa:	f003 fead 	bl	d7f58 <__aeabi_f2d>
   d41fe:	2200      	movs	r2, #0
   d4200:	4b17      	ldr	r3, [pc, #92]	; (d4260 <_Z19validateTempuratureff+0xd4>)
   d4202:	4680      	mov	r8, r0
   d4204:	4689      	mov	r9, r1
   d4206:	f003 fefb 	bl	d8000 <__aeabi_dmul>
   d420a:	4602      	mov	r2, r0
   d420c:	460b      	mov	r3, r1
   d420e:	4630      	mov	r0, r6
   d4210:	4639      	mov	r1, r7
   d4212:	f004 f967 	bl	d84e4 <__aeabi_dcmplt>
   d4216:	b960      	cbnz	r0, d4232 <_Z19validateTempuratureff+0xa6>
   d4218:	2200      	movs	r2, #0
   d421a:	4b12      	ldr	r3, [pc, #72]	; (d4264 <_Z19validateTempuratureff+0xd8>)
   d421c:	4640      	mov	r0, r8
   d421e:	4649      	mov	r1, r9
   d4220:	f003 feee 	bl	d8000 <__aeabi_dmul>
   d4224:	4602      	mov	r2, r0
   d4226:	460b      	mov	r3, r1
   d4228:	4630      	mov	r0, r6
   d422a:	4639      	mov	r1, r7
   d422c:	f004 f978 	bl	d8520 <__aeabi_dcmpgt>
   d4230:	b110      	cbz	r0, d4238 <_Z19validateTempuratureff+0xac>
    t_count = t_count + 1;
   d4232:	3501      	adds	r5, #1
   d4234:	8025      	strh	r5, [r4, #0]
   d4236:	e7d0      	b.n	d41da <_Z19validateTempuratureff+0x4e>
    return false;
  }

  // valid temp, reset
  t_count = 0;
   d4238:	2300      	movs	r3, #0
   d423a:	8023      	strh	r3, [r4, #0]
  t_last = t;
   d423c:	ed8a 8a00 	vstr	s16, [sl]

  return true;
   d4240:	2001      	movs	r0, #1
}
   d4242:	ecbd 8b02 	vpop	{d8}
   d4246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d424a:	bf00      	nop
   d424c:	000da462 	.word	0x000da462
   d4250:	43480000 	.word	0x43480000
   d4254:	c3480000 	.word	0xc3480000
   d4258:	000da477 	.word	0x000da477
   d425c:	2003e11e 	.word	0x2003e11e
   d4260:	3fe80000 	.word	0x3fe80000
   d4264:	3ff40000 	.word	0x3ff40000
   d4268:	2003e0a0 	.word	0x2003e0a0

000d426c <setup>:
// ============================================================================
// Setup
// ============================================================================

// setup() runs once, when the device is first turned on.
void setup() {
   d426c:	b508      	push	{r3, lr}
  // connect at 115200 so we can read the GPS fast enough and echo without dropping chars
  // also spit it out
  Serial.begin(115200);
   d426e:	f002 fbc9 	bl	d6a04 <_Z16_fetch_usbserialv>
   d4272:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4276:	f002 fbb9 	bl	d69ec <_ZN9USBSerial5beginEl>
  Serial.println("MIot Tracker");
   d427a:	f002 fbc3 	bl	d6a04 <_Z16_fetch_usbserialv>
   d427e:	4904      	ldr	r1, [pc, #16]	; (d4290 <setup+0x24>)
   d4280:	f001 ff80 	bl	d6184 <_ZN5Print7printlnEPKc>

  setupGPS();
   d4284:	f7ff ff18 	bl	d40b8 <_Z8setupGPSv>
  setupDHT();
}
   d4288:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // also spit it out
  Serial.begin(115200);
  Serial.println("MIot Tracker");

  setupGPS();
  setupDHT();
   d428c:	f7ff bf64 	b.w	d4158 <_Z8setupDHTv>
   d4290:	000da491 	.word	0x000da491

000d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4294:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4296:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4298:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d429a:	b17c      	cbz	r4, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d429c:	6863      	ldr	r3, [r4, #4]
   d429e:	3b01      	subs	r3, #1
   d42a0:	6063      	str	r3, [r4, #4]
   d42a2:	b95b      	cbnz	r3, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42a4:	6823      	ldr	r3, [r4, #0]
   d42a6:	4620      	mov	r0, r4
   d42a8:	689b      	ldr	r3, [r3, #8]
   d42aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42ac:	68a3      	ldr	r3, [r4, #8]
   d42ae:	3b01      	subs	r3, #1
   d42b0:	60a3      	str	r3, [r4, #8]
   d42b2:	b91b      	cbnz	r3, d42bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42b4:	6823      	ldr	r3, [r4, #0]
   d42b6:	4620      	mov	r0, r4
   d42b8:	68db      	ldr	r3, [r3, #12]
   d42ba:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42bc:	4628      	mov	r0, r5
   d42be:	bd38      	pop	{r3, r4, r5, pc}

000d42c0 <_Z7loopGPSv>:
  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
}

// GPS processing in main loop
void loopGPS() {
   d42c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d42c4:	ed2d 8b02 	vpush	{d8}
  // location formatting
  int32_t lat_units = GPS.latitude_fixed / 10000000;
   d42c8:	4c4d      	ldr	r4, [pc, #308]	; (d4400 <_Z7loopGPSv+0x140>)
   d42ca:	4d4e      	ldr	r5, [pc, #312]	; (d4404 <_Z7loopGPSv+0x144>)

  int32_t lon_units = GPS.longitude_fixed / 10000000;
  int32_t lon_decimal = GPS.longitude_fixed - (lon_units * 10000000);

  // unit conversions
  float speed_mph = GPS.speed * 1.15078;
   d42cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}

// GPS processing in main loop
void loopGPS() {
  // location formatting
  int32_t lat_units = GPS.latitude_fixed / 10000000;
   d42ce:	6927      	ldr	r7, [r4, #16]
  int32_t lat_decimal = GPS.latitude_fixed - (lat_units * 10000000);

  int32_t lon_units = GPS.longitude_fixed / 10000000;
   d42d0:	f8d4 9014 	ldr.w	r9, [r4, #20]
}

// GPS processing in main loop
void loopGPS() {
  // location formatting
  int32_t lat_units = GPS.latitude_fixed / 10000000;
   d42d4:	fb97 f6f5 	sdiv	r6, r7, r5
  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
}

// GPS processing in main loop
void loopGPS() {
   d42d8:	b097      	sub	sp, #92	; 0x5c

  int32_t lon_units = GPS.longitude_fixed / 10000000;
  int32_t lon_decimal = GPS.longitude_fixed - (lon_units * 10000000);

  // unit conversions
  float speed_mph = GPS.speed * 1.15078;
   d42da:	f003 fe3d 	bl	d7f58 <__aeabi_f2d>
void loopGPS() {
  // location formatting
  int32_t lat_units = GPS.latitude_fixed / 10000000;
  int32_t lat_decimal = GPS.latitude_fixed - (lat_units * 10000000);

  int32_t lon_units = GPS.longitude_fixed / 10000000;
   d42de:	fb99 f5f5 	sdiv	r5, r9, r5
  int32_t lon_decimal = GPS.longitude_fixed - (lon_units * 10000000);

  // unit conversions
  float speed_mph = GPS.speed * 1.15078;
   d42e2:	a343      	add	r3, pc, #268	; (adr r3, d43f0 <_Z7loopGPSv+0x130>)
   d42e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d42e8:	f003 fe8a 	bl	d8000 <__aeabi_dmul>
   d42ec:	f004 f980 	bl	d85f0 <__aeabi_d2f>
  // Example: {"gps_timestamp":"19-03-26T20:04:33","latitude":" 39.7766033N","longitude":"105.1291466W","altitude": 5416.01,"speed":  0.17,"heading":257.14,"satellites":11,"quality":2}
  snprintf(msg_gps, 250, "{\"gps_timestamp\":\"%u-%02u-%02uT%02u:%02u:%02u\",\"latitude\":\"%3lu.%7lu%c\",\"longitude\":\"%3lu.%7lu%c\",\"altitude\":%8.2f,\"speed\":%6.2f,\"heading\":%6.2f,\"satellites\":%u,\"quality\":%u}", \
    GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, \
    lat_units, lat_decimal, GPS.lat, \
    lon_units, lon_decimal, GPS.lon, \
    alt_ft, speed_mph, GPS.angle, GPS.satellites, GPS.fixquality);
   d42f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d42f4:	f894 8003 	ldrb.w	r8, [r4, #3]
   d42f8:	9313      	str	r3, [sp, #76]	; 0x4c
   d42fa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
   d42fe:	9312      	str	r3, [sp, #72]	; 0x48

  int32_t lon_units = GPS.longitude_fixed / 10000000;
  int32_t lon_decimal = GPS.longitude_fixed - (lon_units * 10000000);

  // unit conversions
  float speed_mph = GPS.speed * 1.15078;
   d4300:	ee08 0a10 	vmov	s16, r0
  // Example: {"gps_timestamp":"19-03-26T20:04:33","latitude":" 39.7766033N","longitude":"105.1291466W","altitude": 5416.01,"speed":  0.17,"heading":257.14,"satellites":11,"quality":2}
  snprintf(msg_gps, 250, "{\"gps_timestamp\":\"%u-%02u-%02uT%02u:%02u:%02u\",\"latitude\":\"%3lu.%7lu%c\",\"longitude\":\"%3lu.%7lu%c\",\"altitude\":%8.2f,\"speed\":%6.2f,\"heading\":%6.2f,\"satellites\":%u,\"quality\":%u}", \
    GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, \
    lat_units, lat_decimal, GPS.lat, \
    lon_units, lon_decimal, GPS.lon, \
    alt_ft, speed_mph, GPS.angle, GPS.satellites, GPS.fixquality);
   d4304:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d4306:	f003 fe27 	bl	d7f58 <__aeabi_f2d>
   d430a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   d430e:	ee18 0a10 	vmov	r0, s16
   d4312:	f003 fe21 	bl	d7f58 <__aeabi_f2d>
   d4316:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   d431a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d431c:	f003 fe1c 	bl	d7f58 <__aeabi_f2d>
   d4320:	a335      	add	r3, pc, #212	; (adr r3, d43f8 <_Z7loopGPSv+0x138>)
   d4322:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4326:	f003 fe6b 	bl	d8000 <__aeabi_dmul>
   d432a:	f004 f961 	bl	d85f0 <__aeabi_d2f>
   d432e:	f003 fe13 	bl	d7f58 <__aeabi_f2d>
   d4332:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d4336:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   d433a:	930a      	str	r3, [sp, #40]	; 0x28
   d433c:	4b32      	ldr	r3, [pc, #200]	; (d4408 <_Z7loopGPSv+0x148>)
   d433e:	9508      	str	r5, [sp, #32]
   d4340:	fb03 9205 	mla	r2, r3, r5, r9
   d4344:	9209      	str	r2, [sp, #36]	; 0x24
   d4346:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d434a:	9207      	str	r2, [sp, #28]
   d434c:	fb03 7306 	mla	r3, r3, r6, r7
   d4350:	9306      	str	r3, [sp, #24]
   d4352:	9605      	str	r6, [sp, #20]
   d4354:	78a3      	ldrb	r3, [r4, #2]
   d4356:	9304      	str	r3, [sp, #16]
   d4358:	7863      	ldrb	r3, [r4, #1]
   d435a:	9303      	str	r3, [sp, #12]
   d435c:	7823      	ldrb	r3, [r4, #0]
   d435e:	9302      	str	r3, [sp, #8]
   d4360:	7963      	ldrb	r3, [r4, #5]
   d4362:	9301      	str	r3, [sp, #4]
   d4364:	7923      	ldrb	r3, [r4, #4]
   d4366:	4a29      	ldr	r2, [pc, #164]	; (d440c <_Z7loopGPSv+0x14c>)
   d4368:	9300      	str	r3, [sp, #0]
   d436a:	21fa      	movs	r1, #250	; 0xfa
   d436c:	4643      	mov	r3, r8
   d436e:	4828      	ldr	r0, [pc, #160]	; (d4410 <_Z7loopGPSv+0x150>)
  // mesh publish
  Mesh.publish(EVENT_NAME_LOCATION, msg_gps);

  // particle.io cloud publish, cloud interval is longer than mesh interval
  uint32_t dynamic_timer_interval = calcCloudUpdateInterval(speed_mph);
  if (millis() - timer_gps_cloud > dynamic_timer_interval) {
   d4370:	4c28      	ldr	r4, [pc, #160]	; (d4414 <_Z7loopGPSv+0x154>)
  // Example: {"gps_timestamp":"19-03-26T20:04:33","latitude":" 39.7766033N","longitude":"105.1291466W","altitude": 5416.01,"speed":  0.17,"heading":257.14,"satellites":11,"quality":2}
  snprintf(msg_gps, 250, "{\"gps_timestamp\":\"%u-%02u-%02uT%02u:%02u:%02u\",\"latitude\":\"%3lu.%7lu%c\",\"longitude\":\"%3lu.%7lu%c\",\"altitude\":%8.2f,\"speed\":%6.2f,\"heading\":%6.2f,\"satellites\":%u,\"quality\":%u}", \
    GPS.year, GPS.month, GPS.day, GPS.hour, GPS.minute, GPS.seconds, \
    lat_units, lat_decimal, GPS.lat, \
    lon_units, lon_decimal, GPS.lon, \
    alt_ft, speed_mph, GPS.angle, GPS.satellites, GPS.fixquality);
   d4372:	f001 faff 	bl	d5974 <snprintf>

  // output to console
  Serial.print("GPS: "); Serial.print(msg_gps);
   d4376:	f002 fb45 	bl	d6a04 <_Z16_fetch_usbserialv>
   d437a:	4927      	ldr	r1, [pc, #156]	; (d4418 <_Z7loopGPSv+0x158>)
   d437c:	f001 feef 	bl	d615e <_ZN5Print5printEPKc>
   d4380:	f002 fb40 	bl	d6a04 <_Z16_fetch_usbserialv>
   d4384:	4922      	ldr	r1, [pc, #136]	; (d4410 <_Z7loopGPSv+0x150>)
   d4386:	f001 feea 	bl	d615e <_ZN5Print5printEPKc>

  // mesh publish
  Mesh.publish(EVENT_NAME_LOCATION, msg_gps);
   d438a:	4a21      	ldr	r2, [pc, #132]	; (d4410 <_Z7loopGPSv+0x150>)
   d438c:	4923      	ldr	r1, [pc, #140]	; (d441c <_Z7loopGPSv+0x15c>)
   d438e:	4824      	ldr	r0, [pc, #144]	; (d4420 <_Z7loopGPSv+0x160>)
   d4390:	f002 fd5a 	bl	d6e48 <_ZN5spark11MeshPublish7publishEPKcS2_>

  // particle.io cloud publish, cloud interval is longer than mesh interval
  uint32_t dynamic_timer_interval = calcCloudUpdateInterval(speed_mph);
   d4394:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   d4398:	ee17 0a90 	vmov	r0, s15
   d439c:	f7ff fec6 	bl	d412c <_Z23calcCloudUpdateIntervall>
   d43a0:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43a2:	f001 f8e3 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
  if (millis() - timer_gps_cloud > dynamic_timer_interval) {
   d43a6:	6823      	ldr	r3, [r4, #0]
   d43a8:	1ac0      	subs	r0, r0, r3
   d43aa:	4285      	cmp	r5, r0
   d43ac:	d214      	bcs.n	d43d8 <_Z7loopGPSv+0x118>
   d43ae:	f001 f8dd 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
    timer_gps_cloud = millis(); // reset the timer
   d43b2:	6020      	str	r0, [r4, #0]
    Serial.print("*"); // give indication on console value that this one was published to cloud
   d43b4:	f002 fb26 	bl	d6a04 <_Z16_fetch_usbserialv>
   d43b8:	491a      	ldr	r1, [pc, #104]	; (d4424 <_Z7loopGPSv+0x164>)
   d43ba:	f001 fed0 	bl	d615e <_ZN5Print5printEPKc>
   d43be:	4b1a      	ldr	r3, [pc, #104]	; (d4428 <_Z7loopGPSv+0x168>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43c0:	4a13      	ldr	r2, [pc, #76]	; (d4410 <_Z7loopGPSv+0x150>)
   d43c2:	781b      	ldrb	r3, [r3, #0]
   d43c4:	f88d 3000 	strb.w	r3, [sp]
   d43c8:	a814      	add	r0, sp, #80	; 0x50
   d43ca:	233c      	movs	r3, #60	; 0x3c
   d43cc:	4913      	ldr	r1, [pc, #76]	; (d441c <_Z7loopGPSv+0x15c>)
   d43ce:	f002 f8e3 	bl	d6598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d43d2:	a815      	add	r0, sp, #84	; 0x54
   d43d4:	f7ff ff5e 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish(EVENT_NAME_LOCATION, msg_gps, PRIVATE);
  }
  Serial.println("");
   d43d8:	f002 fb14 	bl	d6a04 <_Z16_fetch_usbserialv>
   d43dc:	4913      	ldr	r1, [pc, #76]	; (d442c <_Z7loopGPSv+0x16c>)
   d43de:	f001 fed1 	bl	d6184 <_ZN5Print7printlnEPKc>
}
   d43e2:	b017      	add	sp, #92	; 0x5c
   d43e4:	ecbd 8b02 	vpop	{d8}
   d43e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d43ec:	f3af 8000 	nop.w
   d43f0:	4a0e410b 	.word	0x4a0e410b
   d43f4:	3ff26998 	.word	0x3ff26998
   d43f8:	0abb44e5 	.word	0x0abb44e5
   d43fc:	400a3f29 	.word	0x400a3f29
   d4400:	2003e120 	.word	0x2003e120
   d4404:	00989680 	.word	0x00989680
   d4408:	ff676980 	.word	0xff676980
   d440c:	000da49e 	.word	0x000da49e
   d4410:	2003e184 	.word	0x2003e184
   d4414:	2003e098 	.word	0x2003e098
   d4418:	000da54d 	.word	0x000da54d
   d441c:	000da3f0 	.word	0x000da3f0
   d4420:	2003e544 	.word	0x2003e544
   d4424:	000da553 	.word	0x000da553
   d4428:	2003e11c 	.word	0x2003e11c
   d442c:	000da6fc 	.word	0x000da6fc

000d4430 <_Z7loopDHTv>:

  dht.begin();
}

// Temp/humidity sensor processing in main loop.
void loopDHT() {
   d4430:	b510      	push	{r4, lr}
   d4432:	ed2d 8b02 	vpush	{d8}
  // read value from sensor
  float t = dht.getTempFarenheit();   // temp, F
   d4436:	4842      	ldr	r0, [pc, #264]	; (d4540 <_Z7loopDHTv+0x110>)

  dht.begin();
}

// Temp/humidity sensor processing in main loop.
void loopDHT() {
   d4438:	b08c      	sub	sp, #48	; 0x30
  // read value from sensor
  float t = dht.getTempFarenheit();   // temp, F
   d443a:	f000 ff99 	bl	d5370 <_ZN3DHT16getTempFarenheitEv>
  float h = dht.getHumidity();        // humidity, %
   d443e:	4840      	ldr	r0, [pc, #256]	; (d4540 <_Z7loopDHTv+0x110>)
}

// Temp/humidity sensor processing in main loop.
void loopDHT() {
  // read value from sensor
  float t = dht.getTempFarenheit();   // temp, F
   d4440:	eeb0 8a40 	vmov.f32	s16, s0
  float h = dht.getHumidity();        // humidity, %
   d4444:	f000 ffd2 	bl	d53ec <_ZN3DHT11getHumidityEv>
   d4448:	eef0 8a40 	vmov.f32	s17, s0
  
  // Check if any reads failed and exit early (to try again).
  if ( !validateTempurature(t,h) ) {
   d444c:	eef0 0a40 	vmov.f32	s1, s0
   d4450:	eeb0 0a48 	vmov.f32	s0, s16
   d4454:	f7ff fe9a 	bl	d418c <_Z19validateTempuratureff>
   d4458:	2800      	cmp	r0, #0
   d445a:	d069      	beq.n	d4530 <_Z7loopDHTv+0x100>
    return;
  }

  // these are read as degrees C, convert to F.
  float hi = dht.getHeatIndex() * 1.8 + 32; // heat index, F
   d445c:	4838      	ldr	r0, [pc, #224]	; (d4540 <_Z7loopDHTv+0x110>)
   d445e:	f000 ffc7 	bl	d53f0 <_ZN3DHT12getHeatIndexEv>
  float dp = dht.getDewPoint() * 1.8 + 32;  // dew point, F
   d4462:	4837      	ldr	r0, [pc, #220]	; (d4540 <_Z7loopDHTv+0x110>)
  if ( !validateTempurature(t,h) ) {
    return;
  }

  // these are read as degrees C, convert to F.
  float hi = dht.getHeatIndex() * 1.8 + 32; // heat index, F
   d4464:	ee10 4a10 	vmov	r4, s0
  float dp = dht.getDewPoint() * 1.8 + 32;  // dew point, F
   d4468:	f000 ffea 	bl	d5440 <_ZN3DHT11getDewPointEv>

  // format temp/humidity message as json
  // Example: {"temperature": 70.16,"humidity": 24.00,"dew_point": 31.68,"heat_index": 75.12}
  snprintf(msg_dht, 120, "{\"temperature\":%6.2f,\"humidity\":%6.2f,\"dew_point\":%6.2f,\"heat_index\":%6.2f}", t, h, dp, hi);
   d446c:	4620      	mov	r0, r4
    return;
  }

  // these are read as degrees C, convert to F.
  float hi = dht.getHeatIndex() * 1.8 + 32; // heat index, F
  float dp = dht.getDewPoint() * 1.8 + 32;  // dew point, F
   d446e:	ed8d 0a09 	vstr	s0, [sp, #36]	; 0x24

  // format temp/humidity message as json
  // Example: {"temperature": 70.16,"humidity": 24.00,"dew_point": 31.68,"heat_index": 75.12}
  snprintf(msg_dht, 120, "{\"temperature\":%6.2f,\"humidity\":%6.2f,\"dew_point\":%6.2f,\"heat_index\":%6.2f}", t, h, dp, hi);
   d4472:	f003 fd71 	bl	d7f58 <__aeabi_f2d>
   d4476:	a330      	add	r3, pc, #192	; (adr r3, d4538 <_Z7loopDHTv+0x108>)
   d4478:	e9d3 2300 	ldrd	r2, r3, [r3]
   d447c:	f003 fdc0 	bl	d8000 <__aeabi_dmul>
   d4480:	2200      	movs	r2, #0
   d4482:	4b30      	ldr	r3, [pc, #192]	; (d4544 <_Z7loopDHTv+0x114>)
 
  // publish to mesh network
  Mesh.publish(EVENT_NAME_TEMP, msg_dht);
  
  // publish to particle.io cloud
  if (millis() - timer_dht_cloud > TI_DHT_CLOUD) {
   d4484:	4c30      	ldr	r4, [pc, #192]	; (d4548 <_Z7loopDHTv+0x118>)
  float hi = dht.getHeatIndex() * 1.8 + 32; // heat index, F
  float dp = dht.getDewPoint() * 1.8 + 32;  // dew point, F

  // format temp/humidity message as json
  // Example: {"temperature": 70.16,"humidity": 24.00,"dew_point": 31.68,"heat_index": 75.12}
  snprintf(msg_dht, 120, "{\"temperature\":%6.2f,\"humidity\":%6.2f,\"dew_point\":%6.2f,\"heat_index\":%6.2f}", t, h, dp, hi);
   d4486:	f003 fc09 	bl	d7c9c <__adddf3>
   d448a:	f004 f8b1 	bl	d85f0 <__aeabi_d2f>
   d448e:	f003 fd63 	bl	d7f58 <__aeabi_f2d>
   d4492:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4496:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d449a:	ee10 0a10 	vmov	r0, s0
   d449e:	f003 fd5b 	bl	d7f58 <__aeabi_f2d>
   d44a2:	a325      	add	r3, pc, #148	; (adr r3, d4538 <_Z7loopDHTv+0x108>)
   d44a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44a8:	f003 fdaa 	bl	d8000 <__aeabi_dmul>
   d44ac:	4b25      	ldr	r3, [pc, #148]	; (d4544 <_Z7loopDHTv+0x114>)
   d44ae:	2200      	movs	r2, #0
   d44b0:	f003 fbf4 	bl	d7c9c <__adddf3>
   d44b4:	f004 f89c 	bl	d85f0 <__aeabi_d2f>
   d44b8:	f003 fd4e 	bl	d7f58 <__aeabi_f2d>
   d44bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d44c0:	ee18 0a90 	vmov	r0, s17
   d44c4:	f003 fd48 	bl	d7f58 <__aeabi_f2d>
   d44c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d44cc:	ee18 0a10 	vmov	r0, s16
   d44d0:	f003 fd42 	bl	d7f58 <__aeabi_f2d>
   d44d4:	4a1d      	ldr	r2, [pc, #116]	; (d454c <_Z7loopDHTv+0x11c>)
   d44d6:	e9cd 0100 	strd	r0, r1, [sp]
   d44da:	2178      	movs	r1, #120	; 0x78
   d44dc:	481c      	ldr	r0, [pc, #112]	; (d4550 <_Z7loopDHTv+0x120>)
   d44de:	f001 fa49 	bl	d5974 <snprintf>

  // output to serial console
  Serial.print("DHT: "); Serial.println(msg_dht);
   d44e2:	f002 fa8f 	bl	d6a04 <_Z16_fetch_usbserialv>
   d44e6:	491b      	ldr	r1, [pc, #108]	; (d4554 <_Z7loopDHTv+0x124>)
   d44e8:	f001 fe39 	bl	d615e <_ZN5Print5printEPKc>
   d44ec:	f002 fa8a 	bl	d6a04 <_Z16_fetch_usbserialv>
   d44f0:	4917      	ldr	r1, [pc, #92]	; (d4550 <_Z7loopDHTv+0x120>)
   d44f2:	f001 fe47 	bl	d6184 <_ZN5Print7printlnEPKc>
 
  // publish to mesh network
  Mesh.publish(EVENT_NAME_TEMP, msg_dht);
   d44f6:	4a16      	ldr	r2, [pc, #88]	; (d4550 <_Z7loopDHTv+0x120>)
   d44f8:	4917      	ldr	r1, [pc, #92]	; (d4558 <_Z7loopDHTv+0x128>)
   d44fa:	4818      	ldr	r0, [pc, #96]	; (d455c <_Z7loopDHTv+0x12c>)
   d44fc:	f002 fca4 	bl	d6e48 <_ZN5spark11MeshPublish7publishEPKcS2_>
   d4500:	f001 f834 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
  
  // publish to particle.io cloud
  if (millis() - timer_dht_cloud > TI_DHT_CLOUD) {
   d4504:	6823      	ldr	r3, [r4, #0]
   d4506:	1ac0      	subs	r0, r0, r3
   d4508:	4b15      	ldr	r3, [pc, #84]	; (d4560 <_Z7loopDHTv+0x130>)
   d450a:	681b      	ldr	r3, [r3, #0]
   d450c:	4298      	cmp	r0, r3
   d450e:	d90f      	bls.n	d4530 <_Z7loopDHTv+0x100>
   d4510:	f001 f82c 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d4514:	4b13      	ldr	r3, [pc, #76]	; (d4564 <_Z7loopDHTv+0x134>)
    // reset timer
    timer_dht_cloud = millis(); // reset the timer
   d4516:	6020      	str	r0, [r4, #0]
   d4518:	781b      	ldrb	r3, [r3, #0]
   d451a:	f88d 3000 	strb.w	r3, [sp]
   d451e:	a80a      	add	r0, sp, #40	; 0x28
   d4520:	233c      	movs	r3, #60	; 0x3c
   d4522:	4a0b      	ldr	r2, [pc, #44]	; (d4550 <_Z7loopDHTv+0x120>)
   d4524:	490c      	ldr	r1, [pc, #48]	; (d4558 <_Z7loopDHTv+0x128>)
   d4526:	f002 f837 	bl	d6598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d452a:	a80b      	add	r0, sp, #44	; 0x2c
   d452c:	f7ff feb2 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    // publish dht data
    Particle.publish(EVENT_NAME_TEMP, msg_dht, PRIVATE);
  }
}
   d4530:	b00c      	add	sp, #48	; 0x30
   d4532:	ecbd 8b02 	vpop	{d8}
   d4536:	bd10      	pop	{r4, pc}
   d4538:	cccccccd 	.word	0xcccccccd
   d453c:	3ffccccc 	.word	0x3ffccccc
   d4540:	2003e170 	.word	0x2003e170
   d4544:	40400000 	.word	0x40400000
   d4548:	2003e09c 	.word	0x2003e09c
   d454c:	000da555 	.word	0x000da555
   d4550:	2003e0a4 	.word	0x2003e0a4
   d4554:	000da5a1 	.word	0x000da5a1
   d4558:	000da45e 	.word	0x000da45e
   d455c:	2003e544 	.word	0x2003e544
   d4560:	2003dfe4 	.word	0x2003dfe4
   d4564:	2003e11c 	.word	0x2003e11c

000d4568 <loop>:
// ============================================================================
// Loop
// ============================================================================

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4568:	b570      	push	{r4, r5, r6, lr}
  // fix timer wrap arounds
  if (timer_gps_cloud > millis()) timer_gps_cloud = millis();
   d456a:	4c23      	ldr	r4, [pc, #140]	; (d45f8 <loop+0x90>)
   d456c:	f000 fffe 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d4570:	6823      	ldr	r3, [r4, #0]
   d4572:	4283      	cmp	r3, r0
   d4574:	d902      	bls.n	d457c <loop+0x14>
   d4576:	f000 fff9 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d457a:	6020      	str	r0, [r4, #0]
  if (timer_dht_cloud > millis()) timer_dht_cloud = millis();
   d457c:	4c1f      	ldr	r4, [pc, #124]	; (d45fc <loop+0x94>)
   d457e:	f000 fff5 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d4582:	6823      	ldr	r3, [r4, #0]
   d4584:	4298      	cmp	r0, r3
   d4586:	d202      	bcs.n	d458e <loop+0x26>
   d4588:	f000 fff0 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d458c:	6020      	str	r0, [r4, #0]
  if (timer_mesh > millis()) timer_mesh = millis();
   d458e:	4c1c      	ldr	r4, [pc, #112]	; (d4600 <loop+0x98>)
   d4590:	f000 ffec 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d4594:	6823      	ldr	r3, [r4, #0]
   d4596:	4298      	cmp	r0, r3
   d4598:	d202      	bcs.n	d45a0 <loop+0x38>
   d459a:	f000 ffe7 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d459e:	6020      	str	r0, [r4, #0]

  // read location
  // NB: while it would make more sense to do this in the loopGPS() function, it doesn't work there.
  //  Apparently the GPS.read() function needs to happen very often to get valid data.  
  //  It may have something to do with the "not listening" warning below. Not sure.
  GPS.read();
   d45a0:	4d18      	ldr	r5, [pc, #96]	; (d4604 <loop+0x9c>)
   d45a2:	4628      	mov	r0, r5
   d45a4:	f000 f85e 	bl	d4664 <_ZN12Adafruit_GPS4readEv>

  bool validGPS = true;

  // if a sentence is received, we can check the checksum, parse it...
  if ( GPS.newNMEAreceived() ) {
   d45a8:	4628      	mov	r0, r5
   d45aa:	f000 f8ed 	bl	d4788 <_ZN12Adafruit_GPS15newNMEAreceivedEv>
   d45ae:	b188      	cbz	r0, d45d4 <loop+0x6c>
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
    if ( !GPS.parse(GPS.lastNMEA()) ) {
   d45b0:	4628      	mov	r0, r5
   d45b2:	f000 f8ef 	bl	d4794 <_ZN12Adafruit_GPS8lastNMEAEv>
   d45b6:	4601      	mov	r1, r0
   d45b8:	4628      	mov	r0, r5
   d45ba:	f000 f905 	bl	d47c8 <_ZN12Adafruit_GPS5parseEPc>
      // NB: I wouldn't print this to the console because it happens A LOT.
      validGPS = false; 
    }

    // if no fix, don't process
    if ( !GPS.fix ) {
   d45be:	f895 503b 	ldrb.w	r5, [r5, #59]	; 0x3b
  // if a sentence is received, we can check the checksum, parse it...
  if ( GPS.newNMEAreceived() ) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trytng to print out data
    if ( !GPS.parse(GPS.lastNMEA()) ) {
   d45c2:	4606      	mov	r6, r0
      // NB: I wouldn't print this to the console because it happens A LOT.
      validGPS = false; 
    }

    // if no fix, don't process
    if ( !GPS.fix ) {
   d45c4:	b93d      	cbnz	r5, d45d6 <loop+0x6e>
      Serial.println("GPS : no fix");
   d45c6:	f002 fa1d 	bl	d6a04 <_Z16_fetch_usbserialv>
   d45ca:	490f      	ldr	r1, [pc, #60]	; (d4608 <loop+0xa0>)
   d45cc:	f001 fdda 	bl	d6184 <_ZN5Print7printlnEPKc>
      validGPS = false;
   d45d0:	462e      	mov	r6, r5
   d45d2:	e000      	b.n	d45d6 <loop+0x6e>
  // NB: while it would make more sense to do this in the loopGPS() function, it doesn't work there.
  //  Apparently the GPS.read() function needs to happen very often to get valid data.  
  //  It may have something to do with the "not listening" warning below. Not sure.
  GPS.read();

  bool validGPS = true;
   d45d4:	2601      	movs	r6, #1
   d45d6:	f000 ffc9 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
      Serial.println("GPS : no fix");
      validGPS = false;
    }
  }

  if (millis() - timer_mesh > TI_ALL_MESH) {
   d45da:	6823      	ldr	r3, [r4, #0]
   d45dc:	1ac0      	subs	r0, r0, r3
   d45de:	4b0b      	ldr	r3, [pc, #44]	; (d460c <loop+0xa4>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	4298      	cmp	r0, r3
   d45e4:	d906      	bls.n	d45f4 <loop+0x8c>
    // process sensor data
    if ( validGPS ) {
   d45e6:	b10e      	cbz	r6, d45ec <loop+0x84>
      loopGPS();
   d45e8:	f7ff fe6a 	bl	d42c0 <_Z7loopGPSv>
    }
    loopDHT();
  }
}
   d45ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (millis() - timer_mesh > TI_ALL_MESH) {
    // process sensor data
    if ( validGPS ) {
      loopGPS();
    }
    loopDHT();
   d45f0:	f7ff bf1e 	b.w	d4430 <_Z7loopDHTv>
   d45f4:	bd70      	pop	{r4, r5, r6, pc}
   d45f6:	bf00      	nop
   d45f8:	2003e098 	.word	0x2003e098
   d45fc:	2003e09c 	.word	0x2003e09c
   d4600:	2003dfd8 	.word	0x2003dfd8
   d4604:	2003e120 	.word	0x2003e120
   d4608:	000da5a7 	.word	0x000da5a7
   d460c:	2003dfdc 	.word	0x2003dfdc

000d4610 <_GLOBAL__sub_I_dht>:
  }
}
   d4610:	b508      	push	{r3, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4612:	4b0d      	ldr	r3, [pc, #52]	; (d4648 <_GLOBAL__sub_I_dht+0x38>)
   d4614:	2201      	movs	r2, #1
   d4616:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4618:	f000 ff40 	bl	d549c <HAL_Pin_Map>
#define DHTTYPE    DHT22     // DHT 22 (AM2302)
//#define DHTTYPE    DHT21     // DHT 21 (AM2301)

// See guide for details on sensor wiring and usage:
//   https://learn.adafruit.com/dht/overview
DHT dht(DHTPIN, DHTTYPE);
   d461c:	2306      	movs	r3, #6
   d461e:	2216      	movs	r2, #22
   d4620:	2103      	movs	r1, #3
   d4622:	480a      	ldr	r0, [pc, #40]	; (d464c <_GLOBAL__sub_I_dht+0x3c>)
   d4624:	f000 fc5a 	bl	d4edc <_ZN3DHTC1Ehhh>

// what's the name of the hardware serial port?
#define GPSSerial Serial1

// Connect to the GPS on the hardware port
Adafruit_GPS GPS(&GPSSerial);
   d4628:	f002 fab4 	bl	d6b94 <_Z22__fetch_global_Serial1v>
   d462c:	4601      	mov	r1, r0
   d462e:	4808      	ldr	r0, [pc, #32]	; (d4650 <_GLOBAL__sub_I_dht+0x40>)
   d4630:	f000 f898 	bl	d4764 <_ZN12Adafruit_GPSC1EP11USARTSerial>
// these are appended to the device name to create event names
#define EVENT_NAME_LOCATION "gps"
#define EVENT_NAME_TEMP "dht"

// init timer counts
uint32_t timer_gps_cloud = TI_GPS_CLOUD_MIN;
   d4634:	4b07      	ldr	r3, [pc, #28]	; (d4654 <_GLOBAL__sub_I_dht+0x44>)
   d4636:	681a      	ldr	r2, [r3, #0]
   d4638:	4b07      	ldr	r3, [pc, #28]	; (d4658 <_GLOBAL__sub_I_dht+0x48>)
   d463a:	601a      	str	r2, [r3, #0]
uint32_t timer_dht_cloud = TI_DHT_CLOUD;
   d463c:	4b07      	ldr	r3, [pc, #28]	; (d465c <_GLOBAL__sub_I_dht+0x4c>)
   d463e:	681a      	ldr	r2, [r3, #0]
   d4640:	4b07      	ldr	r3, [pc, #28]	; (d4660 <_GLOBAL__sub_I_dht+0x50>)
   d4642:	601a      	str	r2, [r3, #0]
   d4644:	bd08      	pop	{r3, pc}
   d4646:	bf00      	nop
   d4648:	2003e11c 	.word	0x2003e11c
   d464c:	2003e170 	.word	0x2003e170
   d4650:	2003e120 	.word	0x2003e120
   d4654:	2003dfe0 	.word	0x2003dfe0
   d4658:	2003e098 	.word	0x2003e098
   d465c:	2003dfe4 	.word	0x2003dfe4
   d4660:	2003e09c 	.word	0x2003e09c

000d4664 <_ZN12Adafruit_GPS4readEv>:
  }

  return false;
}

char Adafruit_GPS::read(void) {
   d4664:	b570      	push	{r4, r5, r6, lr}
  char c = 0;

  if (paused) return c;
   d4666:	f890 504a 	ldrb.w	r5, [r0, #74]	; 0x4a
  }

  return false;
}

char Adafruit_GPS::read(void) {
   d466a:	4604      	mov	r4, r0
  char c = 0;

  if (paused) return c;
   d466c:	b10d      	cbz	r5, d4672 <_ZN12Adafruit_GPS4readEv+0xe>
   d466e:	2000      	movs	r0, #0
   d4670:	bd70      	pop	{r4, r5, r6, pc}
    if(!gpsSwSerial->available()) return c;
    c = gpsSwSerial->read();
  } else
#endif
  {
    if(!gpsHwSerial->available()) return c;
   d4672:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d4674:	6803      	ldr	r3, [r0, #0]
   d4676:	691b      	ldr	r3, [r3, #16]
   d4678:	4798      	blx	r3
   d467a:	2800      	cmp	r0, #0
   d467c:	d0f7      	beq.n	d466e <_ZN12Adafruit_GPS4readEv+0xa>
    c = gpsHwSerial->read();
   d467e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4680:	6803      	ldr	r3, [r0, #0]
   d4682:	695b      	ldr	r3, [r3, #20]
   d4684:	4798      	blx	r3
   d4686:	b2c0      	uxtb	r0, r0

 // if (c == '$') {         //please don't eat the dollar sign - rdl 9/15/14
 //    currentline[lineidx] = 0;
 //    lineidx = 0;
 // }
  if (c == '\n') {
   d4688:	280a      	cmp	r0, #10
   d468a:	4b14      	ldr	r3, [pc, #80]	; (d46dc <_ZN12Adafruit_GPS4readEv+0x78>)
   d468c:	4a14      	ldr	r2, [pc, #80]	; (d46e0 <_ZN12Adafruit_GPS4readEv+0x7c>)
   d468e:	d116      	bne.n	d46be <_ZN12Adafruit_GPS4readEv+0x5a>
    currentline[lineidx] = 0;
   d4690:	7819      	ldrb	r1, [r3, #0]
   d4692:	6814      	ldr	r4, [r2, #0]
   d4694:	b2c9      	uxtb	r1, r1
   d4696:	5465      	strb	r5, [r4, r1]

    if (currentline == line1) {
   d4698:	4d12      	ldr	r5, [pc, #72]	; (d46e4 <_ZN12Adafruit_GPS4readEv+0x80>)
   d469a:	6816      	ldr	r6, [r2, #0]
   d469c:	4912      	ldr	r1, [pc, #72]	; (d46e8 <_ZN12Adafruit_GPS4readEv+0x84>)
   d469e:	4c13      	ldr	r4, [pc, #76]	; (d46ec <_ZN12Adafruit_GPS4readEv+0x88>)
   d46a0:	42ae      	cmp	r6, r5
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
      lastline = line2;
   d46a2:	bf14      	ite	ne
   d46a4:	600c      	strne	r4, [r1, #0]
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
   d46a6:	600e      	streq	r6, [r1, #0]
    }

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
   d46a8:	f04f 0100 	mov.w	r1, #0
   d46ac:	7019      	strb	r1, [r3, #0]
    recvdflag = true;
   d46ae:	4910      	ldr	r1, [pc, #64]	; (d46f0 <_ZN12Adafruit_GPS4readEv+0x8c>)
 // }
  if (c == '\n') {
    currentline[lineidx] = 0;

    if (currentline == line1) {
      currentline = line2;
   d46b0:	bf08      	it	eq
   d46b2:	6014      	streq	r4, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
   d46b4:	f04f 0401 	mov.w	r4, #1

    if (currentline == line1) {
      currentline = line2;
      lastline = line1;
    } else {
      currentline = line1;
   d46b8:	bf18      	it	ne
   d46ba:	6015      	strne	r5, [r2, #0]

    //Serial.println("----");
    //Serial.println((char *)lastline);
    //Serial.println("----");
    lineidx = 0;
    recvdflag = true;
   d46bc:	700c      	strb	r4, [r1, #0]
  }

  currentline[lineidx++] = c;
   d46be:	6814      	ldr	r4, [r2, #0]
   d46c0:	781a      	ldrb	r2, [r3, #0]
   d46c2:	b2d2      	uxtb	r2, r2
   d46c4:	1c51      	adds	r1, r2, #1
   d46c6:	b2c9      	uxtb	r1, r1
   d46c8:	7019      	strb	r1, [r3, #0]
   d46ca:	54a0      	strb	r0, [r4, r2]
  if (lineidx >= MAXLINELENGTH)
   d46cc:	781b      	ldrb	r3, [r3, #0]
   d46ce:	2b77      	cmp	r3, #119	; 0x77
    lineidx = MAXLINELENGTH-1;
   d46d0:	bf82      	ittt	hi
   d46d2:	4b02      	ldrhi	r3, [pc, #8]	; (d46dc <_ZN12Adafruit_GPS4readEv+0x78>)
   d46d4:	2277      	movhi	r2, #119	; 0x77
   d46d6:	701a      	strbhi	r2, [r3, #0]

  return c;
}
   d46d8:	bd70      	pop	{r4, r5, r6, pc}
   d46da:	bf00      	nop
   d46dc:	2003e284 	.word	0x2003e284
   d46e0:	2003e280 	.word	0x2003e280
   d46e4:	2003e285 	.word	0x2003e285
   d46e8:	2003e378 	.word	0x2003e378
   d46ec:	2003e2fd 	.word	0x2003e2fd
   d46f0:	2003e375 	.word	0x2003e375

000d46f4 <_ZN12Adafruit_GPS11common_initEv>:
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
   d46f4:	4a15      	ldr	r2, [pc, #84]	; (d474c <_ZN12Adafruit_GPS11common_initEv+0x58>)
  paused      = false;
  lineidx     = 0;
  currentline = line1;
   d46f6:	4916      	ldr	r1, [pc, #88]	; (d4750 <_ZN12Adafruit_GPS11common_initEv+0x5c>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d46f8:	2300      	movs	r3, #0
  recvdflag   = false;
   d46fa:	7013      	strb	r3, [r2, #0]
  paused      = false;
  lineidx     = 0;
   d46fc:	4a15      	ldr	r2, [pc, #84]	; (d4754 <_ZN12Adafruit_GPS11common_initEv+0x60>)
// Initialization code used by all constructor types
void Adafruit_GPS::common_init(void) {
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
   d46fe:	64c3      	str	r3, [r0, #76]	; 0x4c
  recvdflag   = false;
  paused      = false;
  lineidx     = 0;
   d4700:	7013      	strb	r3, [r2, #0]
  currentline = line1;
   d4702:	4a15      	ldr	r2, [pc, #84]	; (d4758 <_ZN12Adafruit_GPS11common_initEv+0x64>)
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  gpsSwSerial = NULL; // Set both to NULL, then override correct
#endif
  gpsHwSerial = NULL; // port pointer in corresponding constructor
  recvdflag   = false;
  paused      = false;
   d4704:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
  lineidx     = 0;
  currentline = line1;
   d4708:	6011      	str	r1, [r2, #0]
  lastline    = line2;
   d470a:	4a14      	ldr	r2, [pc, #80]	; (d475c <_ZN12Adafruit_GPS11common_initEv+0x68>)
   d470c:	4914      	ldr	r1, [pc, #80]	; (d4760 <_ZN12Adafruit_GPS11common_initEv+0x6c>)
   d470e:	6011      	str	r1, [r2, #0]

  hour = minute = seconds = year = month = day =
    fixquality = satellites = 0; // uint8_t
   d4710:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
   d4714:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
   d4718:	7143      	strb	r3, [r0, #5]
   d471a:	7103      	strb	r3, [r0, #4]
   d471c:	70c3      	strb	r3, [r0, #3]
   d471e:	7083      	strb	r3, [r0, #2]
   d4720:	7043      	strb	r3, [r0, #1]
   d4722:	7003      	strb	r3, [r0, #0]
  lat = lon = mag = 0; // char
   d4724:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   d4728:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   d472c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  fix = false; // boolean
   d4730:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
  milliseconds = 0; // uint16_t
   d4734:	80c3      	strh	r3, [r0, #6]
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
   d4736:	2300      	movs	r3, #0
   d4738:	6343      	str	r3, [r0, #52]	; 0x34
   d473a:	6303      	str	r3, [r0, #48]	; 0x30
   d473c:	62c3      	str	r3, [r0, #44]	; 0x2c
   d473e:	6283      	str	r3, [r0, #40]	; 0x28
   d4740:	6243      	str	r3, [r0, #36]	; 0x24
   d4742:	6203      	str	r3, [r0, #32]
   d4744:	60c3      	str	r3, [r0, #12]
   d4746:	6083      	str	r3, [r0, #8]
   d4748:	4770      	bx	lr
   d474a:	bf00      	nop
   d474c:	2003e375 	.word	0x2003e375
   d4750:	2003e285 	.word	0x2003e285
   d4754:	2003e284 	.word	0x2003e284
   d4758:	2003e280 	.word	0x2003e280
   d475c:	2003e378 	.word	0x2003e378
   d4760:	2003e2fd 	.word	0x2003e2fd

000d4764 <_ZN12Adafruit_GPSC1EP11USARTSerial>:
  gpsSwSerial = ser; // ...override gpsSwSerial with value passed.
}
#endif

// Constructor when using HardwareSerial
Adafruit_GPS::Adafruit_GPS(HardwareSerial *ser) {
   d4764:	b538      	push	{r3, r4, r5, lr}
   d4766:	460d      	mov	r5, r1
  common_init();  // Set everything to common state, then...
   d4768:	f7ff ffc4 	bl	d46f4 <_ZN12Adafruit_GPS11common_initEv>
  gpsHwSerial = ser; // ...override gpsHwSerial with value passed.
   d476c:	64c5      	str	r5, [r0, #76]	; 0x4c
}
   d476e:	bd38      	pop	{r3, r4, r5, pc}

000d4770 <_ZN12Adafruit_GPS5beginEm>:
  latitude = longitude = geoidheight = altitude =
    speed = angle = magvariation = HDOP = 0.0; // float
}

void Adafruit_GPS::begin(uint32_t baud)
{
   d4770:	b508      	push	{r3, lr}
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);
   d4772:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d4774:	f002 fa08 	bl	d6b88 <_ZN11USARTSerial5beginEm>

  delay(10);
   d4778:	200a      	movs	r0, #10
}
   d477a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    gpsSwSerial->begin(baud);
  else
#endif
    gpsHwSerial->begin(baud);

  delay(10);
   d477e:	f001 bd53 	b.w	d6228 <delay>

000d4782 <_ZN12Adafruit_GPS11sendCommandEPKc>:
#if defined(__AVR__) && defined(USE_SW_SERIAL)
  if(gpsSwSerial)
    gpsSwSerial->println(str);
  else
#endif
    gpsHwSerial->println(str);
   d4782:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   d4784:	f001 bcfe 	b.w	d6184 <_ZN5Print7printlnEPKc>

000d4788 <_ZN12Adafruit_GPS15newNMEAreceivedEv>:
}

boolean Adafruit_GPS::newNMEAreceived(void) {
  return recvdflag;
   d4788:	4b01      	ldr	r3, [pc, #4]	; (d4790 <_ZN12Adafruit_GPS15newNMEAreceivedEv+0x8>)
   d478a:	7818      	ldrb	r0, [r3, #0]
}
   d478c:	4770      	bx	lr
   d478e:	bf00      	nop
   d4790:	2003e375 	.word	0x2003e375

000d4794 <_ZN12Adafruit_GPS8lastNMEAEv>:
void Adafruit_GPS::pause(boolean p) {
  paused = p;
}

char *Adafruit_GPS::lastNMEA(void) {
  recvdflag = false;
   d4794:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <_ZN12Adafruit_GPS8lastNMEAEv+0xc>)
   d4796:	2200      	movs	r2, #0
   d4798:	701a      	strb	r2, [r3, #0]
  return (char *)lastline;
}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <_ZN12Adafruit_GPS8lastNMEAEv+0x10>)
   d479c:	6818      	ldr	r0, [r3, #0]
   d479e:	4770      	bx	lr
   d47a0:	2003e375 	.word	0x2003e375
   d47a4:	2003e378 	.word	0x2003e378

000d47a8 <_ZN12Adafruit_GPS8parseHexEc>:

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
   d47a8:	292f      	cmp	r1, #47	; 0x2f
   d47aa:	d90a      	bls.n	d47c2 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
      return 0;
    if (c <= '9')
   d47ac:	2939      	cmp	r1, #57	; 0x39
   d47ae:	d801      	bhi.n	d47b4 <_ZN12Adafruit_GPS8parseHexEc+0xc>
      return c - '0';
   d47b0:	3930      	subs	r1, #48	; 0x30
   d47b2:	e004      	b.n	d47be <_ZN12Adafruit_GPS8parseHexEc+0x16>
    if (c < 'A')
   d47b4:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d47b8:	2b05      	cmp	r3, #5
   d47ba:	d802      	bhi.n	d47c2 <_ZN12Adafruit_GPS8parseHexEc+0x1a>
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
   d47bc:	3937      	subs	r1, #55	; 0x37
   d47be:	b2c8      	uxtb	r0, r1
   d47c0:	4770      	bx	lr
}

// read a Hex value and return the decimal equivalent
uint8_t Adafruit_GPS::parseHex(char c) {
    if (c < '0')
      return 0;
   d47c2:	2000      	movs	r0, #0
       return 0;
    if (c <= 'F')
       return (c - 'A')+10;
    // if (c > 'F')
    return 0;
}
   d47c4:	4770      	bx	lr
	...

000d47c8 <_ZN12Adafruit_GPS5parseEPc>:
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
   d47c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d47cc:	4604      	mov	r4, r0
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
   d47ce:	4608      	mov	r0, r1
volatile char *lastline;
volatile boolean recvdflag;
volatile boolean inStandbyMode;


boolean Adafruit_GPS::parse(char *nmea) {
   d47d0:	460d      	mov	r5, r1
  // do checksum check

  // first look if we even have one
  if (nmea[strlen(nmea)-4] == '*') {
   d47d2:	f003 ffe0 	bl	d8796 <strlen>
   d47d6:	1f07      	subs	r7, r0, #4
   d47d8:	5deb      	ldrb	r3, [r5, r7]
   d47da:	2b2a      	cmp	r3, #42	; 0x2a
   d47dc:	d119      	bne.n	d4812 <_ZN12Adafruit_GPS5parseEPc+0x4a>
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
   d47de:	182e      	adds	r6, r5, r0
   d47e0:	4620      	mov	r0, r4
   d47e2:	f816 1c03 	ldrb.w	r1, [r6, #-3]
   d47e6:	f7ff ffdf 	bl	d47a8 <_ZN12Adafruit_GPS8parseHexEc>
   d47ea:	0100      	lsls	r0, r0, #4
   d47ec:	b282      	uxth	r2, r0
    sum += parseHex(nmea[strlen(nmea)-2]);
   d47ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
   d47f2:	4620      	mov	r0, r4
   d47f4:	f7ff ffd8 	bl	d47a8 <_ZN12Adafruit_GPS8parseHexEc>
   d47f8:	4410      	add	r0, r2
   d47fa:	b280      	uxth	r0, r0

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
   d47fc:	2302      	movs	r3, #2
   d47fe:	429f      	cmp	r7, r3
   d4800:	d904      	bls.n	d480c <_ZN12Adafruit_GPS5parseEPc+0x44>
      sum ^= nmea[i];
   d4802:	5cea      	ldrb	r2, [r5, r3]
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
   d4804:	3301      	adds	r3, #1
      sum ^= nmea[i];
   d4806:	4050      	eors	r0, r2
  if (nmea[strlen(nmea)-4] == '*') {
    uint16_t sum = parseHex(nmea[strlen(nmea)-3]) * 16;
    sum += parseHex(nmea[strlen(nmea)-2]);

    // check checksum
    for (uint8_t i=2; i < (strlen(nmea)-4); i++) {
   d4808:	b2db      	uxtb	r3, r3
   d480a:	e7f8      	b.n	d47fe <_ZN12Adafruit_GPS5parseEPc+0x36>
      sum ^= nmea[i];
    }
    if (sum != 0) {
   d480c:	b108      	cbz	r0, d4812 <_ZN12Adafruit_GPS5parseEPc+0x4a>
      // bad checksum :(
      return false;
   d480e:	2000      	movs	r0, #0
   d4810:	e312      	b.n	d4e38 <_ZN12Adafruit_GPS5parseEPc+0x670>
  }
  int32_t degree;
  long minutes;
  char degreebuff[10];
  // look for a few common sentences
  if ((strstr(nmea, "$GPGGA")) || (strstr(nmea, "$GNGGA"))) {
   d4812:	49c3      	ldr	r1, [pc, #780]	; (d4b20 <_ZN12Adafruit_GPS5parseEPc+0x358>)
   d4814:	4628      	mov	r0, r5
   d4816:	f003 ffee 	bl	d87f6 <strstr>
   d481a:	b930      	cbnz	r0, d482a <_ZN12Adafruit_GPS5parseEPc+0x62>
   d481c:	49c1      	ldr	r1, [pc, #772]	; (d4b24 <_ZN12Adafruit_GPS5parseEPc+0x35c>)
   d481e:	4628      	mov	r0, r5
   d4820:	f003 ffe9 	bl	d87f6 <strstr>
   d4824:	2800      	cmp	r0, #0
   d4826:	f000 818b 	beq.w	d4b40 <_ZN12Adafruit_GPS5parseEPc+0x378>
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
   d482a:	212c      	movs	r1, #44	; 0x2c
   d482c:	4628      	mov	r0, r5
   d482e:	f003 ff89 	bl	d8744 <strchr>
   d4832:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
   d4834:	4628      	mov	r0, r5
   d4836:	f003 ff2b 	bl	d8690 <atof>
   d483a:	ec51 0b10 	vmov	r0, r1, d0
   d483e:	f003 fed7 	bl	d85f0 <__aeabi_d2f>
    uint32_t time = timef;
   d4842:	ee07 0a90 	vmov	s15, r0
   d4846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    hour = time / 10000;
   d484a:	f242 7110 	movw	r1, #10000	; 0x2710
    // found GGA
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
    float timef = atof(p);
    uint32_t time = timef;
   d484e:	ee17 2a90 	vmov	r2, s15
    hour = time / 10000;
    minute = (time % 10000) / 100;
   d4852:	2664      	movs	r6, #100	; 0x64
    char *p = nmea;
    // get time
    p = strchr(p, ',')+1;
    float timef = atof(p);
    uint32_t time = timef;
    hour = time / 10000;
   d4854:	fbb2 f3f1 	udiv	r3, r2, r1
   d4858:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
   d485a:	fb01 2313 	mls	r3, r1, r3, r2
   d485e:	fbb3 f3f6 	udiv	r3, r3, r6
   d4862:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
   d4864:	fbb2 f3f6 	udiv	r3, r2, r6
   d4868:	fb06 2213 	mls	r2, r6, r3, r2
   d486c:	70a2      	strb	r2, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
   d486e:	f003 fb73 	bl	d7f58 <__aeabi_f2d>
   d4872:	ed9f 1ba9 	vldr	d1, [pc, #676]	; d4b18 <_ZN12Adafruit_GPS5parseEPc+0x350>
   d4876:	ec41 0b10 	vmov	d0, r0, r1
   d487a:	f002 fdcb 	bl	d7414 <fmod>
   d487e:	4baa      	ldr	r3, [pc, #680]	; (d4b28 <_ZN12Adafruit_GPS5parseEPc+0x360>)
   d4880:	2200      	movs	r2, #0
   d4882:	ec51 0b10 	vmov	r0, r1, d0
   d4886:	f003 fbbb 	bl	d8000 <__aeabi_dmul>
   d488a:	f003 fe91 	bl	d85b0 <__aeabi_d2uiz>

    // parse out latitude
    p = strchr(p, ',')+1;
   d488e:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
   d4890:	80e0      	strh	r0, [r4, #6]

    // parse out latitude
    p = strchr(p, ',')+1;
   d4892:	4628      	mov	r0, r5
   d4894:	f003 ff56 	bl	d8744 <strchr>
    if (',' != *p)
   d4898:	7843      	ldrb	r3, [r0, #1]
   d489a:	2b2c      	cmp	r3, #44	; 0x2c
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;

    // parse out latitude
    p = strchr(p, ',')+1;
   d489c:	4680      	mov	r8, r0
   d489e:	f100 0701 	add.w	r7, r0, #1
    if (',' != *p)
   d48a2:	d052      	beq.n	d494a <_ZN12Adafruit_GPS5parseEPc+0x182>
    {
      strncpy(degreebuff, p, 2);
   d48a4:	4639      	mov	r1, r7
   d48a6:	2202      	movs	r2, #2
      p += 2;
      degreebuff[2] = '\0';
   d48a8:	f10d 0910 	add.w	r9, sp, #16

    // parse out latitude
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
   d48ac:	a801      	add	r0, sp, #4
   d48ae:	f003 ff8f 	bl	d87d0 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
   d48b2:	f04f 0a00 	mov.w	sl, #0
      degree = atol(degreebuff) * 10000000;
   d48b6:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
   d48b8:	f809 ad0a 	strb.w	sl, [r9, #-10]!
      degree = atol(degreebuff) * 10000000;
   d48bc:	f003 feef 	bl	d869e <atol>
   d48c0:	4d9a      	ldr	r5, [pc, #616]	; (d4b2c <_ZN12Adafruit_GPS5parseEPc+0x364>)
      strncpy(degreebuff, p, 2); // minutes
   d48c2:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
   d48c4:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d48c6:	f108 0103 	add.w	r1, r8, #3
   d48ca:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d48cc:	f108 0706 	add.w	r7, r8, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d48d0:	f003 ff7e 	bl	d87d0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d48d4:	2204      	movs	r2, #4
   d48d6:	4639      	mov	r1, r7
   d48d8:	4648      	mov	r0, r9
   d48da:	f003 ff79 	bl	d87d0 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
   d48de:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d48e0:	f88d a00a 	strb.w	sl, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
   d48e4:	f003 fedb 	bl	d869e <atol>
   d48e8:	2332      	movs	r3, #50	; 0x32
   d48ea:	4358      	muls	r0, r3
   d48ec:	2303      	movs	r3, #3
   d48ee:	fb90 f0f3 	sdiv	r0, r0, r3
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d48f2:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d48f6:	182b      	adds	r3, r5, r0
      latitude = degree / 100000 + minutes * 0.000006F;
   d48f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d48fc:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
   d48fe:	4b8c      	ldr	r3, [pc, #560]	; (d4b30 <_ZN12Adafruit_GPS5parseEPc+0x368>)
   d4900:	fb95 f3f3 	sdiv	r3, r5, r3
   d4904:	ee07 3a90 	vmov	s15, r3
   d4908:	eddf 6a8a 	vldr	s13, [pc, #552]	; d4b34 <_ZN12Adafruit_GPS5parseEPc+0x36c>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
   d490c:	ed9f 6a8a 	vldr	s12, [pc, #552]	; d4b38 <_ZN12Adafruit_GPS5parseEPc+0x370>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4914:	eee7 7a26 	vfma.f32	s15, s14, s13
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d4918:	ed9f 7a88 	vldr	s14, [pc, #544]	; d4b3c <_ZN12Adafruit_GPS5parseEPc+0x374>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d491c:	edc4 7a02 	vstr	s15, [r4, #8]
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d4920:	eec7 6a87 	vdiv.f32	s13, s15, s14
   d4924:	eefd 6ae6 	vcvt.s32.f32	s13, s13
      latitudeDegrees += int(latitude/100);
   d4928:	ee16 3a90 	vmov	r3, s13
   d492c:	435e      	muls	r6, r3
   d492e:	ee07 6a10 	vmov	s14, r6
   d4932:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4936:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d493a:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d493e:	ee87 7a86 	vdiv.f32	s14, s15, s12
   d4942:	ee77 6a26 	vadd.f32	s13, s14, s13
   d4946:	edc4 6a06 	vstr	s13, [r4, #24]
    }

    p = strchr(p, ',')+1;
   d494a:	212c      	movs	r1, #44	; 0x2c
   d494c:	4638      	mov	r0, r7
   d494e:	f003 fef9 	bl	d8744 <strchr>
   d4952:	4603      	mov	r3, r0
   d4954:	3001      	adds	r0, #1
    if (',' != *p)
   d4956:	785a      	ldrb	r2, [r3, #1]
   d4958:	2a2c      	cmp	r2, #44	; 0x2c
   d495a:	d012      	beq.n	d4982 <_ZN12Adafruit_GPS5parseEPc+0x1ba>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
   d495c:	2a53      	cmp	r2, #83	; 0x53
   d495e:	bf02      	ittt	eq
   d4960:	edd4 7a06 	vldreq	s15, [r4, #24]
   d4964:	eef1 7a67 	vnegeq.f32	s15, s15
   d4968:	edc4 7a06 	vstreq	s15, [r4, #24]
      if (p[0] == 'N') lat = 'N';
   d496c:	785b      	ldrb	r3, [r3, #1]
   d496e:	2b4e      	cmp	r3, #78	; 0x4e
   d4970:	d005      	beq.n	d497e <_ZN12Adafruit_GPS5parseEPc+0x1b6>
      else if (p[0] == 'S') lat = 'S';
   d4972:	2b53      	cmp	r3, #83	; 0x53
   d4974:	d003      	beq.n	d497e <_ZN12Adafruit_GPS5parseEPc+0x1b6>
      else if (p[0] == ',') lat = 0;
   d4976:	2b2c      	cmp	r3, #44	; 0x2c
   d4978:	f47f af49 	bne.w	d480e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d497c:	2300      	movs	r3, #0
   d497e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d4982:	212c      	movs	r1, #44	; 0x2c
   d4984:	f003 fede 	bl	d8744 <strchr>
    if (',' != *p)
   d4988:	7843      	ldrb	r3, [r0, #1]
   d498a:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d498c:	4607      	mov	r7, r0
   d498e:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
   d4992:	d050      	beq.n	d4a36 <_ZN12Adafruit_GPS5parseEPc+0x26e>
    {
      strncpy(degreebuff, p, 3);
   d4994:	4631      	mov	r1, r6
   d4996:	2203      	movs	r2, #3
   d4998:	a801      	add	r0, sp, #4
   d499a:	f003 ff19 	bl	d87d0 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
   d499e:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
   d49a2:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
   d49a4:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
   d49a8:	f003 fe79 	bl	d869e <atol>
   d49ac:	4d5f      	ldr	r5, [pc, #380]	; (d4b2c <_ZN12Adafruit_GPS5parseEPc+0x364>)
      strncpy(degreebuff, p, 2); // minutes
   d49ae:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
   d49b0:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d49b2:	1d39      	adds	r1, r7, #4
   d49b4:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d49b6:	1dfe      	adds	r6, r7, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d49b8:	f003 ff0a 	bl	d87d0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d49bc:	2204      	movs	r2, #4
   d49be:	4631      	mov	r1, r6
   d49c0:	f10d 0006 	add.w	r0, sp, #6
   d49c4:	f003 ff04 	bl	d87d0 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
   d49c8:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d49ca:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
   d49ce:	f003 fe66 	bl	d869e <atol>
   d49d2:	2332      	movs	r3, #50	; 0x32
   d49d4:	4358      	muls	r0, r3
   d49d6:	2303      	movs	r3, #3
   d49d8:	fb90 f0f3 	sdiv	r0, r0, r3
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d49dc:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d49e0:	182b      	adds	r3, r5, r0
      longitude = degree / 100000 + minutes * 0.000006F;
   d49e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d49e6:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
   d49e8:	4b51      	ldr	r3, [pc, #324]	; (d4b30 <_ZN12Adafruit_GPS5parseEPc+0x368>)
   d49ea:	fb95 f3f3 	sdiv	r3, r5, r3
   d49ee:	ee07 3a90 	vmov	s15, r3
   d49f2:	eddf 6a50 	vldr	s13, [pc, #320]	; d4b34 <_ZN12Adafruit_GPS5parseEPc+0x36c>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d49f6:	ed9f 6a50 	vldr	s12, [pc, #320]	; d4b38 <_ZN12Adafruit_GPS5parseEPc+0x370>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d49fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d49fe:	2364      	movs	r3, #100	; 0x64
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4a00:	eee7 7a26 	vfma.f32	s15, s14, s13
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d4a04:	eddf 6a4d 	vldr	s13, [pc, #308]	; d4b3c <_ZN12Adafruit_GPS5parseEPc+0x374>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4a08:	edc4 7a03 	vstr	s15, [r4, #12]
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d4a0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4a10:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      longitudeDegrees += int(longitude/100);
   d4a14:	ee17 2a10 	vmov	r2, s14
   d4a18:	4353      	muls	r3, r2
   d4a1a:	ee06 3a90 	vmov	s13, r3
   d4a1e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d4a22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4a26:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d4a2a:	eec7 6a86 	vdiv.f32	s13, s15, s12
   d4a2e:	ee36 7a87 	vadd.f32	s14, s13, s14
   d4a32:	ed84 7a07 	vstr	s14, [r4, #28]
    }

    p = strchr(p, ',')+1;
   d4a36:	212c      	movs	r1, #44	; 0x2c
   d4a38:	4630      	mov	r0, r6
   d4a3a:	f003 fe83 	bl	d8744 <strchr>
   d4a3e:	4603      	mov	r3, r0
   d4a40:	3001      	adds	r0, #1
    if (',' != *p)
   d4a42:	785a      	ldrb	r2, [r3, #1]
   d4a44:	2a2c      	cmp	r2, #44	; 0x2c
   d4a46:	d012      	beq.n	d4a6e <_ZN12Adafruit_GPS5parseEPc+0x2a6>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
   d4a48:	2a57      	cmp	r2, #87	; 0x57
   d4a4a:	bf02      	ittt	eq
   d4a4c:	edd4 7a07 	vldreq	s15, [r4, #28]
   d4a50:	eef1 7a67 	vnegeq.f32	s15, s15
   d4a54:	edc4 7a07 	vstreq	s15, [r4, #28]
      if (p[0] == 'W') lon = 'W';
   d4a58:	785b      	ldrb	r3, [r3, #1]
   d4a5a:	2b57      	cmp	r3, #87	; 0x57
   d4a5c:	d005      	beq.n	d4a6a <_ZN12Adafruit_GPS5parseEPc+0x2a2>
      else if (p[0] == 'E') lon = 'E';
   d4a5e:	2b45      	cmp	r3, #69	; 0x45
   d4a60:	d003      	beq.n	d4a6a <_ZN12Adafruit_GPS5parseEPc+0x2a2>
      else if (p[0] == ',') lon = 0;
   d4a62:	2b2c      	cmp	r3, #44	; 0x2c
   d4a64:	f47f aed3 	bne.w	d480e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d4a68:	2300      	movs	r3, #0
   d4a6a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }

    p = strchr(p, ',')+1;
   d4a6e:	212c      	movs	r1, #44	; 0x2c
   d4a70:	f003 fe68 	bl	d8744 <strchr>
    if (',' != *p)
   d4a74:	7843      	ldrb	r3, [r0, #1]
   d4a76:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }

    p = strchr(p, ',')+1;
   d4a78:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4a7c:	d004      	beq.n	d4a88 <_ZN12Adafruit_GPS5parseEPc+0x2c0>
    {
      fixquality = atoi(p);
   d4a7e:	4628      	mov	r0, r5
   d4a80:	f003 fe09 	bl	d8696 <atoi>
   d4a84:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    }

    p = strchr(p, ',')+1;
   d4a88:	4628      	mov	r0, r5
   d4a8a:	212c      	movs	r1, #44	; 0x2c
   d4a8c:	f003 fe5a 	bl	d8744 <strchr>
    if (',' != *p)
   d4a90:	7843      	ldrb	r3, [r0, #1]
   d4a92:	2b2c      	cmp	r3, #44	; 0x2c
    if (',' != *p)
    {
      fixquality = atoi(p);
    }

    p = strchr(p, ',')+1;
   d4a94:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4a98:	d004      	beq.n	d4aa4 <_ZN12Adafruit_GPS5parseEPc+0x2dc>
    {
      satellites = atoi(p);
   d4a9a:	4628      	mov	r0, r5
   d4a9c:	f003 fdfb 	bl	d8696 <atoi>
   d4aa0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    }

    p = strchr(p, ',')+1;
   d4aa4:	4628      	mov	r0, r5
   d4aa6:	212c      	movs	r1, #44	; 0x2c
   d4aa8:	f003 fe4c 	bl	d8744 <strchr>
    if (',' != *p)
   d4aac:	7843      	ldrb	r3, [r0, #1]
   d4aae:	2b2c      	cmp	r3, #44	; 0x2c
    if (',' != *p)
    {
      satellites = atoi(p);
    }

    p = strchr(p, ',')+1;
   d4ab0:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4ab4:	d007      	beq.n	d4ac6 <_ZN12Adafruit_GPS5parseEPc+0x2fe>
    {
      HDOP = atof(p);
   d4ab6:	4628      	mov	r0, r5
   d4ab8:	f003 fdea 	bl	d8690 <atof>
   d4abc:	ec51 0b10 	vmov	r0, r1, d0
   d4ac0:	f003 fd96 	bl	d85f0 <__aeabi_d2f>
   d4ac4:	6360      	str	r0, [r4, #52]	; 0x34
    }

    p = strchr(p, ',')+1;
   d4ac6:	4628      	mov	r0, r5
   d4ac8:	212c      	movs	r1, #44	; 0x2c
   d4aca:	f003 fe3b 	bl	d8744 <strchr>
    if (',' != *p)
   d4ace:	7843      	ldrb	r3, [r0, #1]
   d4ad0:	2b2c      	cmp	r3, #44	; 0x2c
    if (',' != *p)
    {
      HDOP = atof(p);
    }

    p = strchr(p, ',')+1;
   d4ad2:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4ad6:	d007      	beq.n	d4ae8 <_ZN12Adafruit_GPS5parseEPc+0x320>
    {
      altitude = atof(p);
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f003 fdd9 	bl	d8690 <atof>
   d4ade:	ec51 0b10 	vmov	r0, r1, d0
   d4ae2:	f003 fd85 	bl	d85f0 <__aeabi_d2f>
   d4ae6:	6260      	str	r0, [r4, #36]	; 0x24
    }

    p = strchr(p, ',')+1;
   d4ae8:	212c      	movs	r1, #44	; 0x2c
   d4aea:	4628      	mov	r0, r5
   d4aec:	f003 fe2a 	bl	d8744 <strchr>
    p = strchr(p, ',')+1;
   d4af0:	212c      	movs	r1, #44	; 0x2c
   d4af2:	3001      	adds	r0, #1
   d4af4:	f003 fe26 	bl	d8744 <strchr>
    if (',' != *p)
   d4af8:	7843      	ldrb	r3, [r0, #1]
   d4afa:	2b2c      	cmp	r3, #44	; 0x2c
   d4afc:	f000 819b 	beq.w	d4e36 <_ZN12Adafruit_GPS5parseEPc+0x66e>
    {
      geoidheight = atof(p);
   d4b00:	3001      	adds	r0, #1
   d4b02:	f003 fdc5 	bl	d8690 <atof>
   d4b06:	ec51 0b10 	vmov	r0, r1, d0
   d4b0a:	f003 fd71 	bl	d85f0 <__aeabi_d2f>
   d4b0e:	6220      	str	r0, [r4, #32]
   d4b10:	e191      	b.n	d4e36 <_ZN12Adafruit_GPS5parseEPc+0x66e>
   d4b12:	bf00      	nop
   d4b14:	f3af 8000 	nop.w
   d4b18:	00000000 	.word	0x00000000
   d4b1c:	3ff00000 	.word	0x3ff00000
   d4b20:	000da5b4 	.word	0x000da5b4
   d4b24:	000da5bb 	.word	0x000da5bb
   d4b28:	408f4000 	.word	0x408f4000
   d4b2c:	00989680 	.word	0x00989680
   d4b30:	000186a0 	.word	0x000186a0
   d4b34:	36c9539c 	.word	0x36c9539c
   d4b38:	42700000 	.word	0x42700000
   d4b3c:	42c80000 	.word	0x42c80000
    }
    return true;
  }
  if ((strstr(nmea, "$GPRMC")) || (strstr(nmea, "$GNRMC"))) {
   d4b40:	49c1      	ldr	r1, [pc, #772]	; (d4e48 <_ZN12Adafruit_GPS5parseEPc+0x680>)
   d4b42:	4628      	mov	r0, r5
   d4b44:	f003 fe57 	bl	d87f6 <strstr>
   d4b48:	b930      	cbnz	r0, d4b58 <_ZN12Adafruit_GPS5parseEPc+0x390>
   d4b4a:	49c0      	ldr	r1, [pc, #768]	; (d4e4c <_ZN12Adafruit_GPS5parseEPc+0x684>)
   d4b4c:	4628      	mov	r0, r5
   d4b4e:	f003 fe52 	bl	d87f6 <strstr>
   d4b52:	2800      	cmp	r0, #0
   d4b54:	f43f ae5b 	beq.w	d480e <_ZN12Adafruit_GPS5parseEPc+0x46>
   // found RMC
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
   d4b58:	212c      	movs	r1, #44	; 0x2c
   d4b5a:	4628      	mov	r0, r5
   d4b5c:	f003 fdf2 	bl	d8744 <strchr>
   d4b60:	1c45      	adds	r5, r0, #1
    float timef = atof(p);
   d4b62:	4628      	mov	r0, r5
   d4b64:	f003 fd94 	bl	d8690 <atof>
   d4b68:	ec51 0b10 	vmov	r0, r1, d0
   d4b6c:	f003 fd40 	bl	d85f0 <__aeabi_d2f>
    uint32_t time = timef;
   d4b70:	ee07 0a90 	vmov	s15, r0
   d4b74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    hour = time / 10000;
   d4b78:	f242 7110 	movw	r1, #10000	; 0x2710
    char *p = nmea;

    // get time
    p = strchr(p, ',')+1;
    float timef = atof(p);
    uint32_t time = timef;
   d4b7c:	ee17 2a90 	vmov	r2, s15
    hour = time / 10000;
   d4b80:	fbb2 f3f1 	udiv	r3, r2, r1
   d4b84:	7023      	strb	r3, [r4, #0]
    minute = (time % 10000) / 100;
   d4b86:	fb01 2313 	mls	r3, r1, r3, r2
   d4b8a:	2164      	movs	r1, #100	; 0x64
   d4b8c:	fbb3 f3f1 	udiv	r3, r3, r1
   d4b90:	7063      	strb	r3, [r4, #1]
    seconds = (time % 100);
   d4b92:	fbb2 f3f1 	udiv	r3, r2, r1
   d4b96:	fb01 2213 	mls	r2, r1, r3, r2
   d4b9a:	70a2      	strb	r2, [r4, #2]

    milliseconds = fmod(timef, 1.0) * 1000;
   d4b9c:	f003 f9dc 	bl	d7f58 <__aeabi_f2d>
   d4ba0:	ed9f 1ba7 	vldr	d1, [pc, #668]	; d4e40 <_ZN12Adafruit_GPS5parseEPc+0x678>
   d4ba4:	ec41 0b10 	vmov	d0, r0, r1
   d4ba8:	f002 fc34 	bl	d7414 <fmod>
   d4bac:	4ba8      	ldr	r3, [pc, #672]	; (d4e50 <_ZN12Adafruit_GPS5parseEPc+0x688>)
   d4bae:	2200      	movs	r2, #0
   d4bb0:	ec51 0b10 	vmov	r0, r1, d0
   d4bb4:	f003 fa24 	bl	d8000 <__aeabi_dmul>
   d4bb8:	f003 fcfa 	bl	d85b0 <__aeabi_d2uiz>

    p = strchr(p, ',')+1;
   d4bbc:	212c      	movs	r1, #44	; 0x2c
    uint32_t time = timef;
    hour = time / 10000;
    minute = (time % 10000) / 100;
    seconds = (time % 100);

    milliseconds = fmod(timef, 1.0) * 1000;
   d4bbe:	80e0      	strh	r0, [r4, #6]

    p = strchr(p, ',')+1;
   d4bc0:	4628      	mov	r0, r5
   d4bc2:	f003 fdbf 	bl	d8744 <strchr>
    // Serial.println(p);
    if (p[0] == 'A')
   d4bc6:	7843      	ldrb	r3, [r0, #1]
   d4bc8:	2b41      	cmp	r3, #65	; 0x41
   d4bca:	d101      	bne.n	d4bd0 <_ZN12Adafruit_GPS5parseEPc+0x408>
      fix = true;
   d4bcc:	2301      	movs	r3, #1
   d4bce:	e003      	b.n	d4bd8 <_ZN12Adafruit_GPS5parseEPc+0x410>
    else if (p[0] == 'V')
   d4bd0:	2b56      	cmp	r3, #86	; 0x56
   d4bd2:	f47f ae1c 	bne.w	d480e <_ZN12Adafruit_GPS5parseEPc+0x46>
      fix = false;
   d4bd6:	2300      	movs	r3, #0
   d4bd8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
   d4bdc:	212c      	movs	r1, #44	; 0x2c
   d4bde:	3001      	adds	r0, #1
   d4be0:	f003 fdb0 	bl	d8744 <strchr>
    if (',' != *p)
   d4be4:	7843      	ldrb	r3, [r0, #1]
   d4be6:	2b2c      	cmp	r3, #44	; 0x2c
      fix = false;
    else
      return false;

    // parse out latitude
    p = strchr(p, ',')+1;
   d4be8:	4607      	mov	r7, r0
   d4bea:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
   d4bee:	d051      	beq.n	d4c94 <_ZN12Adafruit_GPS5parseEPc+0x4cc>
    {
      strncpy(degreebuff, p, 2);
   d4bf0:	4631      	mov	r1, r6
   d4bf2:	2202      	movs	r2, #2
      p += 2;
      degreebuff[2] = '\0';
   d4bf4:	f10d 0810 	add.w	r8, sp, #16

    // parse out latitude
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
   d4bf8:	a801      	add	r0, sp, #4
   d4bfa:	f003 fde9 	bl	d87d0 <strncpy>
      p += 2;
      degreebuff[2] = '\0';
   d4bfe:	f04f 0900 	mov.w	r9, #0
      long degree = atol(degreebuff) * 10000000;
   d4c02:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
   d4c04:	f808 9d0a 	strb.w	r9, [r8, #-10]!
      long degree = atol(degreebuff) * 10000000;
   d4c08:	f003 fd49 	bl	d869e <atol>
   d4c0c:	4d91      	ldr	r5, [pc, #580]	; (d4e54 <_ZN12Adafruit_GPS5parseEPc+0x68c>)
      strncpy(degreebuff, p, 2); // minutes
   d4c0e:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
   d4c10:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d4c12:	1cf9      	adds	r1, r7, #3
   d4c14:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d4c16:	1dbe      	adds	r6, r7, #6
    {
      strncpy(degreebuff, p, 2);
      p += 2;
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d4c18:	f003 fdda 	bl	d87d0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d4c1c:	2204      	movs	r2, #4
   d4c1e:	4631      	mov	r1, r6
   d4c20:	4640      	mov	r0, r8
   d4c22:	f003 fdd5 	bl	d87d0 <strncpy>
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
   d4c26:	a801      	add	r0, sp, #4
      degreebuff[2] = '\0';
      long degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d4c28:	f88d 900a 	strb.w	r9, [sp, #10]
      long minutes = 50 * atol(degreebuff) / 3;
   d4c2c:	f003 fd37 	bl	d869e <atol>
   d4c30:	2332      	movs	r3, #50	; 0x32
   d4c32:	4358      	muls	r0, r3
   d4c34:	2303      	movs	r3, #3
   d4c36:	fb90 f0f3 	sdiv	r0, r0, r3
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4c3a:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d4c3e:	182b      	adds	r3, r5, r0
      latitude = degree / 100000 + minutes * 0.000006F;
   d4c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
   d4c44:	6123      	str	r3, [r4, #16]
      latitude = degree / 100000 + minutes * 0.000006F;
   d4c46:	4b84      	ldr	r3, [pc, #528]	; (d4e58 <_ZN12Adafruit_GPS5parseEPc+0x690>)
   d4c48:	fb95 f3f3 	sdiv	r3, r5, r3
   d4c4c:	ee07 3a90 	vmov	s15, r3
   d4c50:	eddf 6a82 	vldr	s13, [pc, #520]	; d4e5c <_ZN12Adafruit_GPS5parseEPc+0x694>
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
   d4c54:	ed9f 6a82 	vldr	s12, [pc, #520]	; d4e60 <_ZN12Adafruit_GPS5parseEPc+0x698>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4c58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
      latitudeDegrees += int(latitude/100);
   d4c5c:	2364      	movs	r3, #100	; 0x64
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4c5e:	eee7 7a26 	vfma.f32	s15, s14, s13
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d4c62:	eddf 6a80 	vldr	s13, [pc, #512]	; d4e64 <_ZN12Adafruit_GPS5parseEPc+0x69c>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      long minutes = 50 * atol(degreebuff) / 3;
      latitude_fixed = degree + minutes;
      latitude = degree / 100000 + minutes * 0.000006F;
   d4c66:	edc4 7a02 	vstr	s15, [r4, #8]
      latitudeDegrees = (latitude-100*int(latitude/100))/60.0;
   d4c6a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4c6e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      latitudeDegrees += int(latitude/100);
   d4c72:	ee17 2a10 	vmov	r2, s14
   d4c76:	4353      	muls	r3, r2
   d4c78:	ee06 3a90 	vmov	s13, r3
   d4c7c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d4c80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4c84:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d4c88:	eec7 6a86 	vdiv.f32	s13, s15, s12
   d4c8c:	ee36 7a87 	vadd.f32	s14, s13, s14
   d4c90:	ed84 7a06 	vstr	s14, [r4, #24]
    }

    p = strchr(p, ',')+1;
   d4c94:	212c      	movs	r1, #44	; 0x2c
   d4c96:	4630      	mov	r0, r6
   d4c98:	f003 fd54 	bl	d8744 <strchr>
   d4c9c:	4603      	mov	r3, r0
   d4c9e:	3001      	adds	r0, #1
    if (',' != *p)
   d4ca0:	785a      	ldrb	r2, [r3, #1]
   d4ca2:	2a2c      	cmp	r2, #44	; 0x2c
   d4ca4:	d012      	beq.n	d4ccc <_ZN12Adafruit_GPS5parseEPc+0x504>
    {
      if (p[0] == 'S') latitudeDegrees *= -1.0;
   d4ca6:	2a53      	cmp	r2, #83	; 0x53
   d4ca8:	bf02      	ittt	eq
   d4caa:	edd4 7a06 	vldreq	s15, [r4, #24]
   d4cae:	eef1 7a67 	vnegeq.f32	s15, s15
   d4cb2:	edc4 7a06 	vstreq	s15, [r4, #24]
      if (p[0] == 'N') lat = 'N';
   d4cb6:	785b      	ldrb	r3, [r3, #1]
   d4cb8:	2b4e      	cmp	r3, #78	; 0x4e
   d4cba:	d005      	beq.n	d4cc8 <_ZN12Adafruit_GPS5parseEPc+0x500>
      else if (p[0] == 'S') lat = 'S';
   d4cbc:	2b53      	cmp	r3, #83	; 0x53
   d4cbe:	d003      	beq.n	d4cc8 <_ZN12Adafruit_GPS5parseEPc+0x500>
      else if (p[0] == ',') lat = 0;
   d4cc0:	2b2c      	cmp	r3, #44	; 0x2c
   d4cc2:	f47f ada4 	bne.w	d480e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d4cc6:	2300      	movs	r3, #0
   d4cc8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d4ccc:	212c      	movs	r1, #44	; 0x2c
   d4cce:	f003 fd39 	bl	d8744 <strchr>
    if (',' != *p)
   d4cd2:	7843      	ldrb	r3, [r0, #1]
   d4cd4:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == ',') lat = 0;
      else return false;
    }

    // parse out longitude
    p = strchr(p, ',')+1;
   d4cd6:	4607      	mov	r7, r0
   d4cd8:	f100 0601 	add.w	r6, r0, #1
    if (',' != *p)
   d4cdc:	d050      	beq.n	d4d80 <_ZN12Adafruit_GPS5parseEPc+0x5b8>
    {
      strncpy(degreebuff, p, 3);
   d4cde:	4631      	mov	r1, r6
   d4ce0:	2203      	movs	r2, #3
   d4ce2:	a801      	add	r0, sp, #4
   d4ce4:	f003 fd74 	bl	d87d0 <strncpy>
      p += 3;
      degreebuff[3] = '\0';
   d4ce8:	f04f 0800 	mov.w	r8, #0
      degree = atol(degreebuff) * 10000000;
   d4cec:	a801      	add	r0, sp, #4
    p = strchr(p, ',')+1;
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
   d4cee:	f88d 8007 	strb.w	r8, [sp, #7]
      degree = atol(degreebuff) * 10000000;
   d4cf2:	f003 fcd4 	bl	d869e <atol>
   d4cf6:	4d57      	ldr	r5, [pc, #348]	; (d4e54 <_ZN12Adafruit_GPS5parseEPc+0x68c>)
      strncpy(degreebuff, p, 2); // minutes
   d4cf8:	2202      	movs	r2, #2
    if (',' != *p)
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
   d4cfa:	4345      	muls	r5, r0
      strncpy(degreebuff, p, 2); // minutes
   d4cfc:	1d39      	adds	r1, r7, #4
   d4cfe:	a801      	add	r0, sp, #4
      p += 3; // skip decimal point
   d4d00:	1dfe      	adds	r6, r7, #7
    {
      strncpy(degreebuff, p, 3);
      p += 3;
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
   d4d02:	f003 fd65 	bl	d87d0 <strncpy>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
   d4d06:	2204      	movs	r2, #4
   d4d08:	4631      	mov	r1, r6
   d4d0a:	f10d 0006 	add.w	r0, sp, #6
   d4d0e:	f003 fd5f 	bl	d87d0 <strncpy>
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
   d4d12:	a801      	add	r0, sp, #4
      degreebuff[3] = '\0';
      degree = atol(degreebuff) * 10000000;
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
   d4d14:	f88d 800a 	strb.w	r8, [sp, #10]
      minutes = 50 * atol(degreebuff) / 3;
   d4d18:	f003 fcc1 	bl	d869e <atol>
   d4d1c:	2332      	movs	r3, #50	; 0x32
   d4d1e:	4358      	muls	r0, r3
   d4d20:	2303      	movs	r3, #3
   d4d22:	fb90 f0f3 	sdiv	r0, r0, r3
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4d26:	ee07 0a90 	vmov	s15, r0
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d4d2a:	182b      	adds	r3, r5, r0
      longitude = degree / 100000 + minutes * 0.000006F;
   d4d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      strncpy(degreebuff, p, 2); // minutes
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
   d4d30:	6163      	str	r3, [r4, #20]
      longitude = degree / 100000 + minutes * 0.000006F;
   d4d32:	4b49      	ldr	r3, [pc, #292]	; (d4e58 <_ZN12Adafruit_GPS5parseEPc+0x690>)
   d4d34:	fb95 f3f3 	sdiv	r3, r5, r3
   d4d38:	ee07 3a90 	vmov	s15, r3
   d4d3c:	eddf 6a47 	vldr	s13, [pc, #284]	; d4e5c <_ZN12Adafruit_GPS5parseEPc+0x694>
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d4d40:	ed9f 6a47 	vldr	s12, [pc, #284]	; d4e60 <_ZN12Adafruit_GPS5parseEPc+0x698>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
      longitudeDegrees += int(longitude/100);
   d4d48:	2364      	movs	r3, #100	; 0x64
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4d4a:	eee7 7a26 	vfma.f32	s15, s14, s13
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d4d4e:	eddf 6a45 	vldr	s13, [pc, #276]	; d4e64 <_ZN12Adafruit_GPS5parseEPc+0x69c>
      p += 3; // skip decimal point
      strncpy(degreebuff + 2, p, 4);
      degreebuff[6] = '\0';
      minutes = 50 * atol(degreebuff) / 3;
      longitude_fixed = degree + minutes;
      longitude = degree / 100000 + minutes * 0.000006F;
   d4d52:	edc4 7a03 	vstr	s15, [r4, #12]
      longitudeDegrees = (longitude-100*int(longitude/100))/60.0;
   d4d56:	ee87 7aa6 	vdiv.f32	s14, s15, s13
   d4d5a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
      longitudeDegrees += int(longitude/100);
   d4d5e:	ee17 2a10 	vmov	r2, s14
   d4d62:	4353      	muls	r3, r2
   d4d64:	ee06 3a90 	vmov	s13, r3
   d4d68:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   d4d6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4d70:	ee77 7ae6 	vsub.f32	s15, s15, s13
   d4d74:	eec7 6a86 	vdiv.f32	s13, s15, s12
   d4d78:	ee36 7a87 	vadd.f32	s14, s13, s14
   d4d7c:	ed84 7a07 	vstr	s14, [r4, #28]
    }

    p = strchr(p, ',')+1;
   d4d80:	212c      	movs	r1, #44	; 0x2c
   d4d82:	4630      	mov	r0, r6
   d4d84:	f003 fcde 	bl	d8744 <strchr>
   d4d88:	4603      	mov	r3, r0
   d4d8a:	3001      	adds	r0, #1
    if (',' != *p)
   d4d8c:	785a      	ldrb	r2, [r3, #1]
   d4d8e:	2a2c      	cmp	r2, #44	; 0x2c
   d4d90:	d012      	beq.n	d4db8 <_ZN12Adafruit_GPS5parseEPc+0x5f0>
    {
      if (p[0] == 'W') longitudeDegrees *= -1.0;
   d4d92:	2a57      	cmp	r2, #87	; 0x57
   d4d94:	bf02      	ittt	eq
   d4d96:	edd4 7a07 	vldreq	s15, [r4, #28]
   d4d9a:	eef1 7a67 	vnegeq.f32	s15, s15
   d4d9e:	edc4 7a07 	vstreq	s15, [r4, #28]
      if (p[0] == 'W') lon = 'W';
   d4da2:	785b      	ldrb	r3, [r3, #1]
   d4da4:	2b57      	cmp	r3, #87	; 0x57
   d4da6:	d005      	beq.n	d4db4 <_ZN12Adafruit_GPS5parseEPc+0x5ec>
      else if (p[0] == 'E') lon = 'E';
   d4da8:	2b45      	cmp	r3, #69	; 0x45
   d4daa:	d003      	beq.n	d4db4 <_ZN12Adafruit_GPS5parseEPc+0x5ec>
      else if (p[0] == ',') lon = 0;
   d4dac:	2b2c      	cmp	r3, #44	; 0x2c
   d4dae:	f47f ad2e 	bne.w	d480e <_ZN12Adafruit_GPS5parseEPc+0x46>
   d4db2:	2300      	movs	r3, #0
   d4db4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
   d4db8:	212c      	movs	r1, #44	; 0x2c
   d4dba:	f003 fcc3 	bl	d8744 <strchr>
    if (',' != *p)
   d4dbe:	7843      	ldrb	r3, [r0, #1]
   d4dc0:	2b2c      	cmp	r3, #44	; 0x2c
      else if (p[0] == 'E') lon = 'E';
      else if (p[0] == ',') lon = 0;
      else return false;
    }
    // speed
    p = strchr(p, ',')+1;
   d4dc2:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4dc6:	d007      	beq.n	d4dd8 <_ZN12Adafruit_GPS5parseEPc+0x610>
    {
      speed = atof(p);
   d4dc8:	4628      	mov	r0, r5
   d4dca:	f003 fc61 	bl	d8690 <atof>
   d4dce:	ec51 0b10 	vmov	r0, r1, d0
   d4dd2:	f003 fc0d 	bl	d85f0 <__aeabi_d2f>
   d4dd6:	62a0      	str	r0, [r4, #40]	; 0x28
    }

    // angle
    p = strchr(p, ',')+1;
   d4dd8:	4628      	mov	r0, r5
   d4dda:	212c      	movs	r1, #44	; 0x2c
   d4ddc:	f003 fcb2 	bl	d8744 <strchr>
    if (',' != *p)
   d4de0:	7843      	ldrb	r3, [r0, #1]
   d4de2:	2b2c      	cmp	r3, #44	; 0x2c
    {
      speed = atof(p);
    }

    // angle
    p = strchr(p, ',')+1;
   d4de4:	f100 0501 	add.w	r5, r0, #1
    if (',' != *p)
   d4de8:	d007      	beq.n	d4dfa <_ZN12Adafruit_GPS5parseEPc+0x632>
    {
      angle = atof(p);
   d4dea:	4628      	mov	r0, r5
   d4dec:	f003 fc50 	bl	d8690 <atof>
   d4df0:	ec51 0b10 	vmov	r0, r1, d0
   d4df4:	f003 fbfc 	bl	d85f0 <__aeabi_d2f>
   d4df8:	62e0      	str	r0, [r4, #44]	; 0x2c
    }

    p = strchr(p, ',')+1;
   d4dfa:	212c      	movs	r1, #44	; 0x2c
   d4dfc:	4628      	mov	r0, r5
   d4dfe:	f003 fca1 	bl	d8744 <strchr>
    if (',' != *p)
   d4e02:	7843      	ldrb	r3, [r0, #1]
   d4e04:	2b2c      	cmp	r3, #44	; 0x2c
   d4e06:	d016      	beq.n	d4e36 <_ZN12Adafruit_GPS5parseEPc+0x66e>
    {
      uint32_t fulldate = atof(p);
   d4e08:	3001      	adds	r0, #1
   d4e0a:	f003 fc41 	bl	d8690 <atof>
   d4e0e:	ec51 0b10 	vmov	r0, r1, d0
   d4e12:	f003 fbcd 	bl	d85b0 <__aeabi_d2uiz>
      day = fulldate / 10000;
   d4e16:	f242 7210 	movw	r2, #10000	; 0x2710
   d4e1a:	fbb0 f3f2 	udiv	r3, r0, r2
   d4e1e:	7163      	strb	r3, [r4, #5]
      month = (fulldate % 10000) / 100;
   d4e20:	fb02 0313 	mls	r3, r2, r3, r0
   d4e24:	2264      	movs	r2, #100	; 0x64
   d4e26:	fbb3 f3f2 	udiv	r3, r3, r2
   d4e2a:	7123      	strb	r3, [r4, #4]
      year = (fulldate % 100);
   d4e2c:	fbb0 f3f2 	udiv	r3, r0, r2
   d4e30:	fb02 0013 	mls	r0, r2, r3, r0
   d4e34:	70e0      	strb	r0, [r4, #3]
    }
    // we dont parse the remaining, yet!
    return true;
   d4e36:	2001      	movs	r0, #1
  }

  return false;
}
   d4e38:	b004      	add	sp, #16
   d4e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4e3e:	bf00      	nop
   d4e40:	00000000 	.word	0x00000000
   d4e44:	3ff00000 	.word	0x3ff00000
   d4e48:	000da5c2 	.word	0x000da5c2
   d4e4c:	000da5c9 	.word	0x000da5c9
   d4e50:	408f4000 	.word	0x408f4000
   d4e54:	00989680 	.word	0x00989680
   d4e58:	000186a0 	.word	0x000186a0
   d4e5c:	36c9539c 	.word	0x36c9539c
   d4e60:	42700000 	.word	0x42700000
   d4e64:	42c80000 	.word	0x42c80000

000d4e68 <_GLOBAL__sub_I_line1>:
   d4e68:	f000 bb18 	b.w	d549c <HAL_Pin_Map>

000d4e6c <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4e6c:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4e6e:	6803      	ldr	r3, [r0, #0]
   d4e70:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4e72:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d4e74:	d904      	bls.n	d4e80 <nrf_gpio_pin_port_decode+0x14>
   d4e76:	4a07      	ldr	r2, [pc, #28]	; (d4e94 <nrf_gpio_pin_port_decode+0x28>)
   d4e78:	2100      	movs	r1, #0
   d4e7a:	200a      	movs	r0, #10
   d4e7c:	f000 fcc6 	bl	d580c <panic_>
#if (GPIO_COUNT == 1)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
   d4e80:	6823      	ldr	r3, [r4, #0]
   d4e82:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d4e84:	bf83      	ittte	hi
   d4e86:	f003 031f 	andhi.w	r3, r3, #31
   d4e8a:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d4e8c:	4802      	ldrhi	r0, [pc, #8]	; (d4e98 <nrf_gpio_pin_port_decode+0x2c>)
    // The oldest definition case
    return NRF_GPIO;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d4e8e:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d4e92:	bd10      	pop	{r4, pc}
   d4e94:	000d555d 	.word	0x000d555d
   d4e98:	50000300 	.word	0x50000300

000d4e9c <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d4e9c:	b507      	push	{r0, r1, r2, lr}
   d4e9e:	ab02      	add	r3, sp, #8
   d4ea0:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4ea4:	4618      	mov	r0, r3
   d4ea6:	f7ff ffe1 	bl	d4e6c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d4eaa:	9a01      	ldr	r2, [sp, #4]
   d4eac:	2301      	movs	r3, #1
   d4eae:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4eb0:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d4eb4:	b003      	add	sp, #12
   d4eb6:	f85d fb04 	ldr.w	pc, [sp], #4

000d4eba <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d4eba:	b507      	push	{r0, r1, r2, lr}
   d4ebc:	ab02      	add	r3, sp, #8
   d4ebe:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4ec2:	4618      	mov	r0, r3
   d4ec4:	f7ff ffd2 	bl	d4e6c <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d4ec8:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d4ecc:	9801      	ldr	r0, [sp, #4]
   d4ece:	fa23 f000 	lsr.w	r0, r3, r0
}
   d4ed2:	f000 0001 	and.w	r0, r0, #1
   d4ed6:	b003      	add	sp, #12
   d4ed8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4edc <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
   d4edc:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
   d4ede:	7203      	strb	r3, [r0, #8]
	firstreading = true;
   d4ee0:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
   d4ee2:	7181      	strb	r1, [r0, #6]
	_type = type;
   d4ee4:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
   d4ee6:	7403      	strb	r3, [r0, #16]
}
   d4ee8:	bd10      	pop	{r4, pc}
	...

000d4eec <_ZN3DHT5beginEv>:

void DHT::begin(void) {
   d4eec:	b510      	push	{r4, lr}
// set up the pins!
	pinMode(_pin, INPUT);
   d4eee:	2100      	movs	r1, #0
	_type = type;
	_count = count;
	firstreading = true;
}

void DHT::begin(void) {
   d4ef0:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
   d4ef2:	7980      	ldrb	r0, [r0, #6]
   d4ef4:	f002 f8ea 	bl	d70cc <pinMode>

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4ef8:	4a07      	ldr	r2, [pc, #28]	; (d4f18 <_ZN3DHT5beginEv+0x2c>)
   d4efa:	79a3      	ldrb	r3, [r4, #6]
   d4efc:	6812      	ldr	r2, [r2, #0]
   d4efe:	011b      	lsls	r3, r3, #4
   d4f00:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d4f02:	5cd0      	ldrb	r0, [r2, r3]
   d4f04:	784b      	ldrb	r3, [r1, #1]
   d4f06:	f003 031f 	and.w	r3, r3, #31
   d4f0a:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4f0e:	f7ff ffc5 	bl	d4e9c <nrf_gpio_pin_set>
	pinSetFast(_pin);
	_lastreadtime = 0;
   d4f12:	2300      	movs	r3, #0
   d4f14:	60e3      	str	r3, [r4, #12]
   d4f16:	bd10      	pop	{r4, pc}
   d4f18:	2003e37c 	.word	0x2003e37c
   d4f1c:	00000000 	.word	0x00000000

000d4f20 <_ZN3DHT16computeHeatIndexEff>:
		}
	}
	return NAN;
}

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d4f20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d4f24:	ee10 0a10 	vmov	r0, s0
		}
	}
	return NAN;
}

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
   d4f28:	edcd 0a00 	vstr	s1, [sp]
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d4f2c:	f003 f814 	bl	d7f58 <__aeabi_f2d>
		10.14333127 * percentHumidity +
   d4f30:	eddd 0a00 	vldr	s1, [sp]

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d4f34:	4604      	mov	r4, r0
		10.14333127 * percentHumidity +
   d4f36:	ee10 0a90 	vmov	r0, s1

float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
   d4f3a:	460d      	mov	r5, r1
		10.14333127 * percentHumidity +
   d4f3c:	f003 f80c 	bl	d7f58 <__aeabi_f2d>
		-0.22475541 * tempFahrenheit * percentHumidity +
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4f40:	4622      	mov	r2, r4
float DHT::computeHeatIndex(float tempFahrenheit, float percentHumidity) {
// Adapted from equation at: https://github.com/adafruit/DHT-sensor-library/issues/9 and
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
		10.14333127 * percentHumidity +
   d4f42:	4606      	mov	r6, r0
   d4f44:	460f      	mov	r7, r1
		-0.22475541 * tempFahrenheit * percentHumidity +
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4f46:	462b      	mov	r3, r5
   d4f48:	4620      	mov	r0, r4
   d4f4a:	4629      	mov	r1, r5
   d4f4c:	f003 f858 	bl	d8000 <__aeabi_dmul>
		-0.05481717 * pow(percentHumidity, 2) + 
   d4f50:	4632      	mov	r2, r6
// Wikipedia: http://en.wikipedia.org/wiki/Heat_index
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
		10.14333127 * percentHumidity +
		-0.22475541 * tempFahrenheit * percentHumidity +
		-0.00683783 * pow(tempFahrenheit, 2) +
   d4f52:	4682      	mov	sl, r0
   d4f54:	468b      	mov	fp, r1
		-0.05481717 * pow(percentHumidity, 2) + 
   d4f56:	463b      	mov	r3, r7
   d4f58:	4630      	mov	r0, r6
   d4f5a:	4639      	mov	r1, r7
   d4f5c:	f003 f850 	bl	d8000 <__aeabi_dmul>
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4f60:	a347      	add	r3, pc, #284	; (adr r3, d5080 <_ZN3DHT16computeHeatIndexEff+0x160>)
   d4f62:	e9d3 2300 	ldrd	r2, r3, [r3]
	return -42.379 + 
		 2.04901523 * tempFahrenheit + 
		10.14333127 * percentHumidity +
		-0.22475541 * tempFahrenheit * percentHumidity +
		-0.00683783 * pow(tempFahrenheit, 2) +
		-0.05481717 * pow(percentHumidity, 2) + 
   d4f66:	e9cd 0100 	strd	r0, r1, [sp]
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	4629      	mov	r1, r5
   d4f6e:	f003 f847 	bl	d8000 <__aeabi_dmul>
   d4f72:	a345      	add	r3, pc, #276	; (adr r3, d5088 <_ZN3DHT16computeHeatIndexEff+0x168>)
   d4f74:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f78:	f002 fe8e 	bl	d7c98 <__aeabi_dsub>
   d4f7c:	a344      	add	r3, pc, #272	; (adr r3, d5090 <_ZN3DHT16computeHeatIndexEff+0x170>)
   d4f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f82:	4680      	mov	r8, r0
   d4f84:	4689      	mov	r9, r1
   d4f86:	4630      	mov	r0, r6
   d4f88:	4639      	mov	r1, r7
   d4f8a:	f003 f839 	bl	d8000 <__aeabi_dmul>
   d4f8e:	4602      	mov	r2, r0
   d4f90:	460b      	mov	r3, r1
   d4f92:	4640      	mov	r0, r8
   d4f94:	4649      	mov	r1, r9
   d4f96:	f002 fe81 	bl	d7c9c <__adddf3>
   d4f9a:	a33f      	add	r3, pc, #252	; (adr r3, d5098 <_ZN3DHT16computeHeatIndexEff+0x178>)
   d4f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fa0:	4680      	mov	r8, r0
   d4fa2:	4689      	mov	r9, r1
   d4fa4:	4620      	mov	r0, r4
   d4fa6:	4629      	mov	r1, r5
   d4fa8:	f003 f82a 	bl	d8000 <__aeabi_dmul>
   d4fac:	4632      	mov	r2, r6
   d4fae:	463b      	mov	r3, r7
   d4fb0:	f003 f826 	bl	d8000 <__aeabi_dmul>
   d4fb4:	4602      	mov	r2, r0
   d4fb6:	460b      	mov	r3, r1
   d4fb8:	4640      	mov	r0, r8
   d4fba:	4649      	mov	r1, r9
   d4fbc:	f002 fe6e 	bl	d7c9c <__adddf3>
   d4fc0:	a337      	add	r3, pc, #220	; (adr r3, d50a0 <_ZN3DHT16computeHeatIndexEff+0x180>)
   d4fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fc6:	4680      	mov	r8, r0
   d4fc8:	4689      	mov	r9, r1
   d4fca:	4650      	mov	r0, sl
   d4fcc:	4659      	mov	r1, fp
   d4fce:	f003 f817 	bl	d8000 <__aeabi_dmul>
   d4fd2:	4602      	mov	r2, r0
   d4fd4:	460b      	mov	r3, r1
   d4fd6:	4640      	mov	r0, r8
   d4fd8:	4649      	mov	r1, r9
   d4fda:	f002 fe5f 	bl	d7c9c <__adddf3>
   d4fde:	a332      	add	r3, pc, #200	; (adr r3, d50a8 <_ZN3DHT16computeHeatIndexEff+0x188>)
   d4fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fe4:	4680      	mov	r8, r0
   d4fe6:	4689      	mov	r9, r1
   d4fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d4fec:	f003 f808 	bl	d8000 <__aeabi_dmul>
   d4ff0:	4602      	mov	r2, r0
   d4ff2:	460b      	mov	r3, r1
   d4ff4:	4640      	mov	r0, r8
   d4ff6:	4649      	mov	r1, r9
   d4ff8:	f002 fe50 	bl	d7c9c <__adddf3>
   d4ffc:	a32c      	add	r3, pc, #176	; (adr r3, d50b0 <_ZN3DHT16computeHeatIndexEff+0x190>)
   d4ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5002:	4680      	mov	r8, r0
   d5004:	4689      	mov	r9, r1
   d5006:	4650      	mov	r0, sl
   d5008:	4659      	mov	r1, fp
   d500a:	f002 fff9 	bl	d8000 <__aeabi_dmul>
   d500e:	4632      	mov	r2, r6
   d5010:	463b      	mov	r3, r7
   d5012:	f002 fff5 	bl	d8000 <__aeabi_dmul>
   d5016:	4602      	mov	r2, r0
   d5018:	460b      	mov	r3, r1
   d501a:	4640      	mov	r0, r8
   d501c:	4649      	mov	r1, r9
   d501e:	f002 fe3d 	bl	d7c9c <__adddf3>
   d5022:	a325      	add	r3, pc, #148	; (adr r3, d50b8 <_ZN3DHT16computeHeatIndexEff+0x198>)
   d5024:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5028:	4606      	mov	r6, r0
   d502a:	460f      	mov	r7, r1
   d502c:	4620      	mov	r0, r4
   d502e:	4629      	mov	r1, r5
   d5030:	f002 ffe6 	bl	d8000 <__aeabi_dmul>
   d5034:	e9dd 2300 	ldrd	r2, r3, [sp]
   d5038:	f002 ffe2 	bl	d8000 <__aeabi_dmul>
   d503c:	4602      	mov	r2, r0
   d503e:	460b      	mov	r3, r1
   d5040:	4630      	mov	r0, r6
   d5042:	4639      	mov	r1, r7
   d5044:	f002 fe2a 	bl	d7c9c <__adddf3>
   d5048:	a31d      	add	r3, pc, #116	; (adr r3, d50c0 <_ZN3DHT16computeHeatIndexEff+0x1a0>)
   d504a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d504e:	4604      	mov	r4, r0
   d5050:	460d      	mov	r5, r1
   d5052:	4650      	mov	r0, sl
   d5054:	4659      	mov	r1, fp
   d5056:	f002 ffd3 	bl	d8000 <__aeabi_dmul>
   d505a:	e9dd 2300 	ldrd	r2, r3, [sp]
   d505e:	f002 ffcf 	bl	d8000 <__aeabi_dmul>
   d5062:	4602      	mov	r2, r0
   d5064:	460b      	mov	r3, r1
   d5066:	4620      	mov	r0, r4
   d5068:	4629      	mov	r1, r5
   d506a:	f002 fe17 	bl	d7c9c <__adddf3>
   d506e:	f003 fabf 	bl	d85f0 <__aeabi_d2f>
}
   d5072:	ee00 0a10 	vmov	s0, r0
   d5076:	b003      	add	sp, #12
   d5078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d507c:	f3af 8000 	nop.w
   d5080:	18ced8ec 	.word	0x18ced8ec
   d5084:	40006462 	.word	0x40006462
   d5088:	126e978d 	.word	0x126e978d
   d508c:	40453083 	.word	0x40453083
   d5090:	b75a49cd 	.word	0xb75a49cd
   d5094:	40244962 	.word	0x40244962
   d5098:	07c647f8 	.word	0x07c647f8
   d509c:	bfccc4c9 	.word	0xbfccc4c9
   d50a0:	039c16cc 	.word	0x039c16cc
   d50a4:	bf7c01fc 	.word	0xbf7c01fc
   d50a8:	00d18c24 	.word	0x00d18c24
   d50ac:	bfac10ff 	.word	0xbfac10ff
   d50b0:	8760dce5 	.word	0x8760dce5
   d50b4:	3f5421b5 	.word	0x3f5421b5
   d50b8:	013330da 	.word	0x013330da
   d50bc:	3f4bf1f9 	.word	0x3f4bf1f9
   d50c0:	11d3bd01 	.word	0x11d3bd01
   d50c4:	bec0b17e 	.word	0xbec0b17e

000d50c8 <_ZN3DHT15computeDewPointEff>:

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   d50c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d50ca:	ed2d 8b02 	vpush	{d8}
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d50ce:	ee10 0a10 	vmov	r0, s0
		 0.00122874 * pow(tempFahrenheit, 2) * percentHumidity + 
		 0.00085282 * tempFahrenheit * pow(percentHumidity, 2) +
		-0.00000199 * pow(tempFahrenheit, 2) * pow(percentHumidity, 2);
}

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
   d50d2:	b083      	sub	sp, #12
   d50d4:	eeb0 8a60 	vmov.f32	s16, s1
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d50d8:	f002 ff3e 	bl	d7f58 <__aeabi_f2d>
   d50dc:	eddf 7a28 	vldr	s15, [pc, #160]	; d5180 <_ZN3DHT15computeDewPointEff+0xb8>
   d50e0:	ee88 7a27 	vdiv.f32	s14, s16, s15
   d50e4:	4604      	mov	r4, r0
   d50e6:	460d      	mov	r5, r1
   d50e8:	ee17 0a10 	vmov	r0, s14
   d50ec:	f002 ff34 	bl	d7f58 <__aeabi_f2d>
   d50f0:	ec41 0b10 	vmov	d0, r0, r1
   d50f4:	f002 f9fa 	bl	d74ec <log>
   d50f8:	a31d      	add	r3, pc, #116	; (adr r3, d5170 <_ZN3DHT15computeDewPointEff+0xa8>)
   d50fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50fe:	4620      	mov	r0, r4
   d5100:	4629      	mov	r1, r5
   d5102:	ed8d 0b00 	vstr	d0, [sp]
   d5106:	f002 ff7b 	bl	d8000 <__aeabi_dmul>
   d510a:	a31b      	add	r3, pc, #108	; (adr r3, d5178 <_ZN3DHT15computeDewPointEff+0xb0>)
   d510c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5110:	4606      	mov	r6, r0
   d5112:	460f      	mov	r7, r1
   d5114:	4620      	mov	r0, r4
   d5116:	4629      	mov	r1, r5
   d5118:	f002 fdc0 	bl	d7c9c <__adddf3>
   d511c:	4602      	mov	r2, r0
   d511e:	460b      	mov	r3, r1
   d5120:	4630      	mov	r0, r6
   d5122:	4639      	mov	r1, r7
   d5124:	f003 f896 	bl	d8254 <__aeabi_ddiv>
   d5128:	ed9d 0b00 	vldr	d0, [sp]
   d512c:	ec53 2b10 	vmov	r2, r3, d0
   d5130:	f002 fdb4 	bl	d7c9c <__adddf3>
	double Td = (b * tC) / (a - tC);
	return Td;
   d5134:	a310      	add	r3, pc, #64	; (adr r3, d5178 <_ZN3DHT15computeDewPointEff+0xb0>)
   d5136:	e9d3 2300 	ldrd	r2, r3, [r3]
}

float DHT::computeDewPoint(float tempCelcius, float percentHumidity) {
	double a = 17.271;
	double b = 237.7;
	double tC = (a * (float) tempCelcius) / (b + (float) tempCelcius) + log( (float) percentHumidity / 100);
   d513a:	4606      	mov	r6, r0
   d513c:	460f      	mov	r7, r1
	double Td = (b * tC) / (a - tC);
	return Td;
   d513e:	f002 ff5f 	bl	d8000 <__aeabi_dmul>
   d5142:	4632      	mov	r2, r6
   d5144:	4604      	mov	r4, r0
   d5146:	460d      	mov	r5, r1
   d5148:	463b      	mov	r3, r7
   d514a:	a109      	add	r1, pc, #36	; (adr r1, d5170 <_ZN3DHT15computeDewPointEff+0xa8>)
   d514c:	e9d1 0100 	ldrd	r0, r1, [r1]
   d5150:	f002 fda2 	bl	d7c98 <__aeabi_dsub>
   d5154:	4602      	mov	r2, r0
   d5156:	460b      	mov	r3, r1
   d5158:	4620      	mov	r0, r4
   d515a:	4629      	mov	r1, r5
   d515c:	f003 f87a 	bl	d8254 <__aeabi_ddiv>
   d5160:	f003 fa46 	bl	d85f0 <__aeabi_d2f>
}
   d5164:	ee00 0a10 	vmov	s0, r0
   d5168:	b003      	add	sp, #12
   d516a:	ecbd 8b02 	vpop	{d8}
   d516e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5170:	4189374c 	.word	0x4189374c
   d5174:	40314560 	.word	0x40314560
   d5178:	66666666 	.word	0x66666666
   d517c:	406db666 	.word	0x406db666
   d5180:	42c80000 	.word	0x42c80000

000d5184 <_ZN3DHT4readEv>:

boolean DHT::read(void) {
   d5184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5188:	4604      	mov	r4, r0
   d518a:	f000 f9ef 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
   d518e:	68e3      	ldr	r3, [r4, #12]
   d5190:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
   d5192:	bf84      	itt	hi
   d5194:	2300      	movhi	r3, #0
   d5196:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d5198:	7c23      	ldrb	r3, [r4, #16]
   d519a:	b933      	cbnz	r3, d51aa <_ZN3DHT4readEv+0x26>
   d519c:	68e3      	ldr	r3, [r4, #12]
   d519e:	1ac0      	subs	r0, r0, r3
   d51a0:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d51a4:	d201      	bcs.n	d51aa <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d51a6:	2001      	movs	r0, #1
   d51a8:	e0a8      	b.n	d52fc <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d51aa:	2500      	movs	r5, #0

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d51ac:	4e55      	ldr	r6, [pc, #340]	; (d5304 <_ZN3DHT4readEv+0x180>)
   d51ae:	7425      	strb	r5, [r4, #16]
   d51b0:	f000 f9dc 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
   d51b4:	79a3      	ldrb	r3, [r4, #6]
   d51b6:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d51b8:	60e0      	str	r0, [r4, #12]
   d51ba:	011b      	lsls	r3, r3, #4
   d51bc:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d51be:	7125      	strb	r5, [r4, #4]
   d51c0:	70e5      	strb	r5, [r4, #3]
   d51c2:	70a5      	strb	r5, [r4, #2]
   d51c4:	7065      	strb	r5, [r4, #1]
   d51c6:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d51c8:	5cd0      	ldrb	r0, [r2, r3]
   d51ca:	784b      	ldrb	r3, [r1, #1]
   d51cc:	f003 031f 	and.w	r3, r3, #31
   d51d0:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d51d4:	f7ff fe62 	bl	d4e9c <nrf_gpio_pin_set>
  
// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d51d8:	20fa      	movs	r0, #250	; 0xfa
   d51da:	f001 f825 	bl	d6228 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
   d51de:	2101      	movs	r1, #1
   d51e0:	79a0      	ldrb	r0, [r4, #6]
   d51e2:	f001 ff73 	bl	d70cc <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d51e6:	79a3      	ldrb	r3, [r4, #6]
   d51e8:	6832      	ldr	r2, [r6, #0]
   d51ea:	011b      	lsls	r3, r3, #4
   d51ec:	18d1      	adds	r1, r2, r3
   d51ee:	5cd2      	ldrb	r2, [r2, r3]
   d51f0:	784b      	ldrb	r3, [r1, #1]
   d51f2:	a802      	add	r0, sp, #8
   d51f4:	f003 031f 	and.w	r3, r3, #31
   d51f8:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d51fc:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d5200:	f7ff fe34 	bl	d4e6c <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d5204:	9b01      	ldr	r3, [sp, #4]
   d5206:	f04f 0801 	mov.w	r8, #1
   d520a:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d520e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d5212:	2014      	movs	r0, #20
   d5214:	f001 f808 	bl	d6228 <delay>
	noInterrupts();
   d5218:	f001 fc1a 	bl	d6a50 <_Z12noInterruptsv>

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d521c:	79a3      	ldrb	r3, [r4, #6]
   d521e:	6832      	ldr	r2, [r6, #0]
   d5220:	011b      	lsls	r3, r3, #4
   d5222:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d5224:	5cd0      	ldrb	r0, [r2, r3]
   d5226:	784b      	ldrb	r3, [r1, #1]
   d5228:	f003 031f 	and.w	r3, r3, #31
   d522c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d5230:	f7ff fe34 	bl	d4e9c <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5234:	2028      	movs	r0, #40	; 0x28
   d5236:	f000 f991 	bl	d555c <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d523a:	4629      	mov	r1, r5
   d523c:	79a0      	ldrb	r0, [r4, #6]
   d523e:	f001 ff45 	bl	d70cc <pinMode>
}

boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
   d5242:	462f      	mov	r7, r5
	double Td = (b * tC) / (a - tC);
	return Td;
}

boolean DHT::read(void) {
	uint8_t laststate = HIGH;
   d5244:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5248:	79a3      	ldrb	r3, [r4, #6]
   d524a:	6832      	ldr	r2, [r6, #0]
   d524c:	011b      	lsls	r3, r3, #4
   d524e:	18d1      	adds	r1, r2, r3
   d5250:	f812 a003 	ldrb.w	sl, [r2, r3]
   d5254:	784b      	ldrb	r3, [r1, #1]
   d5256:	f003 031f 	and.w	r3, r3, #31
   d525a:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d525e:	4650      	mov	r0, sl
   d5260:	f7ff fe2b 	bl	d4eba <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d5264:	4650      	mov	r0, sl
   d5266:	f7ff fe28 	bl	d4eba <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d526a:	4580      	cmp	r8, r0
   d526c:	fa5f f98b 	uxtb.w	r9, fp
   d5270:	d108      	bne.n	d5284 <_ZN3DHT4readEv+0x100>
   d5272:	2001      	movs	r0, #1
   d5274:	f10b 0b01 	add.w	fp, fp, #1
   d5278:	f000 f970 	bl	d555c <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d527c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d5280:	d1e2      	bne.n	d5248 <_ZN3DHT4readEv+0xc4>
   d5282:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d5284:	79a3      	ldrb	r3, [r4, #6]
   d5286:	6832      	ldr	r2, [r6, #0]
   d5288:	011b      	lsls	r3, r3, #4
   d528a:	18d1      	adds	r1, r2, r3
   d528c:	f812 8003 	ldrb.w	r8, [r2, r3]
   d5290:	784b      	ldrb	r3, [r1, #1]
   d5292:	f003 031f 	and.w	r3, r3, #31
   d5296:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz. 
    (void)nrf_gpio_pin_read(nrf_pin);
   d529a:	4640      	mov	r0, r8
   d529c:	f7ff fe0d 	bl	d4eba <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d52a0:	4640      	mov	r0, r8
   d52a2:	f7ff fe0a 	bl	d4eba <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d52a6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d52aa:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d52ae:	d014      	beq.n	d52da <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
   d52b0:	2d03      	cmp	r5, #3
   d52b2:	d90e      	bls.n	d52d2 <_ZN3DHT4readEv+0x14e>
   d52b4:	07eb      	lsls	r3, r5, #31
   d52b6:	d40c      	bmi.n	d52d2 <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d52b8:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d52ba:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d52bc:	5ca3      	ldrb	r3, [r4, r2]
   d52be:	005b      	lsls	r3, r3, #1
   d52c0:	b2db      	uxtb	r3, r3
   d52c2:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d52c4:	7a21      	ldrb	r1, [r4, #8]
   d52c6:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d52c8:	bf3c      	itt	cc
   d52ca:	f043 0301 	orrcc.w	r3, r3, #1
   d52ce:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d52d0:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
   d52d2:	3501      	adds	r5, #1
   d52d4:	b2ed      	uxtb	r5, r5
   d52d6:	2d55      	cmp	r5, #85	; 0x55
   d52d8:	d1b4      	bne.n	d5244 <_ZN3DHT4readEv+0xc0>
				data[j/8] |= 1;
			j++;
		}
	}

	interrupts();
   d52da:	f001 fbbb 	bl	d6a54 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
   d52de:	2f27      	cmp	r7, #39	; 0x27
   d52e0:	d90b      	bls.n	d52fa <_ZN3DHT4readEv+0x176>
   d52e2:	7822      	ldrb	r2, [r4, #0]
   d52e4:	7863      	ldrb	r3, [r4, #1]
   d52e6:	7921      	ldrb	r1, [r4, #4]
   d52e8:	4413      	add	r3, r2
   d52ea:	78a2      	ldrb	r2, [r4, #2]
   d52ec:	4413      	add	r3, r2
   d52ee:	78e2      	ldrb	r2, [r4, #3]
   d52f0:	4413      	add	r3, r2
   d52f2:	b2db      	uxtb	r3, r3
   d52f4:	4299      	cmp	r1, r3
   d52f6:	f43f af56 	beq.w	d51a6 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
   d52fa:	2000      	movs	r0, #0

}
   d52fc:	b003      	add	sp, #12
   d52fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5302:	bf00      	nop
   d5304:	2003e37c 	.word	0x2003e37c

000d5308 <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
   d5308:	b510      	push	{r4, lr}
   d530a:	4604      	mov	r4, r0
	float f;

	if (read()) {
   d530c:	f7ff ff3a 	bl	d5184 <_ZN3DHT4readEv>
   d5310:	b330      	cbz	r0, d5360 <_ZN3DHT15readTemperatureEv+0x58>
		switch (_type) {
   d5312:	79e3      	ldrb	r3, [r4, #7]
   d5314:	2b0b      	cmp	r3, #11
   d5316:	d004      	beq.n	d5322 <_ZN3DHT15readTemperatureEv+0x1a>
   d5318:	d322      	bcc.n	d5360 <_ZN3DHT15readTemperatureEv+0x58>
   d531a:	3b15      	subs	r3, #21
   d531c:	2b01      	cmp	r3, #1
   d531e:	d906      	bls.n	d532e <_ZN3DHT15readTemperatureEv+0x26>
   d5320:	e01e      	b.n	d5360 <_ZN3DHT15readTemperatureEv+0x58>
			case DHT11:
				f = data[2];
   d5322:	78a3      	ldrb	r3, [r4, #2]
   d5324:	ee00 3a10 	vmov	s0, r3
   d5328:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d532c:	bd10      	pop	{r4, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
   d532e:	78a3      	ldrb	r3, [r4, #2]
				f *= 256;
				f += data[3];
   d5330:	eddf 6a0d 	vldr	s13, [pc, #52]	; d5368 <_ZN3DHT15readTemperatureEv+0x60>
			case DHT11:
				f = data[2];
				return f;
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
   d5334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
   d5338:	ee07 2a10 	vmov	s14, r2
				f *= 256;
				f += data[3];
   d533c:	78e2      	ldrb	r2, [r4, #3]
   d533e:	ee07 2a90 	vmov	s15, r2
			case DHT11:
				f = data[2];
				return f;
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
   d5342:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				f *= 256;
				f += data[3];
   d5346:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				f /= 10;
				if (data[2] & 0x80)
   d534a:	061b      	lsls	r3, r3, #24
				return f;
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
				f *= 256;
				f += data[3];
   d534c:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d5350:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d5354:	ee87 0a87 	vdiv.f32	s0, s15, s14
				if (data[2] & 0x80)
   d5358:	d504      	bpl.n	d5364 <_ZN3DHT15readTemperatureEv+0x5c>
					f *= -1;
   d535a:	eeb1 0a40 	vneg.f32	s0, s0
   d535e:	bd10      	pop	{r4, pc}
				return f;
		}
	}
	return NAN;
   d5360:	ed9f 0a02 	vldr	s0, [pc, #8]	; d536c <_ZN3DHT15readTemperatureEv+0x64>
}
   d5364:	bd10      	pop	{r4, pc}
   d5366:	bf00      	nop
   d5368:	43800000 	.word	0x43800000
   d536c:	7fc00000 	.word	0x7fc00000

000d5370 <_ZN3DHT16getTempFarenheitEv>:

float DHT::getTempCelcius() {
	return readTemperature();
}

float DHT::getTempFarenheit() {
   d5370:	b508      	push	{r3, lr}
	return convertCtoF(readTemperature());
   d5372:	f7ff ffc9 	bl	d5308 <_ZN3DHT15readTemperatureEv>
   d5376:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
   d537a:	ee60 7a27 	vmul.f32	s15, s0, s15
   d537e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
   d5382:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d5386:	eddf 7a02 	vldr	s15, [pc, #8]	; d5390 <_ZN3DHT16getTempFarenheitEv+0x20>
   d538a:	ee30 0a27 	vadd.f32	s0, s0, s15
   d538e:	bd08      	pop	{r3, pc}
   d5390:	42000000 	.word	0x42000000

000d5394 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
   d5394:	b510      	push	{r4, lr}
   d5396:	4604      	mov	r4, r0
	float f;

	if (read()) {
   d5398:	f7ff fef4 	bl	d5184 <_ZN3DHT4readEv>
   d539c:	b1f8      	cbz	r0, d53de <_ZN3DHT12readHumidityEv+0x4a>
		switch (_type) {
   d539e:	79e3      	ldrb	r3, [r4, #7]
   d53a0:	2b0b      	cmp	r3, #11
   d53a2:	d016      	beq.n	d53d2 <_ZN3DHT12readHumidityEv+0x3e>
   d53a4:	d31b      	bcc.n	d53de <_ZN3DHT12readHumidityEv+0x4a>
   d53a6:	3b15      	subs	r3, #21
   d53a8:	2b01      	cmp	r3, #1
   d53aa:	d818      	bhi.n	d53de <_ZN3DHT12readHumidityEv+0x4a>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
   d53ac:	7823      	ldrb	r3, [r4, #0]
				f *= 256;
				f += data[1];
   d53ae:	eddf 6a0d 	vldr	s13, [pc, #52]	; d53e4 <_ZN3DHT12readHumidityEv+0x50>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
   d53b2:	ee07 3a10 	vmov	s14, r3
				f *= 256;
				f += data[1];
   d53b6:	7863      	ldrb	r3, [r4, #1]
   d53b8:	ee07 3a90 	vmov	s15, r3
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
   d53bc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
				f *= 256;
				f += data[1];
   d53c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d53c4:	eee7 7a26 	vfma.f32	s15, s14, s13
				f /= 10;
   d53c8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
   d53cc:	ee87 0a87 	vdiv.f32	s0, s15, s14
   d53d0:	bd10      	pop	{r4, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
   d53d2:	7823      	ldrb	r3, [r4, #0]
   d53d4:	ee00 3a10 	vmov	s0, r3
   d53d8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
				return f;
   d53dc:	bd10      	pop	{r4, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
   d53de:	ed9f 0a02 	vldr	s0, [pc, #8]	; d53e8 <_ZN3DHT12readHumidityEv+0x54>
}
   d53e2:	bd10      	pop	{r4, pc}
   d53e4:	43800000 	.word	0x43800000
   d53e8:	7fc00000 	.word	0x7fc00000

000d53ec <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
   d53ec:	f7ff bfd2 	b.w	d5394 <_ZN3DHT12readHumidityEv>

000d53f0 <_ZN3DHT12getHeatIndexEv>:

float DHT::getTempKelvin() {
	return convertCtoK(readTemperature());
}

float DHT::getHeatIndex() {
   d53f0:	b510      	push	{r4, lr}
   d53f2:	ed2d 8b04 	vpush	{d8-d9}
   d53f6:	4604      	mov	r4, r0
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
   d53f8:	f7ff ff86 	bl	d5308 <_ZN3DHT15readTemperatureEv>
   d53fc:	eef2 8a02 	vmov.f32	s17, #34	; 0x41100000  9.0
   d5400:	eeb0 8a40 	vmov.f32	s16, s0
   d5404:	4620      	mov	r0, r4
   d5406:	f7ff ffc5 	bl	d5394 <_ZN3DHT12readHumidityEv>
   d540a:	ee68 7a28 	vmul.f32	s15, s16, s17
   d540e:	eeb1 9a04 	vmov.f32	s18, #20	; 0x40a00000  5.0
   d5412:	ee87 7a89 	vdiv.f32	s14, s15, s18
   d5416:	4620      	mov	r0, r4
   d5418:	ed9f 8a08 	vldr	s16, [pc, #32]	; d543c <_ZN3DHT12getHeatIndexEv+0x4c>
   d541c:	eef0 0a40 	vmov.f32	s1, s0
   d5420:	ee37 0a08 	vadd.f32	s0, s14, s16
   d5424:	f7ff fd7c 	bl	d4f20 <_ZN3DHT16computeHeatIndexEff>
   d5428:	ee30 0a48 	vsub.f32	s0, s0, s16
   d542c:	ee20 0a09 	vmul.f32	s0, s0, s18
}
   d5430:	ee80 0a28 	vdiv.f32	s0, s0, s17
   d5434:	ecbd 8b04 	vpop	{d8-d9}
   d5438:	bd10      	pop	{r4, pc}
   d543a:	bf00      	nop
   d543c:	42000000 	.word	0x42000000

000d5440 <_ZN3DHT11getDewPointEv>:

float DHT::getDewPoint() {
   d5440:	b510      	push	{r4, lr}
   d5442:	ed2d 8b02 	vpush	{d8}
   d5446:	4604      	mov	r4, r0
	return computeDewPoint(readTemperature(), readHumidity());
   d5448:	f7ff ff5e 	bl	d5308 <_ZN3DHT15readTemperatureEv>
   d544c:	4620      	mov	r0, r4
   d544e:	eeb0 8a40 	vmov.f32	s16, s0
   d5452:	f7ff ff9f 	bl	d5394 <_ZN3DHT12readHumidityEv>
   d5456:	eef0 0a40 	vmov.f32	s1, s0
   d545a:	eeb0 0a48 	vmov.f32	s0, s16
}
   d545e:	ecbd 8b02 	vpop	{d8}
float DHT::getHeatIndex() {
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
}

float DHT::getDewPoint() {
	return computeDewPoint(readTemperature(), readHumidity());
   d5462:	4620      	mov	r0, r4
}
   d5464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
float DHT::getHeatIndex() {
	return convertFtoC(computeHeatIndex(convertCtoF(readTemperature()), readHumidity()));
}

float DHT::getDewPoint() {
	return computeDewPoint(readTemperature(), readHumidity());
   d5468:	f7ff be2e 	b.w	d50c8 <_ZN3DHT15computeDewPointEff>

000d546c <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
		return true;
	}
 
	return false;

}
   d546c:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d546e:	f000 f815 	bl	d549c <HAL_Pin_Map>
   d5472:	4b01      	ldr	r3, [pc, #4]	; (d5478 <_GLOBAL__sub_I__ZN3DHTC2Ehhh+0xc>)
   d5474:	6018      	str	r0, [r3, #0]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	2003e37c 	.word	0x2003e37c

000d547c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <netdb_freeaddrinfo+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	689b      	ldr	r3, [r3, #8]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	00030268 	.word	0x00030268

000d548c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <netdb_getaddrinfo+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	68db      	ldr	r3, [r3, #12]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	00030268 	.word	0x00030268

000d549c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_Pin_Map+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	681b      	ldr	r3, [r3, #0]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003022c 	.word	0x0003022c

000d54ac <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_Pin_Mode+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	689b      	ldr	r3, [r3, #8]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003022c 	.word	0x0003022c

000d54bc <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_Interrupts_Enable_All+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	6a1b      	ldr	r3, [r3, #32]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003022c 	.word	0x0003022c

000d54cc <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_Interrupts_Disable_All+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003022c 	.word	0x0003022c

000d54dc <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_SPI_Init+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	69db      	ldr	r3, [r3, #28]
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	00030230 	.word	0x00030230

000d54ec <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_SPI_Is_Enabled+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	6a1b      	ldr	r3, [r3, #32]
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	00030230 	.word	0x00030230

000d54fc <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <if_name_to_index+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	691b      	ldr	r3, [r3, #16]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	0003026c 	.word	0x0003026c

000d550c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <if_index_to_name+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	695b      	ldr	r3, [r3, #20]
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	0003026c 	.word	0x0003026c

000d551c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <if_get_by_index+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	699b      	ldr	r3, [r3, #24]
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	0003026c 	.word	0x0003026c

000d552c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <if_get_addrs+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	0003026c 	.word	0x0003026c

000d553c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <if_free_if_addrs+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	0003026c 	.word	0x0003026c

000d554c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <HAL_RNG_GetRandomNumber+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	685b      	ldr	r3, [r3, #4]
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030218 	.word	0x00030218

000d555c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_Delay_Microseconds+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	68db      	ldr	r3, [r3, #12]
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030218 	.word	0x00030218

000d556c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	695b      	ldr	r3, [r3, #20]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030218 	.word	0x00030218

000d557c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <os_thread_is_current+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	689b      	ldr	r3, [r3, #8]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	00030248 	.word	0x00030248

000d558c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <os_thread_join+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	691b      	ldr	r3, [r3, #16]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	00030248 	.word	0x00030248

000d559c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <os_thread_cleanup+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	695b      	ldr	r3, [r3, #20]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	00030248 	.word	0x00030248

000d55ac <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <os_mutex_create+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	00030248 	.word	0x00030248

000d55bc <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <os_mutex_recursive_create+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	00030248 	.word	0x00030248

000d55cc <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <os_mutex_recursive_lock+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	00030248 	.word	0x00030248

000d55dc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <os_mutex_recursive_unlock+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	00030248 	.word	0x00030248

000d55ec <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <inet_inet_ntop+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	695b      	ldr	r3, [r3, #20]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	00030264 	.word	0x00030264

000d55fc <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <inet_inet_pton+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	699b      	ldr	r3, [r3, #24]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030264 	.word	0x00030264

000d560c <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <inet_htonl+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	6a1b      	ldr	r3, [r3, #32]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030264 	.word	0x00030264

000d561c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <inet_ntohs+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030264 	.word	0x00030264

000d562c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <inet_htons+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030264 	.word	0x00030264

000d563c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <HAL_USART_Init+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	681b      	ldr	r3, [r3, #0]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	0003023c 	.word	0x0003023c

000d564c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <HAL_USART_Write_Data+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	68db      	ldr	r3, [r3, #12]
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	0003023c 	.word	0x0003023c

000d565c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <HAL_USART_Available_Data+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	691b      	ldr	r3, [r3, #16]
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	0003023c 	.word	0x0003023c

000d566c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <HAL_USART_Read_Data+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	695b      	ldr	r3, [r3, #20]
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	0003023c 	.word	0x0003023c

000d567c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <HAL_USART_Peek_Data+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	699b      	ldr	r3, [r3, #24]
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	0003023c 	.word	0x0003023c

000d568c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <HAL_USART_Flush_Data+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	69db      	ldr	r3, [r3, #28]
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	0003023c 	.word	0x0003023c

000d569c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <HAL_USART_Is_Enabled+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	6a1b      	ldr	r3, [r3, #32]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	0003023c 	.word	0x0003023c

000d56ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	0003023c 	.word	0x0003023c

000d56bc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b02      	ldr	r3, [pc, #8]	; (d56c8 <HAL_USART_BeginConfig+0xc>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d56c4:	9301      	str	r3, [sp, #4]
   d56c6:	bd08      	pop	{r3, pc}
   d56c8:	0003023c 	.word	0x0003023c

000d56cc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d56cc:	b508      	push	{r3, lr}
   d56ce:	4b02      	ldr	r3, [pc, #8]	; (d56d8 <HAL_I2C_Write_Data+0xc>)
   d56d0:	681b      	ldr	r3, [r3, #0]
   d56d2:	6a1b      	ldr	r3, [r3, #32]
   d56d4:	9301      	str	r3, [sp, #4]
   d56d6:	bd08      	pop	{r3, pc}
   d56d8:	00030228 	.word	0x00030228

000d56dc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d56dc:	b508      	push	{r3, lr}
   d56de:	4b02      	ldr	r3, [pc, #8]	; (d56e8 <HAL_I2C_Available_Data+0xc>)
   d56e0:	681b      	ldr	r3, [r3, #0]
   d56e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56e4:	9301      	str	r3, [sp, #4]
   d56e6:	bd08      	pop	{r3, pc}
   d56e8:	00030228 	.word	0x00030228

000d56ec <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d56ec:	b508      	push	{r3, lr}
   d56ee:	4b02      	ldr	r3, [pc, #8]	; (d56f8 <HAL_I2C_Read_Data+0xc>)
   d56f0:	681b      	ldr	r3, [r3, #0]
   d56f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56f4:	9301      	str	r3, [sp, #4]
   d56f6:	bd08      	pop	{r3, pc}
   d56f8:	00030228 	.word	0x00030228

000d56fc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d56fc:	b508      	push	{r3, lr}
   d56fe:	4b02      	ldr	r3, [pc, #8]	; (d5708 <HAL_I2C_Peek_Data+0xc>)
   d5700:	681b      	ldr	r3, [r3, #0]
   d5702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5704:	9301      	str	r3, [sp, #4]
   d5706:	bd08      	pop	{r3, pc}
   d5708:	00030228 	.word	0x00030228

000d570c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d570c:	b508      	push	{r3, lr}
   d570e:	4b02      	ldr	r3, [pc, #8]	; (d5718 <HAL_I2C_Flush_Data+0xc>)
   d5710:	681b      	ldr	r3, [r3, #0]
   d5712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5714:	9301      	str	r3, [sp, #4]
   d5716:	bd08      	pop	{r3, pc}
   d5718:	00030228 	.word	0x00030228

000d571c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d571c:	b508      	push	{r3, lr}
   d571e:	4b02      	ldr	r3, [pc, #8]	; (d5728 <HAL_I2C_Is_Enabled+0xc>)
   d5720:	681b      	ldr	r3, [r3, #0]
   d5722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5724:	9301      	str	r3, [sp, #4]
   d5726:	bd08      	pop	{r3, pc}
   d5728:	00030228 	.word	0x00030228

000d572c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <HAL_I2C_Init+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030228 	.word	0x00030228

000d573c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <sock_bind+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	685b      	ldr	r3, [r3, #4]
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030238 	.word	0x00030238

000d574c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <sock_setsockopt+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	699b      	ldr	r3, [r3, #24]
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	00030238 	.word	0x00030238

000d575c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <sock_close+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	69db      	ldr	r3, [r3, #28]
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030238 	.word	0x00030238

000d576c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <sock_recvfrom+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030238 	.word	0x00030238

000d577c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <sock_sendto+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030238 	.word	0x00030238

000d578c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <sock_socket+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	00030238 	.word	0x00030238

000d579c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <HAL_USB_USART_Init+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	681b      	ldr	r3, [r3, #0]
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	0003024c 	.word	0x0003024c

000d57ac <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <HAL_USB_USART_Begin+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	685b      	ldr	r3, [r3, #4]
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	0003024c 	.word	0x0003024c

000d57bc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <HAL_USB_USART_Available_Data+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	691b      	ldr	r3, [r3, #16]
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	0003024c 	.word	0x0003024c

000d57cc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	695b      	ldr	r3, [r3, #20]
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	0003024c 	.word	0x0003024c

000d57dc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <HAL_USB_USART_Receive_Data+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	699b      	ldr	r3, [r3, #24]
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	0003024c 	.word	0x0003024c

000d57ec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <HAL_USB_USART_Send_Data+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	69db      	ldr	r3, [r3, #28]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	0003024c 	.word	0x0003024c

000d57fc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <HAL_USB_USART_Flush_Data+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	6a1b      	ldr	r3, [r3, #32]
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	0003024c 	.word	0x0003024c

000d580c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <panic_+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030260 	.word	0x00030260

000d581c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <set_system_mode+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	685b      	ldr	r3, [r3, #4]
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030220 	.word	0x00030220

000d582c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <system_delay_ms+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	695b      	ldr	r3, [r3, #20]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030220 	.word	0x00030220

000d583c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <application_thread_current+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030220 	.word	0x00030220

000d584c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <application_thread_invoke+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030220 	.word	0x00030220

000d585c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b03      	ldr	r3, [pc, #12]	; (d586c <system_ctrl_set_app_request_handler+0x10>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5866:	9301      	str	r3, [sp, #4]
   d5868:	bd08      	pop	{r3, pc}
   d586a:	0000      	.short	0x0000
   d586c:	00030220 	.word	0x00030220

000d5870 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5870:	b508      	push	{r3, lr}
   d5872:	4b03      	ldr	r3, [pc, #12]	; (d5880 <system_ctrl_set_result+0x10>)
   d5874:	681b      	ldr	r3, [r3, #0]
   d5876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d587a:	9301      	str	r3, [sp, #4]
   d587c:	bd08      	pop	{r3, pc}
   d587e:	0000      	.short	0x0000
   d5880:	00030220 	.word	0x00030220

000d5884 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5884:	b508      	push	{r3, lr}
   d5886:	4b02      	ldr	r3, [pc, #8]	; (d5890 <network_connect+0xc>)
   d5888:	681b      	ldr	r3, [r3, #0]
   d588a:	685b      	ldr	r3, [r3, #4]
   d588c:	9301      	str	r3, [sp, #4]
   d588e:	bd08      	pop	{r3, pc}
   d5890:	00030240 	.word	0x00030240

000d5894 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5894:	b508      	push	{r3, lr}
   d5896:	4b02      	ldr	r3, [pc, #8]	; (d58a0 <network_connecting+0xc>)
   d5898:	681b      	ldr	r3, [r3, #0]
   d589a:	689b      	ldr	r3, [r3, #8]
   d589c:	9301      	str	r3, [sp, #4]
   d589e:	bd08      	pop	{r3, pc}
   d58a0:	00030240 	.word	0x00030240

000d58a4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58a4:	b508      	push	{r3, lr}
   d58a6:	4b02      	ldr	r3, [pc, #8]	; (d58b0 <network_disconnect+0xc>)
   d58a8:	681b      	ldr	r3, [r3, #0]
   d58aa:	68db      	ldr	r3, [r3, #12]
   d58ac:	9301      	str	r3, [sp, #4]
   d58ae:	bd08      	pop	{r3, pc}
   d58b0:	00030240 	.word	0x00030240

000d58b4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d58b4:	b508      	push	{r3, lr}
   d58b6:	4b02      	ldr	r3, [pc, #8]	; (d58c0 <network_ready+0xc>)
   d58b8:	681b      	ldr	r3, [r3, #0]
   d58ba:	691b      	ldr	r3, [r3, #16]
   d58bc:	9301      	str	r3, [sp, #4]
   d58be:	bd08      	pop	{r3, pc}
   d58c0:	00030240 	.word	0x00030240

000d58c4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d58c4:	b508      	push	{r3, lr}
   d58c6:	4b02      	ldr	r3, [pc, #8]	; (d58d0 <network_on+0xc>)
   d58c8:	681b      	ldr	r3, [r3, #0]
   d58ca:	695b      	ldr	r3, [r3, #20]
   d58cc:	9301      	str	r3, [sp, #4]
   d58ce:	bd08      	pop	{r3, pc}
   d58d0:	00030240 	.word	0x00030240

000d58d4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d58d4:	b508      	push	{r3, lr}
   d58d6:	4b02      	ldr	r3, [pc, #8]	; (d58e0 <network_off+0xc>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	699b      	ldr	r3, [r3, #24]
   d58dc:	9301      	str	r3, [sp, #4]
   d58de:	bd08      	pop	{r3, pc}
   d58e0:	00030240 	.word	0x00030240

000d58e4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d58e4:	b508      	push	{r3, lr}
   d58e6:	4b02      	ldr	r3, [pc, #8]	; (d58f0 <network_listen+0xc>)
   d58e8:	681b      	ldr	r3, [r3, #0]
   d58ea:	69db      	ldr	r3, [r3, #28]
   d58ec:	9301      	str	r3, [sp, #4]
   d58ee:	bd08      	pop	{r3, pc}
   d58f0:	00030240 	.word	0x00030240

000d58f4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d58f4:	b508      	push	{r3, lr}
   d58f6:	4b02      	ldr	r3, [pc, #8]	; (d5900 <network_listening+0xc>)
   d58f8:	681b      	ldr	r3, [r3, #0]
   d58fa:	6a1b      	ldr	r3, [r3, #32]
   d58fc:	9301      	str	r3, [sp, #4]
   d58fe:	bd08      	pop	{r3, pc}
   d5900:	00030240 	.word	0x00030240

000d5904 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5904:	b508      	push	{r3, lr}
   d5906:	4b02      	ldr	r3, [pc, #8]	; (d5910 <network_set_listen_timeout+0xc>)
   d5908:	681b      	ldr	r3, [r3, #0]
   d590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d590c:	9301      	str	r3, [sp, #4]
   d590e:	bd08      	pop	{r3, pc}
   d5910:	00030240 	.word	0x00030240

000d5914 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5914:	b508      	push	{r3, lr}
   d5916:	4b02      	ldr	r3, [pc, #8]	; (d5920 <network_get_listen_timeout+0xc>)
   d5918:	681b      	ldr	r3, [r3, #0]
   d591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d591c:	9301      	str	r3, [sp, #4]
   d591e:	bd08      	pop	{r3, pc}
   d5920:	00030240 	.word	0x00030240

000d5924 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d5924:	b508      	push	{r3, lr}
   d5926:	4b02      	ldr	r3, [pc, #8]	; (d5930 <spark_variable+0xc>)
   d5928:	681b      	ldr	r3, [r3, #0]
   d592a:	681b      	ldr	r3, [r3, #0]
   d592c:	9301      	str	r3, [sp, #4]
   d592e:	bd08      	pop	{r3, pc}
   d5930:	00030244 	.word	0x00030244

000d5934 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5934:	b508      	push	{r3, lr}
   d5936:	4b02      	ldr	r3, [pc, #8]	; (d5940 <spark_send_event+0xc>)
   d5938:	681b      	ldr	r3, [r3, #0]
   d593a:	6a1b      	ldr	r3, [r3, #32]
   d593c:	9301      	str	r3, [sp, #4]
   d593e:	bd08      	pop	{r3, pc}
   d5940:	00030244 	.word	0x00030244

000d5944 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5944:	b508      	push	{r3, lr}
   d5946:	4b02      	ldr	r3, [pc, #8]	; (d5950 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5948:	681b      	ldr	r3, [r3, #0]
   d594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d594c:	9301      	str	r3, [sp, #4]
   d594e:	bd08      	pop	{r3, pc}
   d5950:	00030244 	.word	0x00030244

000d5954 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <malloc+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	681b      	ldr	r3, [r3, #0]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	0003021c 	.word	0x0003021c

000d5964 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <free+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	685b      	ldr	r3, [r3, #4]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	0003021c 	.word	0x0003021c

000d5974 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <snprintf+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	69db      	ldr	r3, [r3, #28]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	0003021c 	.word	0x0003021c

000d5984 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <abort+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	0003021c 	.word	0x0003021c

000d5994 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <_malloc_r+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	0003021c 	.word	0x0003021c

000d59a4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <__errno+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	0003021c 	.word	0x0003021c

000d59b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d59b4:	2200      	movs	r2, #0
   d59b6:	4611      	mov	r1, r2
   d59b8:	6840      	ldr	r0, [r0, #4]
   d59ba:	f7ff bf9b 	b.w	d58f4 <network_listening>

000d59be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d59be:	2200      	movs	r2, #0
   d59c0:	4611      	mov	r1, r2
   d59c2:	6840      	ldr	r0, [r0, #4]
   d59c4:	f7ff bfa6 	b.w	d5914 <network_get_listen_timeout>

000d59c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d59c8:	2200      	movs	r2, #0
   d59ca:	6840      	ldr	r0, [r0, #4]
   d59cc:	f7ff bf9a 	b.w	d5904 <network_set_listen_timeout>

000d59d0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d59d0:	2200      	movs	r2, #0
   d59d2:	f081 0101 	eor.w	r1, r1, #1
   d59d6:	6840      	ldr	r0, [r0, #4]
   d59d8:	f7ff bf84 	b.w	d58e4 <network_listen>

000d59dc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d59dc:	2300      	movs	r3, #0
   d59de:	461a      	mov	r2, r3
   d59e0:	4619      	mov	r1, r3
   d59e2:	6840      	ldr	r0, [r0, #4]
   d59e4:	f7ff bf76 	b.w	d58d4 <network_off>

000d59e8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d59e8:	2300      	movs	r3, #0
   d59ea:	461a      	mov	r2, r3
   d59ec:	4619      	mov	r1, r3
   d59ee:	6840      	ldr	r0, [r0, #4]
   d59f0:	f7ff bf68 	b.w	d58c4 <network_on>

000d59f4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d59f4:	2200      	movs	r2, #0
   d59f6:	4611      	mov	r1, r2
   d59f8:	6840      	ldr	r0, [r0, #4]
   d59fa:	f7ff bf5b 	b.w	d58b4 <network_ready>

000d59fe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d59fe:	2200      	movs	r2, #0
   d5a00:	4611      	mov	r1, r2
   d5a02:	6840      	ldr	r0, [r0, #4]
   d5a04:	f7ff bf46 	b.w	d5894 <network_connecting>

000d5a08 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a08:	2200      	movs	r2, #0
   d5a0a:	2102      	movs	r1, #2
   d5a0c:	6840      	ldr	r0, [r0, #4]
   d5a0e:	f7ff bf49 	b.w	d58a4 <network_disconnect>

000d5a12 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a12:	2300      	movs	r3, #0
   d5a14:	461a      	mov	r2, r3
   d5a16:	6840      	ldr	r0, [r0, #4]
   d5a18:	f7ff bf34 	b.w	d5884 <network_connect>

000d5a1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5a1c:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5a1e:	2203      	movs	r2, #3
   d5a20:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5a22:	4a02      	ldr	r2, [pc, #8]	; (d5a2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5a24:	601a      	str	r2, [r3, #0]
   d5a26:	4770      	bx	lr
   d5a28:	2003e380 	.word	0x2003e380
   d5a2c:	000da63c 	.word	0x000da63c

000d5a30 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5a30:	4770      	bx	lr

000d5a32 <_ZN8SPIClassD0Ev>:
   d5a32:	b510      	push	{r4, lr}
   d5a34:	4604      	mov	r4, r0
   d5a36:	f7fe fb32 	bl	d409e <_ZdlPv>
   d5a3a:	4620      	mov	r0, r4
   d5a3c:	bd10      	pop	{r4, pc}
	...

000d5a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5a40:	b570      	push	{r4, r5, r6, lr}
   d5a42:	4b08      	ldr	r3, [pc, #32]	; (d5a64 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5a44:	6003      	str	r3, [r0, #0]
   d5a46:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5a48:	2500      	movs	r5, #0
   d5a4a:	460e      	mov	r6, r1
   d5a4c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5a50:	f7ff fdac 	bl	d55ac <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5a54:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5a56:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5a58:	f7ff fd40 	bl	d54dc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5a5c:	60a5      	str	r5, [r4, #8]
}
   d5a5e:	4620      	mov	r0, r4
   d5a60:	bd70      	pop	{r4, r5, r6, pc}
   d5a62:	bf00      	nop
   d5a64:	000da670 	.word	0x000da670

000d5a68 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5a68:	7900      	ldrb	r0, [r0, #4]
   d5a6a:	f7ff bd3f 	b.w	d54ec <HAL_SPI_Is_Enabled>
	...

000d5a70 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5a70:	4b04      	ldr	r3, [pc, #16]	; (d5a84 <_GLOBAL__sub_I_System+0x14>)
   d5a72:	2000      	movs	r0, #0
   d5a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5a78:	7018      	strb	r0, [r3, #0]
   d5a7a:	8058      	strh	r0, [r3, #2]
   d5a7c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5a7e:	f7ff becd 	b.w	d581c <set_system_mode>
   d5a82:	bf00      	nop
   d5a84:	2003e388 	.word	0x2003e388

000d5a88 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5a88:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5a8a:	6804      	ldr	r4, [r0, #0]
   d5a8c:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5a8e:	46a4      	mov	ip, r4
    }
   d5a90:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5a94:	4760      	bx	ip

000d5a96 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5a96:	6803      	ldr	r3, [r0, #0]
   d5a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5a9a:	4718      	bx	r3

000d5a9c <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5a9c:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5a9e:	4770      	bx	lr

000d5aa0 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5aa0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5aa2:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5aa4:	1a10      	subs	r0, r2, r0
   d5aa6:	4770      	bx	lr

000d5aa8 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5aa8:	b513      	push	{r0, r1, r4, lr}
   d5aaa:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5aac:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5aae:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5ab2:	68d4      	ldr	r4, [r2, #12]
   d5ab4:	4619      	mov	r1, r3
   d5ab6:	2201      	movs	r2, #1
   d5ab8:	47a0      	blx	r4
}
   d5aba:	b002      	add	sp, #8
   d5abc:	bd10      	pop	{r4, pc}

000d5abe <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d5abe:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5ac0:	6803      	ldr	r3, [r0, #0]
   d5ac2:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5ac4:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5ac6:	4798      	blx	r3
   d5ac8:	b128      	cbz	r0, d5ad6 <_ZN3UDP4readEv+0x18>
   d5aca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5acc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5ace:	1c59      	adds	r1, r3, #1
   d5ad0:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5ad2:	5cd0      	ldrb	r0, [r2, r3]
   d5ad4:	bd10      	pop	{r4, pc}
   d5ad6:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5ada:	bd10      	pop	{r4, pc}

000d5adc <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5adc:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5ade:	6803      	ldr	r3, [r0, #0]
   d5ae0:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5ae2:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5ae4:	4798      	blx	r3
   d5ae6:	b118      	cbz	r0, d5af0 <_ZN3UDP4peekEv+0x14>
   d5ae8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5aea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5aec:	5cd0      	ldrb	r0, [r2, r3]
   d5aee:	bd10      	pop	{r4, pc}
   d5af0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5af4:	bd10      	pop	{r4, pc}

000d5af6 <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5af6:	4770      	bx	lr

000d5af8 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5af8:	b410      	push	{r4}
   d5afa:	4603      	mov	r3, r0
   d5afc:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5afe:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5b00:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5b02:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5b04:	6803      	ldr	r3, [r0, #0]
   d5b06:	1a52      	subs	r2, r2, r1
   d5b08:	68db      	ldr	r3, [r3, #12]
   d5b0a:	4421      	add	r1, r4
}
   d5b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5b10:	4718      	bx	r3

000d5b12 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5b12:	f1a0 0010 	sub.w	r0, r0, #16
   d5b16:	f7ff bfef 	b.w	d5af8 <_ZNK3UDP7printToER5Print>

000d5b1a <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5b1c:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5b1e:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5b20:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5b24:	4604      	mov	r4, r0
   d5b26:	460f      	mov	r7, r1
   d5b28:	4615      	mov	r5, r2
    stop();
   d5b2a:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5b2c:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5b2e:	4632      	mov	r2, r6
   d5b30:	2100      	movs	r1, #0
   d5b32:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5b34:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5b36:	f002 fdd4 	bl	d86e2 <memset>
    saddr.sin6_len = sizeof(saddr);
   d5b3a:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5b3e:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5b40:	260a      	movs	r6, #10
   d5b42:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5b46:	f7ff fd71 	bl	d562c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5b4a:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5b4c:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5b50:	2102      	movs	r1, #2
   d5b52:	4630      	mov	r0, r6
   d5b54:	f7ff fe1a 	bl	d578c <sock_socket>

    if (_sock < 0) {
   d5b58:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5b5a:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d5b5c:	db24      	blt.n	d5ba8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d5b5e:	2204      	movs	r2, #4
   d5b60:	9200      	str	r2, [sp, #0]
   d5b62:	ab02      	add	r3, sp, #8
   d5b64:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5b68:	f7ff fdf0 	bl	d574c <sock_setsockopt>
   d5b6c:	b9e0      	cbnz	r0, d5ba8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5b6e:	b195      	cbz	r5, d5b96 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d5b70:	9003      	str	r0, [sp, #12]
   d5b72:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d5b76:	a903      	add	r1, sp, #12
   d5b78:	b2e8      	uxtb	r0, r5
   d5b7a:	f7ff fcc7 	bl	d550c <if_index_to_name>
   d5b7e:	b998      	cbnz	r0, d5ba8 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d5b80:	2306      	movs	r3, #6
   d5b82:	9300      	str	r3, [sp, #0]
   d5b84:	f241 020b 	movw	r2, #4107	; 0x100b
   d5b88:	ab03      	add	r3, sp, #12
   d5b8a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5b8e:	6960      	ldr	r0, [r4, #20]
   d5b90:	f7ff fddc 	bl	d574c <sock_setsockopt>
   d5b94:	b940      	cbnz	r0, d5ba8 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d5b96:	221c      	movs	r2, #28
   d5b98:	a905      	add	r1, sp, #20
   d5b9a:	6960      	ldr	r0, [r4, #20]
   d5b9c:	f7ff fdce 	bl	d573c <sock_bind>
   d5ba0:	b910      	cbnz	r0, d5ba8 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d5ba2:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d5ba4:	2001      	movs	r0, #1
   d5ba6:	e004      	b.n	d5bb2 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d5ba8:	6823      	ldr	r3, [r4, #0]
   d5baa:	4620      	mov	r0, r4
   d5bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5bae:	4798      	blx	r3
   d5bb0:	2000      	movs	r0, #0
    }
    return bound;
}
   d5bb2:	b00d      	add	sp, #52	; 0x34
   d5bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5bb6 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d5bb6:	b510      	push	{r4, lr}
   d5bb8:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d5bba:	6940      	ldr	r0, [r0, #20]
   d5bbc:	2800      	cmp	r0, #0
   d5bbe:	db01      	blt.n	d5bc4 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d5bc0:	f7ff fdcc 	bl	d575c <sock_close>
    }

    _sock = -1;
   d5bc4:	f04f 33ff 	mov.w	r3, #4294967295
   d5bc8:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d5bca:	2300      	movs	r3, #0
   d5bcc:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d5bce:	8723      	strh	r3, [r4, #56]	; 0x38
   d5bd0:	bd10      	pop	{r4, pc}

000d5bd2 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5bd2:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5bd4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d5bd6:	4605      	mov	r5, r0
   d5bd8:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d5bda:	b113      	cbz	r3, d5be2 <_ZN3UDP5writeEPKhj+0x10>
   d5bdc:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d5bde:	1a24      	subs	r4, r4, r0
   d5be0:	e000      	b.n	d5be4 <_ZN3UDP5writeEPKhj+0x12>
   d5be2:	461c      	mov	r4, r3
   d5be4:	4294      	cmp	r4, r2
   d5be6:	bf28      	it	cs
   d5be8:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d5bea:	4622      	mov	r2, r4
   d5bec:	4418      	add	r0, r3
   d5bee:	f002 fd6d 	bl	d86cc <memcpy>
    _offset += size;
   d5bf2:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d5bf4:	4423      	add	r3, r4
   d5bf6:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d5bf8:	4620      	mov	r0, r4
   d5bfa:	bd38      	pop	{r3, r4, r5, pc}

000d5bfc <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5bfc:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d5bfe:	6803      	ldr	r3, [r0, #0]
   d5c00:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d5c02:	4604      	mov	r4, r0
   d5c04:	460e      	mov	r6, r1
   d5c06:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d5c08:	4798      	blx	r3
   d5c0a:	b188      	cbz	r0, d5c30 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d5c0c:	6823      	ldr	r3, [r4, #0]
   d5c0e:	4620      	mov	r0, r4
   d5c10:	691b      	ldr	r3, [r3, #16]
   d5c12:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d5c14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5c16:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5c18:	4285      	cmp	r5, r0
   d5c1a:	bfa8      	it	ge
   d5c1c:	4605      	movge	r5, r0
   d5c1e:	4419      	add	r1, r3
   d5c20:	462a      	mov	r2, r5
   d5c22:	4630      	mov	r0, r6
   d5c24:	f002 fd52 	bl	d86cc <memcpy>
        _offset += read;
   d5c28:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5c2a:	442b      	add	r3, r5
   d5c2c:	86e3      	strh	r3, [r4, #54]	; 0x36
   d5c2e:	e001      	b.n	d5c34 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d5c30:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d5c34:	4628      	mov	r0, r5
   d5c36:	bd70      	pop	{r4, r5, r6, pc}

000d5c38 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d5c38:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5c3a:	4604      	mov	r4, r0
   d5c3c:	4b05      	ldr	r3, [pc, #20]	; (d5c54 <_ZN3UDP8remoteIPEv+0x1c>)
   d5c3e:	f844 3b04 	str.w	r3, [r4], #4
   d5c42:	f101 0520 	add.w	r5, r1, #32
   d5c46:	4606      	mov	r6, r0
   d5c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c4c:	682b      	ldr	r3, [r5, #0]
   d5c4e:	7023      	strb	r3, [r4, #0]
   d5c50:	4630      	mov	r0, r6
   d5c52:	bd70      	pop	{r4, r5, r6, pc}
   d5c54:	000da814 	.word	0x000da814

000d5c58 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5c58:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c5a:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5c5c:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5c5e:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5c60:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d5c62:	4a0a      	ldr	r2, [pc, #40]	; (d5c8c <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d5c64:	9202      	str	r2, [sp, #8]
   d5c66:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d5c68:	468e      	mov	lr, r1
   d5c6a:	4606      	mov	r6, r0
   d5c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c6e:	ac03      	add	r4, sp, #12
   d5c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c72:	682b      	ldr	r3, [r5, #0]
   d5c74:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d5c76:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d5c7a:	9300      	str	r3, [sp, #0]
   d5c7c:	4662      	mov	r2, ip
   d5c7e:	ab02      	add	r3, sp, #8
   d5c80:	4671      	mov	r1, lr
   d5c82:	4630      	mov	r0, r6
   d5c84:	47b8      	blx	r7
    }
   d5c86:	b009      	add	sp, #36	; 0x24
   d5c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c8a:	bf00      	nop
   d5c8c:	000da814 	.word	0x000da814

000d5c90 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5c90:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5c92:	6803      	ldr	r3, [r0, #0]
   d5c94:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d5c98:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d5c9a:	4b0d      	ldr	r3, [pc, #52]	; (d5cd0 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d5c9c:	b089      	sub	sp, #36	; 0x24
   d5c9e:	f100 0620 	add.w	r6, r0, #32
   d5ca2:	4604      	mov	r4, r0
   d5ca4:	9302      	str	r3, [sp, #8]
   d5ca6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5ca8:	ad03      	add	r5, sp, #12
   d5caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5cac:	6833      	ldr	r3, [r6, #0]
   d5cae:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5cb0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d5cb2:	9300      	str	r3, [sp, #0]
   d5cb4:	4672      	mov	r2, lr
   d5cb6:	ab02      	add	r3, sp, #8
   d5cb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d5cba:	4620      	mov	r0, r4
   d5cbc:	47b8      	blx	r7
    flush(); // wait for send to complete
   d5cbe:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d5cc0:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d5cc2:	69db      	ldr	r3, [r3, #28]
   d5cc4:	4620      	mov	r0, r4
   d5cc6:	4798      	blx	r3
    return result;
}
   d5cc8:	4628      	mov	r0, r5
   d5cca:	b009      	add	sp, #36	; 0x24
   d5ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cce:	bf00      	nop
   d5cd0:	000da814 	.word	0x000da814

000d5cd4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d5cd6:	7843      	ldrb	r3, [r0, #1]
   d5cd8:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d5cda:	b08d      	sub	sp, #52	; 0x34
   d5cdc:	4605      	mov	r5, r0
   d5cde:	460c      	mov	r4, r1
   d5ce0:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d5ce2:	d101      	bne.n	d5ce8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5ce4:	1d01      	adds	r1, r0, #4
   d5ce6:	e033      	b.n	d5d50 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5ce8:	2b0a      	cmp	r3, #10
   d5cea:	d135      	bne.n	d5d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5cec:	2211      	movs	r2, #17
   d5cee:	2100      	movs	r1, #0
   d5cf0:	a801      	add	r0, sp, #4
   d5cf2:	f002 fcf6 	bl	d86e2 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5cf6:	68ab      	ldr	r3, [r5, #8]
   d5cf8:	b943      	cbnz	r3, d5d0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5cfa:	68eb      	ldr	r3, [r5, #12]
   d5cfc:	b933      	cbnz	r3, d5d0c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d5cfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5d02:	692e      	ldr	r6, [r5, #16]
   d5d04:	f7ff fc82 	bl	d560c <inet_htonl>
   d5d08:	4286      	cmp	r6, r0
   d5d0a:	d01f      	beq.n	d5d4c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5d0c:	f105 0308 	add.w	r3, r5, #8
   d5d10:	ae01      	add	r6, sp, #4
   d5d12:	f105 0e18 	add.w	lr, r5, #24
   d5d16:	6818      	ldr	r0, [r3, #0]
   d5d18:	6859      	ldr	r1, [r3, #4]
   d5d1a:	4632      	mov	r2, r6
   d5d1c:	c203      	stmia	r2!, {r0, r1}
   d5d1e:	3308      	adds	r3, #8
   d5d20:	4573      	cmp	r3, lr
   d5d22:	4616      	mov	r6, r2
   d5d24:	d1f7      	bne.n	d5d16 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d5d26:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5d28:	a901      	add	r1, sp, #4
   d5d2a:	a806      	add	r0, sp, #24
   d5d2c:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5d2e:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5d32:	f000 fddd 	bl	d68f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5d36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d5d38:	3404      	adds	r4, #4
   d5d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d3c:	6833      	ldr	r3, [r6, #0]
   d5d3e:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d5d40:	b157      	cbz	r7, d5d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d5d42:	8868      	ldrh	r0, [r5, #2]
   d5d44:	f7ff fc6a 	bl	d561c <inet_ntohs>
   d5d48:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d5d4a:	e005      	b.n	d5d58 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5d4c:	f105 0114 	add.w	r1, r5, #20
   d5d50:	4620      	mov	r0, r4
   d5d52:	f000 fe02 	bl	d695a <_ZN9IPAddressaSEPKh>
   d5d56:	e7f3      	b.n	d5d40 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d5d58:	b00d      	add	sp, #52	; 0x34
   d5d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d5c <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d60:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d5d62:	ab0e      	add	r3, sp, #56	; 0x38
   d5d64:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d5d66:	4606      	mov	r6, r0
   d5d68:	4617      	mov	r7, r2
   d5d6a:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d5d6c:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d5d70:	462a      	mov	r2, r5
   d5d72:	4629      	mov	r1, r5
   d5d74:	f7ff fb8a 	bl	d548c <netdb_getaddrinfo>
   d5d78:	2800      	cmp	r0, #0
   d5d7a:	db1f      	blt.n	d5dbc <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5d7c:	9b01      	ldr	r3, [sp, #4]
   d5d7e:	b1fb      	cbz	r3, d5dc0 <_ZN3UDP11beginPacketEPKct+0x64>
   d5d80:	695b      	ldr	r3, [r3, #20]
   d5d82:	b1eb      	cbz	r3, d5dc0 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d5d84:	a802      	add	r0, sp, #8
   d5d86:	f000 fda5 	bl	d68d4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5d8a:	9b01      	ldr	r3, [sp, #4]
   d5d8c:	462a      	mov	r2, r5
   d5d8e:	6958      	ldr	r0, [r3, #20]
   d5d90:	a902      	add	r1, sp, #8
   d5d92:	f7ff ff9f 	bl	d5cd4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5d96:	a802      	add	r0, sp, #8
   d5d98:	f000 fdbc 	bl	d6914 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5d9c:	b180      	cbz	r0, d5dc0 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d5d9e:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5da0:	ad03      	add	r5, sp, #12
   d5da2:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d5da6:	4b0b      	ldr	r3, [pc, #44]	; (d5dd4 <_ZN3UDP11beginPacketEPKct+0x78>)
   d5da8:	9308      	str	r3, [sp, #32]
   d5daa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5dac:	ac09      	add	r4, sp, #36	; 0x24
   d5dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5db0:	682b      	ldr	r3, [r5, #0]
   d5db2:	7023      	strb	r3, [r4, #0]
   d5db4:	463a      	mov	r2, r7
   d5db6:	a908      	add	r1, sp, #32
   d5db8:	4630      	mov	r0, r6
   d5dba:	47c0      	blx	r8
   d5dbc:	4604      	mov	r4, r0
   d5dbe:	e001      	b.n	d5dc4 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d5dc0:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5dc4:	9801      	ldr	r0, [sp, #4]
   d5dc6:	f7ff fb59 	bl	d547c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d5dca:	4620      	mov	r0, r4
   d5dcc:	b00e      	add	sp, #56	; 0x38
   d5dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5dd2:	bf00      	nop
   d5dd4:	000da814 	.word	0x000da814

000d5dd8 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5ddc:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d5de0:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d5de4:	b08c      	sub	sp, #48	; 0x30
   d5de6:	4605      	mov	r5, r0
   d5de8:	460c      	mov	r4, r1
   d5dea:	4617      	mov	r7, r2
   d5dec:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d5dee:	db00      	blt.n	d5df2 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d5df0:	b911      	cbnz	r1, d5df8 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d5df2:	f04f 30ff 	mov.w	r0, #4294967295
   d5df6:	e035      	b.n	d5e64 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d5df8:	f04f 0a1c 	mov.w	sl, #28
   d5dfc:	ae05      	add	r6, sp, #20
   d5dfe:	4652      	mov	r2, sl
   d5e00:	2100      	movs	r1, #0
   d5e02:	4630      	mov	r0, r6
   d5e04:	f002 fc6d 	bl	d86e2 <memset>
        socklen_t slen = sizeof(saddr);
   d5e08:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d5e0c:	f1b9 0f00 	cmp.w	r9, #0
   d5e10:	d014      	beq.n	d5e3c <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d5e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e16:	fbb9 f1f2 	udiv	r1, r9, r2
   d5e1a:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d5e1c:	fb02 9111 	mls	r1, r2, r1, r9
   d5e20:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5e22:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d5e24:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d5e26:	9300      	str	r3, [sp, #0]
   d5e28:	f241 0206 	movw	r2, #4102	; 0x1006
   d5e2c:	ab03      	add	r3, sp, #12
   d5e2e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5e32:	4640      	mov	r0, r8
   d5e34:	f7ff fc8a 	bl	d574c <sock_setsockopt>
            if (ret) {
   d5e38:	b108      	cbz	r0, d5e3e <_ZN3UDP13receivePacketEPhjm+0x66>
   d5e3a:	e013      	b.n	d5e64 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d5e3c:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5e3e:	ab02      	add	r3, sp, #8
   d5e40:	9301      	str	r3, [sp, #4]
   d5e42:	4621      	mov	r1, r4
   d5e44:	4603      	mov	r3, r0
   d5e46:	9600      	str	r6, [sp, #0]
   d5e48:	463a      	mov	r2, r7
   d5e4a:	6968      	ldr	r0, [r5, #20]
   d5e4c:	f7ff fc8e 	bl	d576c <sock_recvfrom>
        if (ret >= 0) {
   d5e50:	1e04      	subs	r4, r0, #0
   d5e52:	db06      	blt.n	d5e62 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d5e54:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d5e58:	f105 011c 	add.w	r1, r5, #28
   d5e5c:	4630      	mov	r0, r6
   d5e5e:	f7ff ff39 	bl	d5cd4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d5e62:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d5e64:	b00c      	add	sp, #48	; 0x30
   d5e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5e6a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5e6a:	b538      	push	{r3, r4, r5, lr}
   d5e6c:	4605      	mov	r5, r0
   d5e6e:	4614      	mov	r4, r2
   d5e70:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d5e72:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d5e74:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d5e76:	d111      	bne.n	d5e9c <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d5e78:	231c      	movs	r3, #28
   d5e7a:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d5e7c:	230a      	movs	r3, #10
   d5e7e:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d5e80:	f7ff fbd4 	bl	d562c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5e84:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d5e86:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d5e8a:	1d2b      	adds	r3, r5, #4
   d5e8c:	3514      	adds	r5, #20
   d5e8e:	f853 2b04 	ldr.w	r2, [r3], #4
   d5e92:	f844 2b04 	str.w	r2, [r4], #4
   d5e96:	42ab      	cmp	r3, r5
   d5e98:	d1f9      	bne.n	d5e8e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d5e9a:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d5e9c:	2b04      	cmp	r3, #4
   d5e9e:	d10a      	bne.n	d5eb6 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d5ea0:	2310      	movs	r3, #16
   d5ea2:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d5ea4:	2302      	movs	r3, #2
   d5ea6:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d5ea8:	f7ff fbc0 	bl	d562c <inet_htons>
   d5eac:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d5eae:	6868      	ldr	r0, [r5, #4]
   d5eb0:	f7ff fbac 	bl	d560c <inet_htonl>
   d5eb4:	6060      	str	r0, [r4, #4]
   d5eb6:	bd38      	pop	{r3, r4, r5, pc}

000d5eb8 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5ebc:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d5ebe:	ac03      	add	r4, sp, #12
   d5ec0:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d5ec2:	4699      	mov	r9, r3
   d5ec4:	4606      	mov	r6, r0
   d5ec6:	460f      	mov	r7, r1
   d5ec8:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d5eca:	2100      	movs	r1, #0
   d5ecc:	462a      	mov	r2, r5
   d5ece:	4620      	mov	r0, r4
   d5ed0:	f002 fc07 	bl	d86e2 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d5ed4:	4622      	mov	r2, r4
   d5ed6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d5eda:	4648      	mov	r0, r9
   d5edc:	f7ff ffc5 	bl	d5e6a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d5ee0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5ee4:	b143      	cbz	r3, d5ef8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d5ee6:	e88d 0030 	stmia.w	sp, {r4, r5}
   d5eea:	2300      	movs	r3, #0
   d5eec:	4642      	mov	r2, r8
   d5eee:	4639      	mov	r1, r7
   d5ef0:	6970      	ldr	r0, [r6, #20]
   d5ef2:	f7ff fc43 	bl	d577c <sock_sendto>
   d5ef6:	e001      	b.n	d5efc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d5ef8:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d5efc:	b00b      	add	sp, #44	; 0x2c
   d5efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5f02 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5f02:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f04:	b091      	sub	sp, #68	; 0x44
   d5f06:	460c      	mov	r4, r1
   d5f08:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d5f0a:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5f0c:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d5f0e:	a809      	add	r0, sp, #36	; 0x24
   d5f10:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d5f12:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d5f14:	f002 fbe5 	bl	d86e2 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d5f18:	aa09      	add	r2, sp, #36	; 0x24
   d5f1a:	2100      	movs	r1, #0
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	f7ff ffa4 	bl	d5e6a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d5f22:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5f26:	2b02      	cmp	r3, #2
   d5f28:	d12e      	bne.n	d5f88 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d5f2a:	2300      	movs	r3, #0
   d5f2c:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d5f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f30:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d5f32:	b1dd      	cbz	r5, d5f6c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d5f34:	a902      	add	r1, sp, #8
   d5f36:	4628      	mov	r0, r5
   d5f38:	f7ff faf0 	bl	d551c <if_get_by_index>
   d5f3c:	b9b0      	cbnz	r0, d5f6c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d5f3e:	a910      	add	r1, sp, #64	; 0x40
   d5f40:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d5f44:	9802      	ldr	r0, [sp, #8]
   d5f46:	f7ff faf1 	bl	d552c <if_get_addrs>
   d5f4a:	b960      	cbnz	r0, d5f66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5f4c:	9b03      	ldr	r3, [sp, #12]
   d5f4e:	b153      	cbz	r3, d5f66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d5f50:	68da      	ldr	r2, [r3, #12]
   d5f52:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d5f54:	7851      	ldrb	r1, [r2, #1]
   d5f56:	2902      	cmp	r1, #2
   d5f58:	d103      	bne.n	d5f62 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d5f5a:	6852      	ldr	r2, [r2, #4]
   d5f5c:	b10a      	cbz	r2, d5f62 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d5f5e:	9205      	str	r2, [sp, #20]
   d5f60:	e001      	b.n	d5f66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d5f62:	681b      	ldr	r3, [r3, #0]
   d5f64:	e7f3      	b.n	d5f4e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d5f66:	9803      	ldr	r0, [sp, #12]
   d5f68:	f7ff fae8 	bl	d553c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d5f6c:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d5f6e:	f04f 0308 	mov.w	r3, #8
   d5f72:	9300      	str	r3, [sp, #0]
   d5f74:	bf18      	it	ne
   d5f76:	2203      	movne	r2, #3
   d5f78:	ab04      	add	r3, sp, #16
   d5f7a:	bf08      	it	eq
   d5f7c:	2204      	moveq	r2, #4
   d5f7e:	2100      	movs	r1, #0
   d5f80:	4630      	mov	r0, r6
   d5f82:	f7ff fbe3 	bl	d574c <sock_setsockopt>
   d5f86:	e01e      	b.n	d5fc6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d5f88:	2b0a      	cmp	r3, #10
   d5f8a:	d11a      	bne.n	d5fc2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d5f8c:	ac04      	add	r4, sp, #16
   d5f8e:	2214      	movs	r2, #20
   d5f90:	2100      	movs	r1, #0
   d5f92:	4620      	mov	r0, r4
   d5f94:	f002 fba5 	bl	d86e2 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5f98:	ab0b      	add	r3, sp, #44	; 0x2c
   d5f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5f9c:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d5f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5fa2:	f04f 0314 	mov.w	r3, #20
   d5fa6:	9300      	str	r3, [sp, #0]
   d5fa8:	bf18      	it	ne
   d5faa:	220c      	movne	r2, #12
   d5fac:	4623      	mov	r3, r4
   d5fae:	bf08      	it	eq
   d5fb0:	220d      	moveq	r2, #13
   d5fb2:	2129      	movs	r1, #41	; 0x29
   d5fb4:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d5fb6:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d5fb8:	f7ff fbc8 	bl	d574c <sock_setsockopt>
   d5fbc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d5fc0:	e001      	b.n	d5fc6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d5fc2:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5fc6:	b011      	add	sp, #68	; 0x44
   d5fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5fcc <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d5fcc:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5fce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5fd2:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5fd4:	4b0b      	ldr	r3, [pc, #44]	; (d6004 <_ZN3UDPC1Ev+0x38>)
   d5fd6:	f103 0208 	add.w	r2, r3, #8
   d5fda:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5fdc:	2500      	movs	r5, #0
   d5fde:	6103      	str	r3, [r0, #16]
   d5fe0:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   d5fe4:	4604      	mov	r4, r0
   d5fe6:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d5fe8:	6002      	str	r2, [r0, #0]
   d5fea:	6143      	str	r3, [r0, #20]
   d5fec:	301c      	adds	r0, #28
   d5fee:	f000 fc71 	bl	d68d4 <_ZN9IPAddressC1Ev>
   d5ff2:	f44f 7300 	mov.w	r3, #512	; 0x200
   d5ff6:	86e5      	strh	r5, [r4, #54]	; 0x36
   d5ff8:	8725      	strh	r5, [r4, #56]	; 0x38
   d5ffa:	63e5      	str	r5, [r4, #60]	; 0x3c
   d5ffc:	6423      	str	r3, [r4, #64]	; 0x40
   d5ffe:	6465      	str	r5, [r4, #68]	; 0x44
}
   d6000:	4620      	mov	r0, r4
   d6002:	bd38      	pop	{r3, r4, r5, pc}
   d6004:	000da678 	.word	0x000da678

000d6008 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d6008:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d600a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d600e:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d6010:	b11b      	cbz	r3, d601a <_ZN3UDP13releaseBufferEv+0x12>
   d6012:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d6014:	b108      	cbz	r0, d601a <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d6016:	f7fe f842 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d601a:	2300      	movs	r3, #0
   d601c:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d601e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d6022:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6024:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6026:	8723      	strh	r3, [r4, #56]	; 0x38
   d6028:	bd10      	pop	{r4, pc}

000d602a <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d602a:	b570      	push	{r4, r5, r6, lr}
   d602c:	4604      	mov	r4, r0
   d602e:	4616      	mov	r6, r2
   d6030:	460d      	mov	r5, r1
    releaseBuffer();
   d6032:	f7ff ffe9 	bl	d6008 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d6036:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d6038:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d603a:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d603c:	b93e      	cbnz	r6, d604e <_ZN3UDP9setBufferEjPh+0x24>
   d603e:	b135      	cbz	r5, d604e <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d6040:	4628      	mov	r0, r5
   d6042:	f7fe f82a 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d6046:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d6048:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d604a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d604e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6050:	b103      	cbz	r3, d6054 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d6052:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d6054:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d6056:	3000      	adds	r0, #0
   d6058:	bf18      	it	ne
   d605a:	2001      	movne	r0, #1
   d605c:	bd70      	pop	{r4, r5, r6, pc}

000d605e <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6060:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6062:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6064:	4605      	mov	r5, r0
   d6066:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6068:	b91a      	cbnz	r2, d6072 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d606a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d606c:	b109      	cbz	r1, d6072 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d606e:	f7ff ffdc 	bl	d602a <_ZN3UDP9setBufferEjPh>
   d6072:	3404      	adds	r4, #4
   d6074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d6076:	f105 0620 	add.w	r6, r5, #32
   d607a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d607c:	6823      	ldr	r3, [r4, #0]
   d607e:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6080:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6082:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6084:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d6086:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d6088:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d608a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d608c <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d608c:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d608e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6090:	4604      	mov	r4, r0
    if (!_buffer && _buffer_size) {
   d6092:	b91a      	cbnz	r2, d609c <_ZN3UDP11parsePacketEm+0x10>
   d6094:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6096:	b109      	cbz	r1, d609c <_ZN3UDP11parsePacketEm+0x10>
        setBuffer(_buffer_size);
   d6098:	f7ff ffc7 	bl	d602a <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d609c:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d609e:	2300      	movs	r3, #0
   d60a0:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d60a2:	8723      	strh	r3, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d60a4:	b141      	cbz	r1, d60b8 <_ZN3UDP11parsePacketEm+0x2c>
   d60a6:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d60a8:	b132      	cbz	r2, d60b8 <_ZN3UDP11parsePacketEm+0x2c>
        int result = receivePacket(_buffer, _buffer_size);
   d60aa:	6820      	ldr	r0, [r4, #0]
   d60ac:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d60ae:	4620      	mov	r0, r4
   d60b0:	47a8      	blx	r5
        if (result > 0) {
   d60b2:	2800      	cmp	r0, #0
            _total = result;
   d60b4:	bfc8      	it	gt
   d60b6:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d60b8:	6823      	ldr	r3, [r4, #0]
   d60ba:	4620      	mov	r0, r4
   d60bc:	691b      	ldr	r3, [r3, #16]
}
   d60be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d60c2:	4718      	bx	r3

000d60c4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d60c4:	b510      	push	{r4, lr}
   d60c6:	4b07      	ldr	r3, [pc, #28]	; (d60e4 <_ZN3UDPD1Ev+0x20>)
   d60c8:	f103 0208 	add.w	r2, r3, #8
   d60cc:	336c      	adds	r3, #108	; 0x6c
   d60ce:	4604      	mov	r4, r0
   d60d0:	6002      	str	r2, [r0, #0]
   d60d2:	6103      	str	r3, [r0, #16]
   d60d4:	f7ff fd6f 	bl	d5bb6 <_ZN3UDP4stopEv>
   d60d8:	4620      	mov	r0, r4
   d60da:	f7ff ff95 	bl	d6008 <_ZN3UDP13releaseBufferEv>
   d60de:	4620      	mov	r0, r4
   d60e0:	bd10      	pop	{r4, pc}
   d60e2:	bf00      	nop
   d60e4:	000da678 	.word	0x000da678

000d60e8 <_ZN3UDPD0Ev>:
   d60e8:	b510      	push	{r4, lr}
   d60ea:	4604      	mov	r4, r0
   d60ec:	f7ff ffea 	bl	d60c4 <_ZN3UDPD1Ev>
   d60f0:	4620      	mov	r0, r4
   d60f2:	f7fd ffd4 	bl	d409e <_ZdlPv>
   d60f6:	4620      	mov	r0, r4
   d60f8:	bd10      	pop	{r4, pc}

000d60fa <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d60fa:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d60fc:	6940      	ldr	r0, [r0, #20]
   d60fe:	2800      	cmp	r0, #0
   d6100:	db04      	blt.n	d610c <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d6102:	2301      	movs	r3, #1
   d6104:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d6108:	f7ff befb 	b.w	d5f02 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d610c:	f04f 30ff 	mov.w	r0, #4294967295
   d6110:	4770      	bx	lr

000d6112 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6114:	4606      	mov	r6, r0
   d6116:	460d      	mov	r5, r1
   d6118:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d611a:	2400      	movs	r4, #0
  while (size--) {
   d611c:	42bd      	cmp	r5, r7
   d611e:	d00c      	beq.n	d613a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6120:	6833      	ldr	r3, [r6, #0]
   d6122:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6126:	689b      	ldr	r3, [r3, #8]
   d6128:	4630      	mov	r0, r6
   d612a:	4798      	blx	r3
     if (chunk>=0)
   d612c:	2800      	cmp	r0, #0
   d612e:	db01      	blt.n	d6134 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6130:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6132:	e7f3      	b.n	d611c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6134:	2c00      	cmp	r4, #0
   d6136:	bf08      	it	eq
   d6138:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d613a:	4620      	mov	r0, r4
   d613c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d613e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d613e:	b570      	push	{r4, r5, r6, lr}
   d6140:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6142:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6144:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6146:	b149      	cbz	r1, d615c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6148:	f002 fb25 	bl	d8796 <strlen>
   d614c:	682b      	ldr	r3, [r5, #0]
   d614e:	4602      	mov	r2, r0
   d6150:	4621      	mov	r1, r4
   d6152:	4628      	mov	r0, r5
   d6154:	68db      	ldr	r3, [r3, #12]
    }
   d6156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d615a:	4718      	bx	r3
    }
   d615c:	bd70      	pop	{r4, r5, r6, pc}

000d615e <_ZN5Print5printEPKc>:
   d615e:	b508      	push	{r3, lr}
   d6160:	f7ff ffed 	bl	d613e <_ZN5Print5writeEPKc>
   d6164:	bd08      	pop	{r3, pc}

000d6166 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6166:	6803      	ldr	r3, [r0, #0]
   d6168:	689b      	ldr	r3, [r3, #8]
   d616a:	4718      	bx	r3

000d616c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d616c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d616e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6170:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6172:	f7ff fff8 	bl	d6166 <_ZN5Print5printEc>
  n += print('\n');
   d6176:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6178:	4604      	mov	r4, r0
  n += print('\n');
   d617a:	4628      	mov	r0, r5
   d617c:	f7ff fff3 	bl	d6166 <_ZN5Print5printEc>
  return n;
}
   d6180:	4420      	add	r0, r4
   d6182:	bd38      	pop	{r3, r4, r5, pc}

000d6184 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6184:	b538      	push	{r3, r4, r5, lr}
   d6186:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6188:	f7ff ffd9 	bl	d613e <_ZN5Print5writeEPKc>
   d618c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d618e:	4628      	mov	r0, r5
   d6190:	f7ff ffec 	bl	d616c <_ZN5Print7printlnEv>
  return n;
}
   d6194:	4420      	add	r0, r4
   d6196:	bd38      	pop	{r3, r4, r5, pc}

000d6198 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6198:	b530      	push	{r4, r5, lr}
   d619a:	b08b      	sub	sp, #44	; 0x2c
   d619c:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d619e:	2100      	movs	r1, #0
   d61a0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61a4:	2a01      	cmp	r2, #1
   d61a6:	bf98      	it	ls
   d61a8:	220a      	movls	r2, #10
   d61aa:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d61ae:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d61b2:	fb05 3312 	mls	r3, r5, r2, r3
   d61b6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61ba:	2b09      	cmp	r3, #9
   d61bc:	bf94      	ite	ls
   d61be:	3330      	addls	r3, #48	; 0x30
   d61c0:	3337      	addhi	r3, #55	; 0x37
   d61c2:	b2db      	uxtb	r3, r3
   d61c4:	4621      	mov	r1, r4
   d61c6:	f804 3901 	strb.w	r3, [r4], #-1
   d61ca:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d61cc:	2d00      	cmp	r5, #0
   d61ce:	d1ee      	bne.n	d61ae <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d61d0:	f7ff ffb5 	bl	d613e <_ZN5Print5writeEPKc>
}
   d61d4:	b00b      	add	sp, #44	; 0x2c
   d61d6:	bd30      	pop	{r4, r5, pc}

000d61d8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d61d8:	b410      	push	{r4}
  if (base == 0) return write(n);
   d61da:	b92a      	cbnz	r2, d61e8 <_ZN5Print5printEmi+0x10>
   d61dc:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d61de:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d61e2:	689b      	ldr	r3, [r3, #8]
   d61e4:	b2c9      	uxtb	r1, r1
   d61e6:	4718      	bx	r3
  else return printNumber(n, base);
   d61e8:	b2d2      	uxtb	r2, r2
}
   d61ea:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d61ee:	f7ff bfd3 	b.w	d6198 <_ZN5Print11printNumberEmh>

000d61f2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d61f2:	f7ff bff1 	b.w	d61d8 <_ZN5Print5printEmi>

000d61f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d61f6:	680b      	ldr	r3, [r1, #0]
   d61f8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d61fa:	b113      	cbz	r3, d6202 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d61fc:	685a      	ldr	r2, [r3, #4]
   d61fe:	3201      	adds	r2, #1
   d6200:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6202:	4770      	bx	lr

000d6204 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6204:	4b01      	ldr	r3, [pc, #4]	; (d620c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6206:	4a02      	ldr	r2, [pc, #8]	; (d6210 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6208:	601a      	str	r2, [r3, #0]
   d620a:	4770      	bx	lr
   d620c:	2003e390 	.word	0x2003e390
   d6210:	000da79b 	.word	0x000da79b

000d6214 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6214:	4b02      	ldr	r3, [pc, #8]	; (d6220 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	4b02      	ldr	r3, [pc, #8]	; (d6224 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d621a:	601a      	str	r2, [r3, #0]
   d621c:	4770      	bx	lr
   d621e:	bf00      	nop
   d6220:	2003dfec 	.word	0x2003dfec
   d6224:	2003e394 	.word	0x2003e394

000d6228 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6228:	2100      	movs	r1, #0
   d622a:	f7ff baff 	b.w	d582c <system_delay_ms>

000d622e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d622e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6230:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6232:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6234:	b113      	cbz	r3, d623c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6236:	2203      	movs	r2, #3
   d6238:	4601      	mov	r1, r0
   d623a:	4798      	blx	r3
    }
   d623c:	4620      	mov	r0, r4
   d623e:	bd10      	pop	{r4, pc}

000d6240 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6240:	b510      	push	{r4, lr}
   d6242:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6244:	f7ff fff3 	bl	d622e <_ZNSt14_Function_baseD1Ev>
   d6248:	4620      	mov	r0, r4
   d624a:	bd10      	pop	{r4, pc}

000d624c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d624c:	b513      	push	{r0, r1, r4, lr}
   d624e:	460b      	mov	r3, r1
   d6250:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6252:	c803      	ldmia	r0, {r0, r1}
   d6254:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6258:	e893 0003 	ldmia.w	r3, {r0, r1}
   d625c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6260:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6264:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6268:	b002      	add	sp, #8
   d626a:	bd10      	pop	{r4, pc}

000d626c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d626c:	4803      	ldr	r0, [pc, #12]	; (d627c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d626e:	4a04      	ldr	r2, [pc, #16]	; (d6280 <_GLOBAL__sub_I_RGB+0x14>)
   d6270:	4904      	ldr	r1, [pc, #16]	; (d6284 <_GLOBAL__sub_I_RGB+0x18>)
   d6272:	2300      	movs	r3, #0
   d6274:	6083      	str	r3, [r0, #8]
   d6276:	f000 bf7d 	b.w	d7174 <__aeabi_atexit>
   d627a:	bf00      	nop
   d627c:	2003e398 	.word	0x2003e398
   d6280:	2003e094 	.word	0x2003e094
   d6284:	000d6241 	.word	0x000d6241

000d6288 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6288:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d628a:	4b0c      	ldr	r3, [pc, #48]	; (d62bc <serialEventRun+0x34>)
   d628c:	b133      	cbz	r3, d629c <serialEventRun+0x14>
   d628e:	f000 fbb9 	bl	d6a04 <_Z16_fetch_usbserialv>
   d6292:	6803      	ldr	r3, [r0, #0]
   d6294:	691b      	ldr	r3, [r3, #16]
   d6296:	4798      	blx	r3
   d6298:	2800      	cmp	r0, #0
   d629a:	dc09      	bgt.n	d62b0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d629c:	4b08      	ldr	r3, [pc, #32]	; (d62c0 <serialEventRun+0x38>)
   d629e:	b163      	cbz	r3, d62ba <serialEventRun+0x32>
   d62a0:	f000 fc78 	bl	d6b94 <_Z22__fetch_global_Serial1v>
   d62a4:	6803      	ldr	r3, [r0, #0]
   d62a6:	691b      	ldr	r3, [r3, #16]
   d62a8:	4798      	blx	r3
   d62aa:	2800      	cmp	r0, #0
   d62ac:	dc03      	bgt.n	d62b6 <serialEventRun+0x2e>
   d62ae:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d62b0:	f3af 8000 	nop.w
   d62b4:	e7f2      	b.n	d629c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d62b6:	f3af 8000 	nop.w
   d62ba:	bd08      	pop	{r3, pc}
	...

000d62c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d62c4:	b508      	push	{r3, lr}
	serialEventRun();
   d62c6:	f7ff ffdf 	bl	d6288 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d62ca:	f7ff f94f 	bl	d556c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d62ce:	4b01      	ldr	r3, [pc, #4]	; (d62d4 <_post_loop+0x10>)
   d62d0:	6018      	str	r0, [r3, #0]
   d62d2:	bd08      	pop	{r3, pc}
   d62d4:	2003e734 	.word	0x2003e734

000d62d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d62d8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d62da:	2300      	movs	r3, #0
   d62dc:	9300      	str	r3, [sp, #0]
   d62de:	461a      	mov	r2, r3
   d62e0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d62e4:	f7ff fac4 	bl	d5870 <system_ctrl_set_result>
}
   d62e8:	b003      	add	sp, #12
   d62ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d62f0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d62f0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d62f2:	8843      	ldrh	r3, [r0, #2]
   d62f4:	2b0a      	cmp	r3, #10
   d62f6:	d008      	beq.n	d630a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d62f8:	2b50      	cmp	r3, #80	; 0x50
   d62fa:	d109      	bne.n	d6310 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d62fc:	4b09      	ldr	r3, [pc, #36]	; (d6324 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d62fe:	681b      	ldr	r3, [r3, #0]
   d6300:	b13b      	cbz	r3, d6312 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6302:	b003      	add	sp, #12
   d6304:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6308:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d630a:	f7ff ffe5 	bl	d62d8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d630e:	e006      	b.n	d631e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6310:	2300      	movs	r3, #0
   d6312:	9300      	str	r3, [sp, #0]
   d6314:	461a      	mov	r2, r3
   d6316:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d631a:	f7ff faa9 	bl	d5870 <system_ctrl_set_result>
        break;
    }
}
   d631e:	b003      	add	sp, #12
   d6320:	f85d fb04 	ldr.w	pc, [sp], #4
   d6324:	2003e3a8 	.word	0x2003e3a8

000d6328 <module_user_init_hook>:

void module_user_init_hook()
{
   d6328:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d632a:	f7ff f90f 	bl	d554c <HAL_RNG_GetRandomNumber>
   d632e:	4604      	mov	r4, r0
    srand(seed);
   d6330:	f002 f9e0 	bl	d86f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6334:	4b07      	ldr	r3, [pc, #28]	; (d6354 <module_user_init_hook+0x2c>)
   d6336:	b113      	cbz	r3, d633e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6338:	4620      	mov	r0, r4
   d633a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d633e:	2100      	movs	r1, #0
   d6340:	4804      	ldr	r0, [pc, #16]	; (d6354 <module_user_init_hook+0x2c>)
   d6342:	f7ff faff 	bl	d5944 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6346:	2100      	movs	r1, #0
   d6348:	4803      	ldr	r0, [pc, #12]	; (d6358 <module_user_init_hook+0x30>)
}
   d634a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d634e:	f7ff ba85 	b.w	d585c <system_ctrl_set_app_request_handler>
   d6352:	bf00      	nop
   d6354:	00000000 	.word	0x00000000
   d6358:	000d62f1 	.word	0x000d62f1

000d635c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d635c:	4770      	bx	lr

000d635e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d635e:	2000      	movs	r0, #0
   d6360:	4770      	bx	lr

000d6362 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6362:	b510      	push	{r4, lr}
   d6364:	4604      	mov	r4, r0
   d6366:	f7fd fe9a 	bl	d409e <_ZdlPv>
   d636a:	4620      	mov	r0, r4
   d636c:	bd10      	pop	{r4, pc}

000d636e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d636e:	b508      	push	{r3, lr}
      { delete this; }
   d6370:	b108      	cbz	r0, d6376 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6372:	f7ff fff6 	bl	d6362 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6376:	bd08      	pop	{r3, pc}

000d6378 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d6378:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d637a:	68c4      	ldr	r4, [r0, #12]
   d637c:	b1d4      	cbz	r4, d63b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d637e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6380:	2b02      	cmp	r3, #2
   d6382:	d102      	bne.n	d638a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6384:	68e0      	ldr	r0, [r4, #12]
   d6386:	f7ff faed 	bl	d5964 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d638a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d638c:	b12d      	cbz	r5, d639a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d638e:	4628      	mov	r0, r5
   d6390:	f7ff ff4d 	bl	d622e <_ZNSt14_Function_baseD1Ev>
   d6394:	4628      	mov	r0, r5
   d6396:	f7fd fe82 	bl	d409e <_ZdlPv>
   d639a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d639c:	b12d      	cbz	r5, d63aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d639e:	4628      	mov	r0, r5
   d63a0:	f7ff ff45 	bl	d622e <_ZNSt14_Function_baseD1Ev>
   d63a4:	4628      	mov	r0, r5
   d63a6:	f7fd fe7a 	bl	d409e <_ZdlPv>
   d63aa:	4620      	mov	r0, r4
   d63ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d63b0:	f7fd be75 	b.w	d409e <_ZdlPv>
   d63b4:	bd38      	pop	{r3, r4, r5, pc}

000d63b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d63b6:	b513      	push	{r0, r1, r4, lr}
   d63b8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d63ba:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d63be:	2300      	movs	r3, #0
   d63c0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63c2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d63c4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d63c6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63c8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d63ca:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d63cc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63ce:	f7fd ff61 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63d2:	4620      	mov	r0, r4
   d63d4:	b002      	add	sp, #8
   d63d6:	bd10      	pop	{r4, pc}

000d63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d63d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63da:	460c      	mov	r4, r1
   d63dc:	ad02      	add	r5, sp, #8
   d63de:	f854 3b04 	ldr.w	r3, [r4], #4
   d63e2:	f845 3d08 	str.w	r3, [r5, #-8]!
   d63e6:	4606      	mov	r6, r0
   d63e8:	460f      	mov	r7, r1
   d63ea:	a801      	add	r0, sp, #4
   d63ec:	4621      	mov	r1, r4
   d63ee:	f7ff ff02 	bl	d61f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d63f2:	4629      	mov	r1, r5
   d63f4:	4630      	mov	r0, r6
   d63f6:	f7ff ffde 	bl	d63b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63fa:	a801      	add	r0, sp, #4
   d63fc:	f7fd ff4a 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6400:	4620      	mov	r0, r4
   d6402:	f7fd ff47 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d6406:	4638      	mov	r0, r7
   d6408:	f7fd fe49 	bl	d409e <_ZdlPv>
        return p;
    }
   d640c:	4630      	mov	r0, r6
   d640e:	b003      	add	sp, #12
   d6410:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6412 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6412:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6414:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6416:	b90a      	cbnz	r2, d641c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6418:	f000 feb1 	bl	d717e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d641c:	68c3      	ldr	r3, [r0, #12]
    }
   d641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6422:	4718      	bx	r3

000d6424 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6424:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6426:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6428:	f100 0110 	add.w	r1, r0, #16
   d642c:	f7ff fff1 	bl	d6412 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d6430:	bd08      	pop	{r3, pc}

000d6432 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6432:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6434:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6436:	b90a      	cbnz	r2, d643c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6438:	f000 fea1 	bl	d717e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d643c:	68c3      	ldr	r3, [r0, #12]
    }
   d643e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6442:	4718      	bx	r3

000d6444 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6444:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6446:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6448:	f100 0110 	add.w	r1, r0, #16
   d644c:	f7ff fff1 	bl	d6432 <_ZNKSt8functionIFvRKbEEclES1_>
   d6450:	bd08      	pop	{r3, pc}

000d6452 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6452:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6454:	2300      	movs	r3, #0
   d6456:	6083      	str	r3, [r0, #8]
   d6458:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d645a:	4604      	mov	r4, r0
   d645c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d645e:	b12b      	cbz	r3, d646c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6460:	2202      	movs	r2, #2
   d6462:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6464:	68eb      	ldr	r3, [r5, #12]
   d6466:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6468:	68ab      	ldr	r3, [r5, #8]
   d646a:	60a3      	str	r3, [r4, #8]
	}
    }
   d646c:	4620      	mov	r0, r4
   d646e:	bd38      	pop	{r3, r4, r5, pc}

000d6470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d6474:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6478:	b086      	sub	sp, #24
   d647a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d647c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6480:	808b      	strh	r3, [r1, #4]
   d6482:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6484:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6486:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d648a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d648c:	f04f 0002 	mov.w	r0, #2
   d6490:	e8d4 1f4f 	ldrexb	r1, [r4]
   d6494:	4299      	cmp	r1, r3
   d6496:	d103      	bne.n	d64a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d6498:	e8c4 0f45 	strexb	r5, r0, [r4]
   d649c:	2d00      	cmp	r5, #0
   d649e:	d1f7      	bne.n	d6490 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d64a0:	d002      	beq.n	d64a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d64a2:	f88d 1000 	strb.w	r1, [sp]
   d64a6:	e06a      	b.n	d657e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d64a8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d64ac:	bf1e      	ittt	ne
   d64ae:	60e7      	strne	r7, [r4, #12]
   d64b0:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d64b2:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d64b4:	2301      	movs	r3, #1
   d64b6:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d64ba:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d64bc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d64be:	f104 0308 	add.w	r3, r4, #8
   d64c2:	f3bf 8f5f 	dmb	sy
   d64c6:	e853 6f00 	ldrex	r6, [r3]
   d64ca:	e843 0200 	strex	r2, r0, [r3]
   d64ce:	2a00      	cmp	r2, #0
   d64d0:	d1f9      	bne.n	d64c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d64d2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d64d6:	2e00      	cmp	r6, #0
   d64d8:	d051      	beq.n	d657e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d64da:	f7ff f9af 	bl	d583c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d64de:	b120      	cbz	r0, d64ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d64e0:	4629      	mov	r1, r5
   d64e2:	4630      	mov	r0, r6
   d64e4:	f7ff ff95 	bl	d6412 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d64e8:	e043      	b.n	d6572 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d64ea:	4631      	mov	r1, r6
   d64ec:	4668      	mov	r0, sp
   d64ee:	f7ff ffb0 	bl	d6452 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d64f2:	68e0      	ldr	r0, [r4, #12]
   d64f4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d64f8:	b108      	cbz	r0, d64fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d64fa:	f002 f931 	bl	d8760 <strdup>
   d64fe:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6500:	2010      	movs	r0, #16
   d6502:	f8ad 5014 	strh.w	r5, [sp, #20]
   d6506:	f7fd fdc6 	bl	d4096 <_Znwj>
   d650a:	4605      	mov	r5, r0
   d650c:	b330      	cbz	r0, d655c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d650e:	f04f 0800 	mov.w	r8, #0
   d6512:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6516:	2018      	movs	r0, #24
   d6518:	f7fd fdbd 	bl	d4096 <_Znwj>
   d651c:	4604      	mov	r4, r0
   d651e:	b1c0      	cbz	r0, d6552 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6520:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6524:	4601      	mov	r1, r0
   d6526:	4668      	mov	r0, sp
   d6528:	f7ff fe90 	bl	d624c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d652c:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d652e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6530:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6532:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6534:	9202      	str	r2, [sp, #8]
   d6536:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6538:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d653a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d653e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6540:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6544:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6548:	9b04      	ldr	r3, [sp, #16]
   d654a:	9203      	str	r2, [sp, #12]
   d654c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d654e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6552:	4b0e      	ldr	r3, [pc, #56]	; (d658c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d6554:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6556:	4b0e      	ldr	r3, [pc, #56]	; (d6590 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6558:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d655a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d655c:	9804      	ldr	r0, [sp, #16]
   d655e:	f7ff fa01 	bl	d5964 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6562:	4668      	mov	r0, sp
   d6564:	f7ff fe63 	bl	d622e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6568:	2200      	movs	r2, #0
   d656a:	4629      	mov	r1, r5
   d656c:	4809      	ldr	r0, [pc, #36]	; (d6594 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d656e:	f7ff f96d 	bl	d584c <application_thread_invoke>
   d6572:	4630      	mov	r0, r6
   d6574:	f7ff fe5b 	bl	d622e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6578:	4630      	mov	r0, r6
   d657a:	f7fd fd90 	bl	d409e <_ZdlPv>
   d657e:	4638      	mov	r0, r7
   d6580:	f7ff f9f0 	bl	d5964 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d6584:	b006      	add	sp, #24
   d6586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d658a:	bf00      	nop
   d658c:	000d6425 	.word	0x000d6425
   d6590:	000d6681 	.word	0x000d6681
   d6594:	000d6be1 	.word	0x000d6be1

000d6598 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d659c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d659e:	ad07      	add	r5, sp, #28
   d65a0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d65a4:	4606      	mov	r6, r0
   d65a6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d65a8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d65aa:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d65ac:	460f      	mov	r7, r1
   d65ae:	4690      	mov	r8, r2
   d65b0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d65b4:	f8c5 b004 	str.w	fp, [r5, #4]
   d65b8:	f8c5 b008 	str.w	fp, [r5, #8]
   d65bc:	9307      	str	r3, [sp, #28]
   d65be:	f7fd fd6a 	bl	d4096 <_Znwj>
   d65c2:	4604      	mov	r4, r0
   d65c4:	b138      	cbz	r0, d65d6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d65c6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d65ca:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d65ce:	f8c0 b004 	str.w	fp, [r0, #4]
   d65d2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d65d6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d65d8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d65da:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d65dc:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d65de:	f7fd fd5a 	bl	d4096 <_Znwj>
   d65e2:	b128      	cbz	r0, d65f0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d65e4:	2301      	movs	r3, #1
   d65e6:	6043      	str	r3, [r0, #4]
   d65e8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d65ea:	4b23      	ldr	r3, [pc, #140]	; (d6678 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d65ec:	6003      	str	r3, [r0, #0]
   d65ee:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d65f0:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d65f2:	4b22      	ldr	r3, [pc, #136]	; (d667c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d65f4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d65f6:	2008      	movs	r0, #8
   d65f8:	f7fd fd4d 	bl	d4096 <_Znwj>
   d65fc:	4604      	mov	r4, r0
   d65fe:	b128      	cbz	r0, d660c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6600:	9b03      	ldr	r3, [sp, #12]
   d6602:	f840 3b04 	str.w	r3, [r0], #4
   d6606:	a904      	add	r1, sp, #16
   d6608:	f7ff fdf5 	bl	d61f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d660c:	9500      	str	r5, [sp, #0]
   d660e:	fa5f f38a 	uxtb.w	r3, sl
   d6612:	464a      	mov	r2, r9
   d6614:	4641      	mov	r1, r8
   d6616:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6618:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d661a:	f7ff f98b 	bl	d5934 <spark_send_event>
   d661e:	b9b8      	cbnz	r0, d6650 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6620:	9b03      	ldr	r3, [sp, #12]
   d6622:	785b      	ldrb	r3, [r3, #1]
   d6624:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6628:	b993      	cbnz	r3, d6650 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d662a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d662e:	a905      	add	r1, sp, #20
   d6630:	a803      	add	r0, sp, #12
   d6632:	9205      	str	r2, [sp, #20]
   d6634:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6638:	f7ff ff1a 	bl	d6470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d663c:	9805      	ldr	r0, [sp, #20]
   d663e:	f7ff f991 	bl	d5964 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6642:	a805      	add	r0, sp, #20
   d6644:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6646:	f7ff fec7 	bl	d63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d664a:	a806      	add	r0, sp, #24
   d664c:	f7fd fe22 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6650:	9b03      	ldr	r3, [sp, #12]
   d6652:	9305      	str	r3, [sp, #20]
   d6654:	a904      	add	r1, sp, #16
   d6656:	a806      	add	r0, sp, #24
   d6658:	f7ff fdcd 	bl	d61f6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d665c:	a905      	add	r1, sp, #20
   d665e:	4630      	mov	r0, r6
   d6660:	f7ff fea9 	bl	d63b6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6664:	a806      	add	r0, sp, #24
   d6666:	f7fd fe15 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d666a:	a804      	add	r0, sp, #16
   d666c:	f7fd fe12 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6670:	4630      	mov	r0, r6
   d6672:	b00b      	add	sp, #44	; 0x2c
   d6674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6678:	000da7f8 	.word	0x000da7f8
   d667c:	000d67e9 	.word	0x000d67e9

000d6680 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6680:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6682:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6684:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6686:	d006      	beq.n	d6696 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6688:	2a03      	cmp	r2, #3
   d668a:	d017      	beq.n	d66bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d668c:	2a01      	cmp	r2, #1
   d668e:	d120      	bne.n	d66d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6690:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6692:	6003      	str	r3, [r0, #0]
	      break;
   d6694:	e01d      	b.n	d66d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6696:	2018      	movs	r0, #24
   d6698:	680e      	ldr	r6, [r1, #0]
   d669a:	f7fd fcfc 	bl	d4096 <_Znwj>
   d669e:	4605      	mov	r5, r0
   d66a0:	b150      	cbz	r0, d66b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d66a2:	4631      	mov	r1, r6
   d66a4:	f7ff fed5 	bl	d6452 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d66a8:	6930      	ldr	r0, [r6, #16]
   d66aa:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d66ae:	b108      	cbz	r0, d66b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d66b0:	f002 f856 	bl	d8760 <strdup>
   d66b4:	6128      	str	r0, [r5, #16]
   d66b6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d66b8:	6025      	str	r5, [r4, #0]
   d66ba:	e00a      	b.n	d66d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d66bc:	6804      	ldr	r4, [r0, #0]
   d66be:	b144      	cbz	r4, d66d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d66c0:	6920      	ldr	r0, [r4, #16]
   d66c2:	f7ff f94f 	bl	d5964 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d66c6:	4620      	mov	r0, r4
   d66c8:	f7ff fdb1 	bl	d622e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d66cc:	4620      	mov	r0, r4
   d66ce:	f7fd fce6 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d66d2:	2000      	movs	r0, #0
   d66d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d66d6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d66d6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d66d8:	2300      	movs	r3, #0
   d66da:	6083      	str	r3, [r0, #8]
   d66dc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d66de:	4604      	mov	r4, r0
   d66e0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d66e2:	b12b      	cbz	r3, d66f0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d66e4:	2202      	movs	r2, #2
   d66e6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d66e8:	68eb      	ldr	r3, [r5, #12]
   d66ea:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d66ec:	68ab      	ldr	r3, [r5, #8]
   d66ee:	60a3      	str	r3, [r4, #8]
	}
    }
   d66f0:	4620      	mov	r0, r4
   d66f2:	bd38      	pop	{r3, r4, r5, pc}

000d66f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d66f4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d66f6:	b570      	push	{r4, r5, r6, lr}
   d66f8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d66fa:	d006      	beq.n	d670a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d66fc:	2a03      	cmp	r2, #3
   d66fe:	d011      	beq.n	d6724 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6700:	2a01      	cmp	r2, #1
   d6702:	d117      	bne.n	d6734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6704:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6706:	6003      	str	r3, [r0, #0]
	      break;
   d6708:	e014      	b.n	d6734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d670a:	2014      	movs	r0, #20
   d670c:	680e      	ldr	r6, [r1, #0]
   d670e:	f7fd fcc2 	bl	d4096 <_Znwj>
   d6712:	4605      	mov	r5, r0
   d6714:	b120      	cbz	r0, d6720 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6716:	4631      	mov	r1, r6
   d6718:	f7ff ffdd 	bl	d66d6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d671c:	7c33      	ldrb	r3, [r6, #16]
   d671e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6720:	6025      	str	r5, [r4, #0]
   d6722:	e007      	b.n	d6734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6724:	6804      	ldr	r4, [r0, #0]
   d6726:	b12c      	cbz	r4, d6734 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6728:	4620      	mov	r0, r4
   d672a:	f7ff fd80 	bl	d622e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d672e:	4620      	mov	r0, r4
   d6730:	f7fd fcb5 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6734:	2000      	movs	r0, #0
   d6736:	bd70      	pop	{r4, r5, r6, pc}

000d6738 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6738:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d673a:	2300      	movs	r3, #0
   d673c:	b087      	sub	sp, #28
   d673e:	460c      	mov	r4, r1
   d6740:	f3bf 8f5f 	dmb	sy
   d6744:	e850 6f00 	ldrex	r6, [r0]
   d6748:	e840 3200 	strex	r2, r3, [r0]
   d674c:	2a00      	cmp	r2, #0
   d674e:	d1f9      	bne.n	d6744 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6750:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6754:	2e00      	cmp	r6, #0
   d6756:	d03e      	beq.n	d67d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6758:	4618      	mov	r0, r3
   d675a:	f7ff f86f 	bl	d583c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d675e:	4607      	mov	r7, r0
   d6760:	b120      	cbz	r0, d676c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6762:	4621      	mov	r1, r4
   d6764:	4630      	mov	r0, r6
   d6766:	f7ff fe64 	bl	d6432 <_ZNKSt8functionIFvRKbEEclES1_>
   d676a:	e02e      	b.n	d67ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d676c:	4631      	mov	r1, r6
   d676e:	a801      	add	r0, sp, #4
   d6770:	f7ff ffb1 	bl	d66d6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6774:	7823      	ldrb	r3, [r4, #0]
   d6776:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d677a:	2010      	movs	r0, #16
   d677c:	f7fd fc8b 	bl	d4096 <_Znwj>
   d6780:	4605      	mov	r5, r0
   d6782:	b1d0      	cbz	r0, d67ba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6784:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6786:	2014      	movs	r0, #20
   d6788:	f7fd fc85 	bl	d4096 <_Znwj>
   d678c:	4604      	mov	r4, r0
   d678e:	b178      	cbz	r0, d67b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6790:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6792:	4601      	mov	r1, r0
   d6794:	a801      	add	r0, sp, #4
   d6796:	f7ff fd59 	bl	d624c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d679a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d679c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d679e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d67a2:	9203      	str	r2, [sp, #12]
   d67a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d67a6:	60e3      	str	r3, [r4, #12]
   d67a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d67ac:	9204      	str	r2, [sp, #16]
   d67ae:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d67b0:	4b0a      	ldr	r3, [pc, #40]	; (d67dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d67b2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d67b4:	4b0a      	ldr	r3, [pc, #40]	; (d67e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d67b6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d67b8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d67ba:	a801      	add	r0, sp, #4
   d67bc:	f7ff fd37 	bl	d622e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d67c0:	2200      	movs	r2, #0
   d67c2:	4629      	mov	r1, r5
   d67c4:	4807      	ldr	r0, [pc, #28]	; (d67e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d67c6:	f7ff f841 	bl	d584c <application_thread_invoke>
   d67ca:	4630      	mov	r0, r6
   d67cc:	f7ff fd2f 	bl	d622e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d67d0:	4630      	mov	r0, r6
   d67d2:	f7fd fc64 	bl	d409e <_ZdlPv>
        }
    }
   d67d6:	b007      	add	sp, #28
   d67d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d67da:	bf00      	nop
   d67dc:	000d6445 	.word	0x000d6445
   d67e0:	000d66f5 	.word	0x000d66f5
   d67e4:	000d6be1 	.word	0x000d6be1

000d67e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d67e8:	b530      	push	{r4, r5, lr}
   d67ea:	b085      	sub	sp, #20
   d67ec:	4604      	mov	r4, r0
   d67ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d67f0:	4668      	mov	r0, sp
   d67f2:	4611      	mov	r1, r2
   d67f4:	f7ff fdf0 	bl	d63d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d67f8:	b17c      	cbz	r4, d681a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d67fa:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d67fc:	4628      	mov	r0, r5
   d67fe:	b10d      	cbz	r5, d6804 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6800:	f001 ffae 	bl	d8760 <strdup>
   d6804:	9002      	str	r0, [sp, #8]
   d6806:	a902      	add	r1, sp, #8
   d6808:	4668      	mov	r0, sp
   d680a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d680e:	f7ff fe2f 	bl	d6470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6812:	9802      	ldr	r0, [sp, #8]
   d6814:	f7ff f8a6 	bl	d5964 <free>
   d6818:	e01d      	b.n	d6856 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d681a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d681c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6820:	f04f 0201 	mov.w	r2, #1
   d6824:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6828:	42a3      	cmp	r3, r4
   d682a:	d103      	bne.n	d6834 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d682c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6830:	2900      	cmp	r1, #0
   d6832:	d1f7      	bne.n	d6824 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6834:	d002      	beq.n	d683c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6836:	f88d 3008 	strb.w	r3, [sp, #8]
   d683a:	e00c      	b.n	d6856 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d683c:	f110 010c 	adds.w	r1, r0, #12
   d6840:	f04f 0301 	mov.w	r3, #1
   d6844:	bf18      	it	ne
   d6846:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6848:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d684c:	3004      	adds	r0, #4
   d684e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6852:	f7ff ff71 	bl	d6738 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6856:	a801      	add	r0, sp, #4
   d6858:	f7fd fd1c 	bl	d4294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d685c:	b005      	add	sp, #20
   d685e:	bd30      	pop	{r4, r5, pc}

000d6860 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6860:	4770      	bx	lr

000d6862 <_ZN9IPAddressD0Ev>:
   d6862:	b510      	push	{r4, lr}
   d6864:	4604      	mov	r4, r0
   d6866:	f7fd fc1a 	bl	d409e <_ZdlPv>
   d686a:	4620      	mov	r0, r4
   d686c:	bd10      	pop	{r4, pc}

000d686e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d686e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if HAL_IPv6
	if (address.v==6) {
   d6870:	7d03      	ldrb	r3, [r0, #20]
   d6872:	2b06      	cmp	r3, #6
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6874:	b08d      	sub	sp, #52	; 0x34
   d6876:	460e      	mov	r6, r1
   d6878:	f100 0704 	add.w	r7, r0, #4
   d687c:	f04f 0400 	mov.w	r4, #0
#if HAL_IPv6
	if (address.v==6) {
   d6880:	d002      	beq.n	d6888 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6882:	f100 0508 	add.w	r5, r0, #8
   d6886:	e018      	b.n	d68ba <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6888:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d688a:	4639      	mov	r1, r7
size_t IPAddress::printTo(Print& p) const
{
#if HAL_IPv6
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d688c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6890:	232f      	movs	r3, #47	; 0x2f
   d6892:	462a      	mov	r2, r5
   d6894:	200a      	movs	r0, #10
   d6896:	f7fe fea9 	bl	d55ec <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d689a:	4628      	mov	r0, r5
   d689c:	f001 ff7b 	bl	d8796 <strlen>
   d68a0:	6833      	ldr	r3, [r6, #0]
   d68a2:	4602      	mov	r2, r0
   d68a4:	68db      	ldr	r3, [r3, #12]
   d68a6:	4629      	mov	r1, r5
   d68a8:	4630      	mov	r0, r6
   d68aa:	4798      	blx	r3
   d68ac:	e00f      	b.n	d68ce <_ZNK9IPAddress7printToER5Print+0x60>
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d68ae:	b124      	cbz	r4, d68ba <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d68b0:	212e      	movs	r1, #46	; 0x2e
   d68b2:	4630      	mov	r0, r6
   d68b4:	f7ff fc57 	bl	d6166 <_ZN5Print5printEc>
   d68b8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d68ba:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d68be:	220a      	movs	r2, #10
   d68c0:	4630      	mov	r0, r6
   d68c2:	f7ff fc96 	bl	d61f2 <_ZN5Print5printEhi>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68c6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68c8:	4404      	add	r4, r0
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
		return p.write(buf);
	}
#endif
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d68ca:	d1f0      	bne.n	d68ae <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d68cc:	4620      	mov	r0, r4
    }
    return n;
}
   d68ce:	b00d      	add	sp, #52	; 0x34
   d68d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d68d4 <_ZN9IPAddressC1Ev>:
#include "spark_wiring_platform.h"
#include "string.h"

#include <arpa/inet.h>

IPAddress::IPAddress()
   d68d4:	b510      	push	{r4, lr}
   d68d6:	4b05      	ldr	r3, [pc, #20]	; (d68ec <_ZN9IPAddressC1Ev+0x18>)
   d68d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d68da:	2211      	movs	r2, #17
   d68dc:	f840 3b04 	str.w	r3, [r0], #4
   d68e0:	2100      	movs	r1, #0
   d68e2:	f001 fefe 	bl	d86e2 <memset>
{
    clear();
}
   d68e6:	4620      	mov	r0, r4
   d68e8:	bd10      	pop	{r4, pc}
   d68ea:	bf00      	nop
   d68ec:	000da814 	.word	0x000da814

000d68f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d68f0:	4603      	mov	r3, r0
   d68f2:	4a07      	ldr	r2, [pc, #28]	; (d6910 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d68f4:	b510      	push	{r4, lr}
   d68f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d68fa:	f101 0210 	add.w	r2, r1, #16
   d68fe:	f851 4b04 	ldr.w	r4, [r1], #4
   d6902:	f843 4b04 	str.w	r4, [r3], #4
   d6906:	4291      	cmp	r1, r2
   d6908:	d1f9      	bne.n	d68fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d690a:	780a      	ldrb	r2, [r1, #0]
   d690c:	701a      	strb	r2, [r3, #0]
}
   d690e:	bd10      	pop	{r4, pc}
   d6910:	000da814 	.word	0x000da814

000d6914 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6914:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6916:	2b04      	cmp	r3, #4
   d6918:	d101      	bne.n	d691e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d691a:	6840      	ldr	r0, [r0, #4]
   d691c:	e008      	b.n	d6930 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d691e:	2b06      	cmp	r3, #6
   d6920:	d10a      	bne.n	d6938 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d6922:	6843      	ldr	r3, [r0, #4]
   d6924:	b153      	cbz	r3, d693c <_ZNK9IPAddresscvbEv+0x28>
   d6926:	6883      	ldr	r3, [r0, #8]
   d6928:	b143      	cbz	r3, d693c <_ZNK9IPAddresscvbEv+0x28>
   d692a:	68c3      	ldr	r3, [r0, #12]
   d692c:	b133      	cbz	r3, d693c <_ZNK9IPAddresscvbEv+0x28>
   d692e:	6900      	ldr	r0, [r0, #16]
   d6930:	3000      	adds	r0, #0
   d6932:	bf18      	it	ne
   d6934:	2001      	movne	r0, #1
   d6936:	4770      	bx	lr
   d6938:	2000      	movs	r0, #0
   d693a:	4770      	bx	lr
   d693c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d693e:	4770      	bx	lr

000d6940 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6940:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6942:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6946:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d694a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d694e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6952:	2304      	movs	r3, #4
   d6954:	6041      	str	r1, [r0, #4]
   d6956:	7503      	strb	r3, [r0, #20]
   d6958:	bd10      	pop	{r4, pc}

000d695a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d695a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d695c:	780d      	ldrb	r5, [r1, #0]
   d695e:	788b      	ldrb	r3, [r1, #2]
   d6960:	784a      	ldrb	r2, [r1, #1]
   d6962:	78c9      	ldrb	r1, [r1, #3]
   d6964:	9100      	str	r1, [sp, #0]
   d6966:	4629      	mov	r1, r5
   d6968:	f7ff ffea 	bl	d6940 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d696c:	b003      	add	sp, #12
   d696e:	bd30      	pop	{r4, r5, pc}

000d6970 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6970:	7441      	strb	r1, [r0, #17]
   d6972:	4770      	bx	lr

000d6974 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6974:	4770      	bx	lr

000d6976 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d6976:	2100      	movs	r1, #0
   d6978:	7c00      	ldrb	r0, [r0, #16]
   d697a:	f7fe bf2f 	b.w	d57dc <HAL_USB_USART_Receive_Data>

000d697e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d697e:	2101      	movs	r1, #1
   d6980:	7c00      	ldrb	r0, [r0, #16]
   d6982:	f7fe bf2b 	b.w	d57dc <HAL_USB_USART_Receive_Data>

000d6986 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d6986:	7c00      	ldrb	r0, [r0, #16]
   d6988:	f7fe bf20 	b.w	d57cc <HAL_USB_USART_Available_Data_For_Write>

000d698c <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d698c:	7c00      	ldrb	r0, [r0, #16]
   d698e:	f7fe bf15 	b.w	d57bc <HAL_USB_USART_Available_Data>

000d6992 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d6992:	b538      	push	{r3, r4, r5, lr}
   d6994:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6996:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d6998:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d699a:	f7fe ff17 	bl	d57cc <HAL_USB_USART_Available_Data_For_Write>
   d699e:	2800      	cmp	r0, #0
   d69a0:	dc01      	bgt.n	d69a6 <_ZN9USBSerial5writeEh+0x14>
   d69a2:	7c60      	ldrb	r0, [r4, #17]
   d69a4:	b120      	cbz	r0, d69b0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d69a6:	4629      	mov	r1, r5
   d69a8:	7c20      	ldrb	r0, [r4, #16]
   d69aa:	f7fe ff1f 	bl	d57ec <HAL_USB_USART_Send_Data>
    return 1;
   d69ae:	2001      	movs	r0, #1
  }
  return 0;
}
   d69b0:	bd38      	pop	{r3, r4, r5, pc}

000d69b2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d69b2:	7c00      	ldrb	r0, [r0, #16]
   d69b4:	f7fe bf22 	b.w	d57fc <HAL_USB_USART_Flush_Data>

000d69b8 <_ZN9USBSerialD0Ev>:
   d69b8:	b510      	push	{r4, lr}
   d69ba:	4604      	mov	r4, r0
   d69bc:	f7fd fb6f 	bl	d409e <_ZdlPv>
   d69c0:	4620      	mov	r0, r4
   d69c2:	bd10      	pop	{r4, pc}

000d69c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d69c4:	b510      	push	{r4, lr}
   d69c6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d69c8:	2300      	movs	r3, #0
   d69ca:	6063      	str	r3, [r4, #4]
   d69cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d69d0:	60a3      	str	r3, [r4, #8]
   d69d2:	4b05      	ldr	r3, [pc, #20]	; (d69e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d69d4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d69d6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d69d8:	4608      	mov	r0, r1
{
  _serial = serial;
   d69da:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d69dc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d69de:	4611      	mov	r1, r2
   d69e0:	f7fe fedc 	bl	d579c <HAL_USB_USART_Init>
}
   d69e4:	4620      	mov	r0, r4
   d69e6:	bd10      	pop	{r4, pc}
   d69e8:	000da828 	.word	0x000da828

000d69ec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d69ec:	2200      	movs	r2, #0
   d69ee:	7c00      	ldrb	r0, [r0, #16]
   d69f0:	f7fe bedc 	b.w	d57ac <HAL_USB_USART_Begin>

000d69f4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d69f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d69f6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d69f8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d69fa:	2100      	movs	r1, #0
   d69fc:	f001 fe71 	bl	d86e2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6a00:	4620      	mov	r0, r4
   d6a02:	bd10      	pop	{r4, pc}

000d6a04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6a04:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a06:	4d0e      	ldr	r5, [pc, #56]	; (d6a40 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6a08:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6a0a:	a801      	add	r0, sp, #4
   d6a0c:	f7ff fff2 	bl	d69f4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6a10:	6829      	ldr	r1, [r5, #0]
   d6a12:	f011 0401 	ands.w	r4, r1, #1
   d6a16:	d110      	bne.n	d6a3a <_Z16_fetch_usbserialv+0x36>
   d6a18:	4628      	mov	r0, r5
   d6a1a:	f7fd fb44 	bl	d40a6 <__cxa_guard_acquire>
   d6a1e:	b160      	cbz	r0, d6a3a <_Z16_fetch_usbserialv+0x36>
   d6a20:	aa01      	add	r2, sp, #4
   d6a22:	4621      	mov	r1, r4
   d6a24:	4807      	ldr	r0, [pc, #28]	; (d6a44 <_Z16_fetch_usbserialv+0x40>)
   d6a26:	f7ff ffcd 	bl	d69c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6a2a:	4628      	mov	r0, r5
   d6a2c:	f7fd fb40 	bl	d40b0 <__cxa_guard_release>
   d6a30:	4a05      	ldr	r2, [pc, #20]	; (d6a48 <_Z16_fetch_usbserialv+0x44>)
   d6a32:	4906      	ldr	r1, [pc, #24]	; (d6a4c <_Z16_fetch_usbserialv+0x48>)
   d6a34:	4803      	ldr	r0, [pc, #12]	; (d6a44 <_Z16_fetch_usbserialv+0x40>)
   d6a36:	f000 fb9d 	bl	d7174 <__aeabi_atexit>
	return _usbserial;
}
   d6a3a:	4802      	ldr	r0, [pc, #8]	; (d6a44 <_Z16_fetch_usbserialv+0x40>)
   d6a3c:	b007      	add	sp, #28
   d6a3e:	bd30      	pop	{r4, r5, pc}
   d6a40:	2003e3ac 	.word	0x2003e3ac
   d6a44:	2003e3b0 	.word	0x2003e3b0
   d6a48:	2003e094 	.word	0x2003e094
   d6a4c:	000d6975 	.word	0x000d6975

000d6a50 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d6a50:	f7fe bd3c 	b.w	d54cc <HAL_Interrupts_Disable_All>

000d6a54 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d6a54:	f7fe bd32 	b.w	d54bc <HAL_Interrupts_Enable_All>

000d6a58 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d6a58:	2200      	movs	r2, #0
   d6a5a:	4611      	mov	r1, r2
   d6a5c:	6840      	ldr	r0, [r0, #4]
   d6a5e:	f7fe bf29 	b.w	d58b4 <network_ready>

000d6a62 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a62:	2200      	movs	r2, #0
   d6a64:	4611      	mov	r1, r2
   d6a66:	6840      	ldr	r0, [r0, #4]
   d6a68:	f7fe bf44 	b.w	d58f4 <network_listening>

000d6a6c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a6c:	2200      	movs	r2, #0
   d6a6e:	4611      	mov	r1, r2
   d6a70:	6840      	ldr	r0, [r0, #4]
   d6a72:	f7fe bf4f 	b.w	d5914 <network_get_listen_timeout>

000d6a76 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a76:	2200      	movs	r2, #0
   d6a78:	6840      	ldr	r0, [r0, #4]
   d6a7a:	f7fe bf43 	b.w	d5904 <network_set_listen_timeout>

000d6a7e <_ZN5spark13CellularClass6listenEb>:
    void clearCredentials() {
        cellular_credentials_clear(nullptr);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a7e:	2200      	movs	r2, #0
   d6a80:	f081 0101 	eor.w	r1, r1, #1
   d6a84:	6840      	ldr	r0, [r0, #4]
   d6a86:	f7fe bf2d 	b.w	d58e4 <network_listen>

000d6a8a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d6a8a:	2300      	movs	r3, #0
   d6a8c:	461a      	mov	r2, r3
   d6a8e:	4619      	mov	r1, r3
   d6a90:	6840      	ldr	r0, [r0, #4]
   d6a92:	f7fe bf1f 	b.w	d58d4 <network_off>

000d6a96 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d6a96:	2300      	movs	r3, #0
   d6a98:	461a      	mov	r2, r3
   d6a9a:	4619      	mov	r1, r3
   d6a9c:	6840      	ldr	r0, [r0, #4]
   d6a9e:	f7fe bf11 	b.w	d58c4 <network_on>

000d6aa2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6aa2:	2200      	movs	r2, #0
   d6aa4:	4611      	mov	r1, r2
   d6aa6:	6840      	ldr	r0, [r0, #4]
   d6aa8:	f7fe bef4 	b.w	d5894 <network_connecting>

000d6aac <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6aac:	2200      	movs	r2, #0
   d6aae:	2102      	movs	r1, #2
   d6ab0:	6840      	ldr	r0, [r0, #4]
   d6ab2:	f7fe bef7 	b.w	d58a4 <network_disconnect>

000d6ab6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ab6:	2300      	movs	r3, #0
   d6ab8:	461a      	mov	r2, r3
   d6aba:	6840      	ldr	r0, [r0, #4]
   d6abc:	f7fe bee2 	b.w	d5884 <network_connect>

000d6ac0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d6ac0:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d6ac2:	4d0c      	ldr	r5, [pc, #48]	; (d6af4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
   d6ac4:	2428      	movs	r4, #40	; 0x28
   d6ac6:	4622      	mov	r2, r4
   d6ac8:	2100      	movs	r1, #0
   d6aca:	4628      	mov	r0, r5
   d6acc:	f001 fe09 	bl	d86e2 <memset>
        cid = -1;
   d6ad0:	f04f 33ff 	mov.w	r3, #4294967295
   d6ad4:	606b      	str	r3, [r5, #4]
        size = sizeof(*this);
   d6ad6:	802c      	strh	r4, [r5, #0]
   d6ad8:	4d07      	ldr	r5, [pc, #28]	; (d6af8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
   d6ada:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6adc:	4628      	mov	r0, r5
   d6ade:	606b      	str	r3, [r5, #4]
   d6ae0:	4b06      	ldr	r3, [pc, #24]	; (d6afc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
   d6ae2:	f840 3b08 	str.w	r3, [r0], #8
    char iccid[21];
    char imei[16];

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
   d6ae6:	4622      	mov	r2, r4
   d6ae8:	2100      	movs	r1, #0
   d6aea:	f001 fdfa 	bl	d86e2 <memset>
        size = sizeof(*this);
   d6aee:	812c      	strh	r4, [r5, #8]
   d6af0:	bd38      	pop	{r3, r4, r5, pc}
   d6af2:	bf00      	nop
   d6af4:	2003e3f4 	.word	0x2003e3f4
   d6af8:	2003e3c4 	.word	0x2003e3c4
   d6afc:	000da858 	.word	0x000da858

000d6b00 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d6b00:	4770      	bx	lr

000d6b02 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b02:	7441      	strb	r1, [r0, #17]
   d6b04:	4770      	bx	lr

000d6b06 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d6b06:	7c00      	ldrb	r0, [r0, #16]
   d6b08:	f7fe bdd0 	b.w	d56ac <HAL_USART_Available_Data_For_Write>

000d6b0c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d6b0c:	7c00      	ldrb	r0, [r0, #16]
   d6b0e:	f7fe bda5 	b.w	d565c <HAL_USART_Available_Data>

000d6b12 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d6b12:	7c00      	ldrb	r0, [r0, #16]
   d6b14:	f7fe bdb2 	b.w	d567c <HAL_USART_Peek_Data>

000d6b18 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d6b18:	7c00      	ldrb	r0, [r0, #16]
   d6b1a:	f7fe bda7 	b.w	d566c <HAL_USART_Read_Data>

000d6b1e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d6b1e:	7c00      	ldrb	r0, [r0, #16]
   d6b20:	f7fe bdb4 	b.w	d568c <HAL_USART_Flush_Data>

000d6b24 <_ZN11USARTSerialD0Ev>:
   d6b24:	b510      	push	{r4, lr}
   d6b26:	4604      	mov	r4, r0
   d6b28:	f7fd fab9 	bl	d409e <_ZdlPv>
   d6b2c:	4620      	mov	r0, r4
   d6b2e:	bd10      	pop	{r4, pc}

000d6b30 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6b30:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b32:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d6b34:	4604      	mov	r4, r0
   d6b36:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d6b38:	b925      	cbnz	r5, d6b44 <_ZN11USARTSerial5writeEh+0x14>
   d6b3a:	7c00      	ldrb	r0, [r0, #16]
   d6b3c:	f7fe fdb6 	bl	d56ac <HAL_USART_Available_Data_For_Write>
   d6b40:	2800      	cmp	r0, #0
   d6b42:	dd05      	ble.n	d6b50 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b44:	4631      	mov	r1, r6
   d6b46:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6b48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6b4c:	f7fe bd7e 	b.w	d564c <HAL_USART_Write_Data>
  }
  return 0;
}
   d6b50:	4628      	mov	r0, r5
   d6b52:	bd70      	pop	{r4, r5, r6, pc}

000d6b54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6b54:	b510      	push	{r4, lr}
   d6b56:	4604      	mov	r4, r0
   d6b58:	4608      	mov	r0, r1
   d6b5a:	4611      	mov	r1, r2
   d6b5c:	2200      	movs	r2, #0
   d6b5e:	6062      	str	r2, [r4, #4]
   d6b60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b64:	60a2      	str	r2, [r4, #8]
   d6b66:	4a05      	ldr	r2, [pc, #20]	; (d6b7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6b68:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6b6a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6b6c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d6b6e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d6b70:	461a      	mov	r2, r3
   d6b72:	f7fe fd63 	bl	d563c <HAL_USART_Init>
}
   d6b76:	4620      	mov	r0, r4
   d6b78:	bd10      	pop	{r4, pc}
   d6b7a:	bf00      	nop
   d6b7c:	000da88c 	.word	0x000da88c

000d6b80 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d6b80:	2300      	movs	r3, #0
   d6b82:	7c00      	ldrb	r0, [r0, #16]
   d6b84:	f7fe bd9a 	b.w	d56bc <HAL_USART_BeginConfig>

000d6b88 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d6b88:	2200      	movs	r2, #0
   d6b8a:	f7ff bff9 	b.w	d6b80 <_ZN11USARTSerial5beginEmm>

000d6b8e <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d6b8e:	7c00      	ldrb	r0, [r0, #16]
   d6b90:	f7fe bd84 	b.w	d569c <HAL_USART_Is_Enabled>

000d6b94 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b94:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b96:	4d0c      	ldr	r5, [pc, #48]	; (d6bc8 <_Z22__fetch_global_Serial1v+0x34>)
   d6b98:	6829      	ldr	r1, [r5, #0]
   d6b9a:	f011 0401 	ands.w	r4, r1, #1
   d6b9e:	d111      	bne.n	d6bc4 <_Z22__fetch_global_Serial1v+0x30>
   d6ba0:	4628      	mov	r0, r5
   d6ba2:	f7fd fa80 	bl	d40a6 <__cxa_guard_acquire>
   d6ba6:	b168      	cbz	r0, d6bc4 <_Z22__fetch_global_Serial1v+0x30>
   d6ba8:	4a08      	ldr	r2, [pc, #32]	; (d6bcc <_Z22__fetch_global_Serial1v+0x38>)
   d6baa:	4b09      	ldr	r3, [pc, #36]	; (d6bd0 <_Z22__fetch_global_Serial1v+0x3c>)
   d6bac:	4809      	ldr	r0, [pc, #36]	; (d6bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d6bae:	4621      	mov	r1, r4
   d6bb0:	f7ff ffd0 	bl	d6b54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6bb4:	4628      	mov	r0, r5
   d6bb6:	f7fd fa7b 	bl	d40b0 <__cxa_guard_release>
   d6bba:	4a07      	ldr	r2, [pc, #28]	; (d6bd8 <_Z22__fetch_global_Serial1v+0x44>)
   d6bbc:	4907      	ldr	r1, [pc, #28]	; (d6bdc <_Z22__fetch_global_Serial1v+0x48>)
   d6bbe:	4805      	ldr	r0, [pc, #20]	; (d6bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d6bc0:	f000 fad8 	bl	d7174 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6bc4:	4803      	ldr	r0, [pc, #12]	; (d6bd4 <_Z22__fetch_global_Serial1v+0x40>)
   d6bc6:	bd38      	pop	{r3, r4, r5, pc}
   d6bc8:	2003e4b4 	.word	0x2003e4b4
   d6bcc:	2003e4b8 	.word	0x2003e4b8
   d6bd0:	2003e430 	.word	0x2003e430
   d6bd4:	2003e41c 	.word	0x2003e41c
   d6bd8:	2003e094 	.word	0x2003e094
   d6bdc:	000d6b01 	.word	0x000d6b01

000d6be0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6be0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6be2:	6883      	ldr	r3, [r0, #8]
   d6be4:	4604      	mov	r4, r0
   d6be6:	b90b      	cbnz	r3, d6bec <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6be8:	f000 fac9 	bl	d717e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6bec:	68c3      	ldr	r3, [r0, #12]
   d6bee:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6bf0:	68a3      	ldr	r3, [r4, #8]
   d6bf2:	b11b      	cbz	r3, d6bfc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6bf4:	2203      	movs	r2, #3
   d6bf6:	4621      	mov	r1, r4
   d6bf8:	4620      	mov	r0, r4
   d6bfa:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6bfc:	4620      	mov	r0, r4
}
   d6bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6c02:	f7fd ba4c 	b.w	d409e <_ZdlPv>

000d6c06 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6c06:	4770      	bx	lr

000d6c08 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c0a:	4606      	mov	r6, r0
   d6c0c:	4615      	mov	r5, r2
   d6c0e:	460c      	mov	r4, r1
   d6c10:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c12:	42bc      	cmp	r4, r7
   d6c14:	d006      	beq.n	d6c24 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6c16:	6833      	ldr	r3, [r6, #0]
   d6c18:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6c1c:	689b      	ldr	r3, [r3, #8]
   d6c1e:	4630      	mov	r0, r6
   d6c20:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6c22:	e7f6      	b.n	d6c12 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6c24:	4628      	mov	r0, r5
   d6c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c28 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6c28:	2200      	movs	r2, #0
   d6c2a:	7c00      	ldrb	r0, [r0, #16]
   d6c2c:	f7fe bd4e 	b.w	d56cc <HAL_I2C_Write_Data>

000d6c30 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6c30:	2100      	movs	r1, #0
   d6c32:	7c00      	ldrb	r0, [r0, #16]
   d6c34:	f7fe bd52 	b.w	d56dc <HAL_I2C_Available_Data>

000d6c38 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6c38:	2100      	movs	r1, #0
   d6c3a:	7c00      	ldrb	r0, [r0, #16]
   d6c3c:	f7fe bd56 	b.w	d56ec <HAL_I2C_Read_Data>

000d6c40 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6c40:	2100      	movs	r1, #0
   d6c42:	7c00      	ldrb	r0, [r0, #16]
   d6c44:	f7fe bd5a 	b.w	d56fc <HAL_I2C_Peek_Data>

000d6c48 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6c48:	2100      	movs	r1, #0
   d6c4a:	7c00      	ldrb	r0, [r0, #16]
   d6c4c:	f7fe bd5e 	b.w	d570c <HAL_I2C_Flush_Data>

000d6c50 <_ZN7TwoWireD0Ev>:
   d6c50:	b510      	push	{r4, lr}
   d6c52:	4604      	mov	r4, r0
   d6c54:	f7fd fa23 	bl	d409e <_ZdlPv>
   d6c58:	4620      	mov	r0, r4
   d6c5a:	bd10      	pop	{r4, pc}

000d6c5c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6c5c:	b510      	push	{r4, lr}
   d6c5e:	4604      	mov	r4, r0
   d6c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6c64:	4608      	mov	r0, r1
   d6c66:	60a3      	str	r3, [r4, #8]
   d6c68:	2100      	movs	r1, #0
   d6c6a:	4b04      	ldr	r3, [pc, #16]	; (d6c7c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6c6c:	7420      	strb	r0, [r4, #16]
   d6c6e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6c70:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6c72:	f7fe fd5b 	bl	d572c <HAL_I2C_Init>

}
   d6c76:	4620      	mov	r0, r4
   d6c78:	bd10      	pop	{r4, pc}
   d6c7a:	bf00      	nop
   d6c7c:	000da8bc 	.word	0x000da8bc

000d6c80 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6c80:	2100      	movs	r1, #0
   d6c82:	7c00      	ldrb	r0, [r0, #16]
   d6c84:	f7fe bd4a 	b.w	d571c <HAL_I2C_Is_Enabled>

000d6c88 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c88:	2200      	movs	r2, #0
   d6c8a:	4611      	mov	r1, r2
   d6c8c:	6840      	ldr	r0, [r0, #4]
   d6c8e:	f7fe be31 	b.w	d58f4 <network_listening>

000d6c92 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c92:	2200      	movs	r2, #0
   d6c94:	4611      	mov	r1, r2
   d6c96:	6840      	ldr	r0, [r0, #4]
   d6c98:	f7fe be3c 	b.w	d5914 <network_get_listen_timeout>

000d6c9c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c9c:	2200      	movs	r2, #0
   d6c9e:	6840      	ldr	r0, [r0, #4]
   d6ca0:	f7fe be30 	b.w	d5904 <network_set_listen_timeout>

000d6ca4 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ca4:	2200      	movs	r2, #0
   d6ca6:	f081 0101 	eor.w	r1, r1, #1
   d6caa:	6840      	ldr	r0, [r0, #4]
   d6cac:	f7fe be1a 	b.w	d58e4 <network_listen>

000d6cb0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6cb0:	2300      	movs	r3, #0
   d6cb2:	461a      	mov	r2, r3
   d6cb4:	4619      	mov	r1, r3
   d6cb6:	6840      	ldr	r0, [r0, #4]
   d6cb8:	f7fe be0c 	b.w	d58d4 <network_off>

000d6cbc <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6cbc:	2300      	movs	r3, #0
   d6cbe:	461a      	mov	r2, r3
   d6cc0:	4619      	mov	r1, r3
   d6cc2:	6840      	ldr	r0, [r0, #4]
   d6cc4:	f7fe bdfe 	b.w	d58c4 <network_on>

000d6cc8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6cc8:	2200      	movs	r2, #0
   d6cca:	4611      	mov	r1, r2
   d6ccc:	6840      	ldr	r0, [r0, #4]
   d6cce:	f7fe bdf1 	b.w	d58b4 <network_ready>

000d6cd2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6cd2:	2200      	movs	r2, #0
   d6cd4:	4611      	mov	r1, r2
   d6cd6:	6840      	ldr	r0, [r0, #4]
   d6cd8:	f7fe bddc 	b.w	d5894 <network_connecting>

000d6cdc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6cdc:	2200      	movs	r2, #0
   d6cde:	2102      	movs	r1, #2
   d6ce0:	6840      	ldr	r0, [r0, #4]
   d6ce2:	f7fe bddf 	b.w	d58a4 <network_disconnect>

000d6ce6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6ce6:	2300      	movs	r3, #0
   d6ce8:	461a      	mov	r2, r3
   d6cea:	6840      	ldr	r0, [r0, #4]
   d6cec:	f7fe bdca 	b.w	d5884 <network_connect>

000d6cf0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6cf0:	b110      	cbz	r0, d6cf8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6cf2:	6803      	ldr	r3, [r0, #0]
   d6cf4:	685b      	ldr	r3, [r3, #4]
   d6cf6:	4718      	bx	r3
   d6cf8:	4770      	bx	lr

000d6cfa <_ZN6Thread7disposeEv>:
    ~Thread()
    {
        dispose();
    }

    void dispose()
   d6cfa:	b538      	push	{r3, r4, r5, lr}
   d6cfc:	4604      	mov	r4, r0
   d6cfe:	6800      	ldr	r0, [r0, #0]
    {
        if (!is_valid())
   d6d00:	b1d0      	cbz	r0, d6d38 <_ZN6Thread7disposeEv+0x3e>
        return handle!=OS_THREAD_INVALID_HANDLE;
    }

    bool is_current()
    {
        return os_thread_is_current(handle);
   d6d02:	f7fe fc3b 	bl	d557c <os_thread_is_current>
    {
        if (!is_valid())
            return;

        // We shouldn't dispose of current thread
        if (is_current())
   d6d06:	b9b8      	cbnz	r0, d6d38 <_ZN6Thread7disposeEv+0x3e>
            return;

        if (!exited_) {
   d6d08:	7c23      	ldrb	r3, [r4, #16]
   d6d0a:	b91b      	cbnz	r3, d6d14 <_ZN6Thread7disposeEv+0x1a>
   d6d0c:	6820      	ldr	r0, [r4, #0]
        handle = OS_THREAD_INVALID_HANDLE;
    }

    bool join()
    {
        return is_valid() && os_thread_join(handle)==0;
   d6d0e:	b108      	cbz	r0, d6d14 <_ZN6Thread7disposeEv+0x1a>
   d6d10:	f7fe fc3c 	bl	d558c <os_thread_join>

        if (!exited_) {
            join();
        }

        if (wrapper) {
   d6d14:	6865      	ldr	r5, [r4, #4]
   d6d16:	b155      	cbz	r5, d6d2e <_ZN6Thread7disposeEv+0x34>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6d18:	68ab      	ldr	r3, [r5, #8]
   d6d1a:	b11b      	cbz	r3, d6d24 <_ZN6Thread7disposeEv+0x2a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d1c:	2203      	movs	r2, #3
   d6d1e:	4629      	mov	r1, r5
   d6d20:	4628      	mov	r0, r5
   d6d22:	4798      	blx	r3
            delete wrapper;
   d6d24:	4628      	mov	r0, r5
   d6d26:	f7fd f9ba 	bl	d409e <_ZdlPv>
            wrapper = NULL;
   d6d2a:	2300      	movs	r3, #0
   d6d2c:	6063      	str	r3, [r4, #4]
        }

        os_thread_cleanup(handle);
   d6d2e:	6820      	ldr	r0, [r4, #0]
   d6d30:	f7fe fc34 	bl	d559c <os_thread_cleanup>
        handle = OS_THREAD_INVALID_HANDLE;
   d6d34:	2300      	movs	r3, #0
   d6d36:	6023      	str	r3, [r4, #0]
   d6d38:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6d3c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6d3c:	b538      	push	{r3, r4, r5, lr}
   d6d3e:	4b0b      	ldr	r3, [pc, #44]	; (d6d6c <_ZN5spark9MeshClassD1Ev+0x30>)
   d6d40:	6003      	str	r3, [r0, #0]
   d6d42:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d44:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6d48:	b108      	cbz	r0, d6d4e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6d4a:	f7fd f9aa 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d4e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6d52:	b12d      	cbz	r5, d6d60 <_ZN5spark9MeshClassD1Ev+0x24>
        }
    }

    ~Thread()
    {
        dispose();
   d6d54:	4628      	mov	r0, r5
   d6d56:	f7ff ffd0 	bl	d6cfa <_ZN6Thread7disposeEv>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6d5a:	4628      	mov	r0, r5
   d6d5c:	f7fd f99f 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6d60:	68a0      	ldr	r0, [r4, #8]
   d6d62:	b108      	cbz	r0, d6d68 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d6d64:	f7ff ffc4 	bl	d6cf0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d6d68:	4620      	mov	r0, r4
   d6d6a:	bd38      	pop	{r3, r4, r5, pc}
   d6d6c:	000da8e4 	.word	0x000da8e4

000d6d70 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6d70:	6800      	ldr	r0, [r0, #0]
   d6d72:	f7fe bc2b 	b.w	d55cc <os_mutex_recursive_lock>
	...

000d6d78 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d6d78:	b530      	push	{r4, r5, lr}
   d6d7a:	b08d      	sub	sp, #52	; 0x34
   d6d7c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d6d7e:	2211      	movs	r2, #17
   d6d80:	2100      	movs	r1, #0
   d6d82:	a801      	add	r0, sp, #4
   d6d84:	f001 fcad 	bl	d86e2 <memset>
    addr.v = 6;
   d6d88:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6d8a:	aa01      	add	r2, sp, #4
   d6d8c:	4909      	ldr	r1, [pc, #36]	; (d6db4 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d6d8e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d6d92:	200a      	movs	r0, #10
   d6d94:	f7fe fc32 	bl	d55fc <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6d98:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d6d9a:	a901      	add	r1, sp, #4
   d6d9c:	a806      	add	r0, sp, #24
   d6d9e:	f7ff fda7 	bl	d68f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6da4:	3404      	adds	r4, #4
   d6da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6da8:	682b      	ldr	r3, [r5, #0]
   d6daa:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d6dac:	2000      	movs	r0, #0
   d6dae:	b00d      	add	sp, #52	; 0x34
   d6db0:	bd30      	pop	{r4, r5, pc}
   d6db2:	bf00      	nop
   d6db4:	000da910 	.word	0x000da910

000d6db8 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d6db8:	b530      	push	{r4, r5, lr}
   d6dba:	4604      	mov	r4, r0
   d6dbc:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d6dbe:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d6dc2:	f7ff ffd5 	bl	d6d70 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d6dc6:	6823      	ldr	r3, [r4, #0]
   d6dc8:	bb83      	cbnz	r3, d6e2c <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d6dca:	204c      	movs	r0, #76	; 0x4c
   d6dcc:	f7fd f963 	bl	d4096 <_Znwj>
   d6dd0:	4605      	mov	r5, r0
   d6dd2:	b108      	cbz	r0, d6dd8 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d6dd4:	f7ff f8fa 	bl	d5fcc <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6dd8:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6dda:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6ddc:	b108      	cbz	r0, d6de2 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d6dde:	f7ff ff87 	bl	d6cf0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6de2:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d6de4:	b320      	cbz	r0, d6e30 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d6de6:	2200      	movs	r2, #0
   d6de8:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d6dec:	f7ff f91d 	bl	d602a <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d6df0:	a908      	add	r1, sp, #32
   d6df2:	2500      	movs	r5, #0
   d6df4:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d6df8:	4811      	ldr	r0, [pc, #68]	; (d6e40 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d6dfa:	f7fe fb7f 	bl	d54fc <if_name_to_index>
   d6dfe:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d6e00:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d6e04:	6803      	ldr	r3, [r0, #0]
   d6e06:	f249 0169 	movw	r1, #36969	; 0x9069
   d6e0a:	6a1b      	ldr	r3, [r3, #32]
   d6e0c:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d6e0e:	a802      	add	r0, sp, #8
   d6e10:	f7ff fd60 	bl	d68d4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6e14:	a802      	add	r0, sp, #8
   d6e16:	f7ff ffaf 	bl	d6d78 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6e1a:	2800      	cmp	r0, #0
   d6e1c:	db04      	blt.n	d6e28 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d6e1e:	a902      	add	r1, sp, #8
   d6e20:	6820      	ldr	r0, [r4, #0]
   d6e22:	f7ff f96a 	bl	d60fa <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d6e26:	e004      	b.n	d6e32 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d6e28:	4605      	mov	r5, r0
   d6e2a:	e002      	b.n	d6e32 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d6e2c:	2500      	movs	r5, #0
   d6e2e:	e000      	b.n	d6e32 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d6e30:	4d04      	ldr	r5, [pc, #16]	; (d6e44 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6e32:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6e36:	f7fe fbd1 	bl	d55dc <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d6e3a:	4628      	mov	r0, r5
   d6e3c:	b009      	add	sp, #36	; 0x24
   d6e3e:	bd30      	pop	{r4, r5, pc}
   d6e40:	000da91d 	.word	0x000da91d
   d6e44:	fffffefc 	.word	0xfffffefc

000d6e48 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d6e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6e4c:	4605      	mov	r5, r0
   d6e4e:	b08c      	sub	sp, #48	; 0x30
   d6e50:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d6e52:	460f      	mov	r7, r1
   d6e54:	b109      	cbz	r1, d6e5a <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d6e56:	780b      	ldrb	r3, [r1, #0]
   d6e58:	b90b      	cbnz	r3, d6e5e <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d6e5a:	4c35      	ldr	r4, [pc, #212]	; (d6f30 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d6e5c:	e064      	b.n	d6f28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d6e5e:	4608      	mov	r0, r1
   d6e60:	f001 fc99 	bl	d8796 <strlen>
   d6e64:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6e66:	2e00      	cmp	r6, #0
   d6e68:	d05c      	beq.n	d6f24 <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d6e6a:	4630      	mov	r0, r6
   d6e6c:	f001 fc93 	bl	d8796 <strlen>
   d6e70:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6e72:	f108 0302 	add.w	r3, r8, #2
   d6e76:	4423      	add	r3, r4
   d6e78:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d6e7c:	d84f      	bhi.n	d6f1e <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d6e7e:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d6e82:	f7ff ff75 	bl	d6d70 <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d6e86:	4628      	mov	r0, r5
   d6e88:	f7ff ff96 	bl	d6db8 <_ZN5spark11MeshPublish14initialize_udpEv>
   d6e8c:	2800      	cmp	r0, #0
   d6e8e:	db40      	blt.n	d6f12 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d6e90:	4668      	mov	r0, sp
   d6e92:	f7ff fd1f 	bl	d68d4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d6e96:	4668      	mov	r0, sp
   d6e98:	f7ff ff6e 	bl	d6d78 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d6e9c:	2800      	cmp	r0, #0
   d6e9e:	db38      	blt.n	d6f12 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d6ea0:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d6ea4:	f8da 3000 	ldr.w	r3, [sl]
   d6ea8:	f10d 0c04 	add.w	ip, sp, #4
   d6eac:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d6eb0:	4b20      	ldr	r3, [pc, #128]	; (d6f34 <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d6eb2:	9306      	str	r3, [sp, #24]
   d6eb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d6eb8:	f10d 0e1c 	add.w	lr, sp, #28
   d6ebc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d6ec0:	f8dc 3000 	ldr.w	r3, [ip]
   d6ec4:	f88e 3000 	strb.w	r3, [lr]
   d6ec8:	f249 0269 	movw	r2, #36969	; 0x9069
   d6ecc:	a906      	add	r1, sp, #24
   d6ece:	4650      	mov	r0, sl
   d6ed0:	47c8      	blx	r9
   d6ed2:	2800      	cmp	r0, #0
   d6ed4:	db1d      	blt.n	d6f12 <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d6ed6:	2300      	movs	r3, #0
   d6ed8:	6828      	ldr	r0, [r5, #0]
   d6eda:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d6ede:	6803      	ldr	r3, [r0, #0]
   d6ee0:	2201      	movs	r2, #1
   d6ee2:	68db      	ldr	r3, [r3, #12]
   d6ee4:	a906      	add	r1, sp, #24
   d6ee6:	4798      	blx	r3
   d6ee8:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d6eea:	6803      	ldr	r3, [r0, #0]
   d6eec:	f108 0201 	add.w	r2, r8, #1
   d6ef0:	68db      	ldr	r3, [r3, #12]
   d6ef2:	4639      	mov	r1, r7
   d6ef4:	4798      	blx	r3
    if (dataLen > 0) {
   d6ef6:	b12c      	cbz	r4, d6f04 <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d6ef8:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d6efa:	6803      	ldr	r3, [r0, #0]
   d6efc:	4622      	mov	r2, r4
   d6efe:	68db      	ldr	r3, [r3, #12]
   d6f00:	4631      	mov	r1, r6
   d6f02:	4798      	blx	r3
   d6f04:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d6f06:	6803      	ldr	r3, [r0, #0]
   d6f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6f0a:	4798      	blx	r3
   d6f0c:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d6f10:	e000      	b.n	d6f14 <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d6f12:	4604      	mov	r4, r0
   d6f14:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d6f18:	f7fe fb60 	bl	d55dc <os_mutex_recursive_unlock>
   d6f1c:	e004      	b.n	d6f28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d6f1e:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d6f22:	e001      	b.n	d6f28 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d6f24:	4634      	mov	r4, r6
   d6f26:	e7a4      	b.n	d6e72 <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d6f28:	4620      	mov	r0, r4
   d6f2a:	b00c      	add	sp, #48	; 0x30
   d6f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6f30:	fffffef2 	.word	0xfffffef2
   d6f34:	000da814 	.word	0x000da814

000d6f38 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6f38:	b538      	push	{r3, r4, r5, lr}
   d6f3a:	4c0d      	ldr	r4, [pc, #52]	; (d6f70 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d6f3c:	4b0d      	ldr	r3, [pc, #52]	; (d6f74 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d6f3e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6f40:	2500      	movs	r5, #0
   d6f42:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6f44:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6f48:	6063      	str	r3, [r4, #4]
   d6f4a:	60a5      	str	r5, [r4, #8]
   d6f4c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f50:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6f54:	f7fe fb32 	bl	d55bc <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6f58:	4b07      	ldr	r3, [pc, #28]	; (d6f78 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d6f5a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d6f5e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6f60:	4620      	mov	r0, r4
   d6f62:	4a06      	ldr	r2, [pc, #24]	; (d6f7c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d6f64:	4906      	ldr	r1, [pc, #24]	; (d6f80 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d6f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6f6a:	f000 b903 	b.w	d7174 <__aeabi_atexit>
   d6f6e:	bf00      	nop
   d6f70:	2003e53c 	.word	0x2003e53c
   d6f74:	000da948 	.word	0x000da948
   d6f78:	000da8e4 	.word	0x000da8e4
   d6f7c:	2003e094 	.word	0x2003e094
   d6f80:	000d6d3d 	.word	0x000d6d3d

000d6f84 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6f84:	2300      	movs	r3, #0
   d6f86:	461a      	mov	r2, r3
   d6f88:	6840      	ldr	r0, [r0, #4]
   d6f8a:	f7fe bc7b 	b.w	d5884 <network_connect>

000d6f8e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6f8e:	2200      	movs	r2, #0
   d6f90:	2102      	movs	r1, #2
   d6f92:	6840      	ldr	r0, [r0, #4]
   d6f94:	f7fe bc86 	b.w	d58a4 <network_disconnect>

000d6f98 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6f98:	2200      	movs	r2, #0
   d6f9a:	4611      	mov	r1, r2
   d6f9c:	6840      	ldr	r0, [r0, #4]
   d6f9e:	f7fe bc79 	b.w	d5894 <network_connecting>

000d6fa2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6fa2:	2200      	movs	r2, #0
   d6fa4:	4611      	mov	r1, r2
   d6fa6:	6840      	ldr	r0, [r0, #4]
   d6fa8:	f7fe bc84 	b.w	d58b4 <network_ready>

000d6fac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6fac:	2300      	movs	r3, #0
   d6fae:	461a      	mov	r2, r3
   d6fb0:	4619      	mov	r1, r3
   d6fb2:	6840      	ldr	r0, [r0, #4]
   d6fb4:	f7fe bc86 	b.w	d58c4 <network_on>

000d6fb8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6fb8:	2300      	movs	r3, #0
   d6fba:	461a      	mov	r2, r3
   d6fbc:	4619      	mov	r1, r3
   d6fbe:	6840      	ldr	r0, [r0, #4]
   d6fc0:	f7fe bc88 	b.w	d58d4 <network_off>

000d6fc4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6fc4:	2200      	movs	r2, #0
   d6fc6:	f081 0101 	eor.w	r1, r1, #1
   d6fca:	6840      	ldr	r0, [r0, #4]
   d6fcc:	f7fe bc8a 	b.w	d58e4 <network_listen>

000d6fd0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6fd0:	2200      	movs	r2, #0
   d6fd2:	6840      	ldr	r0, [r0, #4]
   d6fd4:	f7fe bc96 	b.w	d5904 <network_set_listen_timeout>

000d6fd8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6fd8:	2200      	movs	r2, #0
   d6fda:	4611      	mov	r1, r2
   d6fdc:	6840      	ldr	r0, [r0, #4]
   d6fde:	f7fe bc99 	b.w	d5914 <network_get_listen_timeout>

000d6fe2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6fe2:	2200      	movs	r2, #0
   d6fe4:	4611      	mov	r1, r2
   d6fe6:	6840      	ldr	r0, [r0, #4]
   d6fe8:	f7fe bc84 	b.w	d58f4 <network_listening>

000d6fec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6fec:	b570      	push	{r4, r5, r6, lr}
   d6fee:	b08c      	sub	sp, #48	; 0x30
   d6ff0:	4614      	mov	r4, r2
   d6ff2:	4606      	mov	r6, r0
    IPAddress addr;
   d6ff4:	f7ff fc6e 	bl	d68d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ff8:	ab0c      	add	r3, sp, #48	; 0x30
   d6ffa:	2200      	movs	r2, #0
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d6ffc:	4611      	mov	r1, r2
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6ffe:	f843 2d30 	str.w	r2, [r3, #-48]!
    const int r = getaddrinfo(name, nullptr, nullptr, &ai);
   d7002:	4620      	mov	r0, r4
   d7004:	f7fe fa42 	bl	d548c <netdb_getaddrinfo>
    if (!r && ai) {
   d7008:	4601      	mov	r1, r0
   d700a:	bb58      	cbnz	r0, d7064 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
   d700c:	9b00      	ldr	r3, [sp, #0]
   d700e:	b34b      	cbz	r3, d7064 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
   d7010:	685a      	ldr	r2, [r3, #4]
   d7012:	2a02      	cmp	r2, #2
   d7014:	d00e      	beq.n	d7034 <_ZN5spark12NetworkClass7resolveEPKc+0x48>
   d7016:	2a0a      	cmp	r2, #10
   d7018:	d124      	bne.n	d7064 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
                break;
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
   d701a:	695c      	ldr	r4, [r3, #20]
                HAL_IPAddress a = {};
   d701c:	2211      	movs	r2, #17
   d701e:	a801      	add	r0, sp, #4
   d7020:	f001 fb5f 	bl	d86e2 <memset>
                a.v = 6;
   d7024:	2306      	movs	r3, #6
   d7026:	f88d 3014 	strb.w	r3, [sp, #20]
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d702a:	ad01      	add	r5, sp, #4
   d702c:	f104 0308 	add.w	r3, r4, #8
   d7030:	3418      	adds	r4, #24
   d7032:	e005      	b.n	d7040 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
        // NOTE: using only the first entry
        switch (ai->ai_family) {
            case AF_INET: {
                // NOTE: HAL_IPAddress is little-endian
                auto in = (struct sockaddr_in*)ai->ai_addr;
                addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7034:	6959      	ldr	r1, [r3, #20]
   d7036:	4630      	mov	r0, r6
   d7038:	3104      	adds	r1, #4
   d703a:	f7ff fc8e 	bl	d695a <_ZN9IPAddressaSEPKh>
                break;
   d703e:	e011      	b.n	d7064 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
            }
            case AF_INET6: {
                auto in6 = (struct sockaddr_in6*)ai->ai_addr;
                HAL_IPAddress a = {};
                a.v = 6;
                memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7040:	6818      	ldr	r0, [r3, #0]
   d7042:	6859      	ldr	r1, [r3, #4]
   d7044:	462a      	mov	r2, r5
   d7046:	c203      	stmia	r2!, {r0, r1}
   d7048:	3308      	adds	r3, #8
   d704a:	42a3      	cmp	r3, r4
   d704c:	4615      	mov	r5, r2
   d704e:	d1f7      	bne.n	d7040 <_ZN5spark12NetworkClass7resolveEPKc+0x54>
                addr = IPAddress(a);
   d7050:	a901      	add	r1, sp, #4
   d7052:	a806      	add	r0, sp, #24
   d7054:	ad07      	add	r5, sp, #28
   d7056:	f7ff fc4b 	bl	d68f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d705a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d705c:	1d34      	adds	r4, r6, #4
   d705e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7060:	682b      	ldr	r3, [r5, #0]
   d7062:	7023      	strb	r3, [r4, #0]
                break;
            }
        }
    }
    freeaddrinfo(ai);
   d7064:	9800      	ldr	r0, [sp, #0]
   d7066:	f7fe fa09 	bl	d547c <netdb_freeaddrinfo>
#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d706a:	4630      	mov	r0, r6
   d706c:	b00c      	add	sp, #48	; 0x30
   d706e:	bd70      	pop	{r4, r5, r6, pc}

000d7070 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7070:	4b02      	ldr	r3, [pc, #8]	; (d707c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7072:	4a03      	ldr	r2, [pc, #12]	; (d7080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7074:	601a      	str	r2, [r3, #0]
   d7076:	2200      	movs	r2, #0
   d7078:	605a      	str	r2, [r3, #4]
   d707a:	4770      	bx	lr
   d707c:	2003e70c 	.word	0x2003e70c
   d7080:	000da948 	.word	0x000da948

000d7084 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7084:	b510      	push	{r4, lr}
   d7086:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d7088:	480f      	ldr	r0, [pc, #60]	; (d70c8 <pinAvailable+0x44>)
   d708a:	f7fe fced 	bl	d5a68 <_ZN8SPIClass9isEnabledEv>
   d708e:	b128      	cbz	r0, d709c <pinAvailable+0x18>
   d7090:	f1a4 030b 	sub.w	r3, r4, #11
   d7094:	2b02      	cmp	r3, #2
   d7096:	d801      	bhi.n	d709c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d7098:	2000      	movs	r0, #0
   d709a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d709c:	f000 f84a 	bl	d7134 <_Z19__fetch_global_Wirev>
   d70a0:	f7ff fdee 	bl	d6c80 <_ZN7TwoWire9isEnabledEv>
   d70a4:	b108      	cbz	r0, d70aa <pinAvailable+0x26>
   d70a6:	2c01      	cmp	r4, #1
   d70a8:	d9f6      	bls.n	d7098 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d70aa:	f7ff fd73 	bl	d6b94 <_Z22__fetch_global_Serial1v>
   d70ae:	f7ff fd6e 	bl	d6b8e <_ZN11USARTSerial9isEnabledEv>
   d70b2:	b118      	cbz	r0, d70bc <pinAvailable+0x38>
   d70b4:	f1a4 0309 	sub.w	r3, r4, #9
   d70b8:	2b01      	cmp	r3, #1
   d70ba:	d9ed      	bls.n	d7098 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d70bc:	2c23      	cmp	r4, #35	; 0x23
   d70be:	bf8c      	ite	hi
   d70c0:	2000      	movhi	r0, #0
   d70c2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d70c4:	bd10      	pop	{r4, pc}
   d70c6:	bf00      	nop
   d70c8:	2003e714 	.word	0x2003e714

000d70cc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70cc:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d70ce:	b538      	push	{r3, r4, r5, lr}
   d70d0:	4604      	mov	r4, r0
   d70d2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d70d4:	d80a      	bhi.n	d70ec <pinMode+0x20>
   d70d6:	29ff      	cmp	r1, #255	; 0xff
   d70d8:	d008      	beq.n	d70ec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d70da:	f7ff ffd3 	bl	d7084 <pinAvailable>
   d70de:	b128      	cbz	r0, d70ec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d70e0:	4629      	mov	r1, r5
   d70e2:	4620      	mov	r0, r4
}
   d70e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d70e8:	f7fe b9e0 	b.w	d54ac <HAL_Pin_Mode>
   d70ec:	bd38      	pop	{r3, r4, r5, pc}
	...

000d70f0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d70f0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d70f2:	4c0c      	ldr	r4, [pc, #48]	; (d7124 <_GLOBAL__sub_I_SPI+0x34>)
   d70f4:	4e0c      	ldr	r6, [pc, #48]	; (d7128 <_GLOBAL__sub_I_SPI+0x38>)
   d70f6:	4d0d      	ldr	r5, [pc, #52]	; (d712c <_GLOBAL__sub_I_SPI+0x3c>)
   d70f8:	2100      	movs	r1, #0
   d70fa:	4620      	mov	r0, r4
   d70fc:	f7fe fca0 	bl	d5a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7100:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d7102:	4c0b      	ldr	r4, [pc, #44]	; (d7130 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d7104:	4632      	mov	r2, r6
   d7106:	4629      	mov	r1, r5
   d7108:	f000 f834 	bl	d7174 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d710c:	2101      	movs	r1, #1
   d710e:	4620      	mov	r0, r4
   d7110:	f7fe fc96 	bl	d5a40 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7114:	4632      	mov	r2, r6
   d7116:	4629      	mov	r1, r5
   d7118:	4620      	mov	r0, r4
   d711a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d711e:	f000 b829 	b.w	d7174 <__aeabi_atexit>
   d7122:	bf00      	nop
   d7124:	2003e714 	.word	0x2003e714
   d7128:	2003e094 	.word	0x2003e094
   d712c:	000d5a31 	.word	0x000d5a31
   d7130:	2003e724 	.word	0x2003e724

000d7134 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d7134:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d7136:	4d0b      	ldr	r5, [pc, #44]	; (d7164 <_Z19__fetch_global_Wirev+0x30>)
   d7138:	6829      	ldr	r1, [r5, #0]
   d713a:	f011 0401 	ands.w	r4, r1, #1
   d713e:	d10f      	bne.n	d7160 <_Z19__fetch_global_Wirev+0x2c>
   d7140:	4628      	mov	r0, r5
   d7142:	f7fc ffb0 	bl	d40a6 <__cxa_guard_acquire>
   d7146:	b158      	cbz	r0, d7160 <_Z19__fetch_global_Wirev+0x2c>
   d7148:	4621      	mov	r1, r4
   d714a:	4807      	ldr	r0, [pc, #28]	; (d7168 <_Z19__fetch_global_Wirev+0x34>)
   d714c:	f7ff fd86 	bl	d6c5c <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d7150:	4628      	mov	r0, r5
   d7152:	f7fc ffad 	bl	d40b0 <__cxa_guard_release>
   d7156:	4a05      	ldr	r2, [pc, #20]	; (d716c <_Z19__fetch_global_Wirev+0x38>)
   d7158:	4905      	ldr	r1, [pc, #20]	; (d7170 <_Z19__fetch_global_Wirev+0x3c>)
   d715a:	4803      	ldr	r0, [pc, #12]	; (d7168 <_Z19__fetch_global_Wirev+0x34>)
   d715c:	f000 f80a 	bl	d7174 <__aeabi_atexit>
	return wire;
}
   d7160:	4801      	ldr	r0, [pc, #4]	; (d7168 <_Z19__fetch_global_Wirev+0x34>)
   d7162:	bd38      	pop	{r3, r4, r5, pc}
   d7164:	2003e738 	.word	0x2003e738
   d7168:	2003e73c 	.word	0x2003e73c
   d716c:	2003e094 	.word	0x2003e094
   d7170:	000d6c07 	.word	0x000d6c07

000d7174 <__aeabi_atexit>:
   d7174:	460b      	mov	r3, r1
   d7176:	4601      	mov	r1, r0
   d7178:	4618      	mov	r0, r3
   d717a:	f001 ba95 	b.w	d86a8 <__cxa_atexit>

000d717e <_ZSt25__throw_bad_function_callv>:
   d717e:	b508      	push	{r3, lr}
   d7180:	f7fe fc00 	bl	d5984 <abort>

000d7184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7184:	4b18      	ldr	r3, [pc, #96]	; (d71e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7186:	681a      	ldr	r2, [r3, #0]
   d7188:	07d1      	lsls	r1, r2, #31
   d718a:	bf5c      	itt	pl
   d718c:	2201      	movpl	r2, #1
   d718e:	601a      	strpl	r2, [r3, #0]
   d7190:	4b16      	ldr	r3, [pc, #88]	; (d71ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7192:	681a      	ldr	r2, [r3, #0]
   d7194:	07d2      	lsls	r2, r2, #31
   d7196:	bf5c      	itt	pl
   d7198:	2201      	movpl	r2, #1
   d719a:	601a      	strpl	r2, [r3, #0]
   d719c:	4b14      	ldr	r3, [pc, #80]	; (d71f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d719e:	681a      	ldr	r2, [r3, #0]
   d71a0:	07d0      	lsls	r0, r2, #31
   d71a2:	bf5c      	itt	pl
   d71a4:	2201      	movpl	r2, #1
   d71a6:	601a      	strpl	r2, [r3, #0]
   d71a8:	4b12      	ldr	r3, [pc, #72]	; (d71f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d71aa:	681a      	ldr	r2, [r3, #0]
   d71ac:	07d1      	lsls	r1, r2, #31
   d71ae:	bf5c      	itt	pl
   d71b0:	2201      	movpl	r2, #1
   d71b2:	601a      	strpl	r2, [r3, #0]
   d71b4:	4b10      	ldr	r3, [pc, #64]	; (d71f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d71b6:	681a      	ldr	r2, [r3, #0]
   d71b8:	07d2      	lsls	r2, r2, #31
   d71ba:	bf5c      	itt	pl
   d71bc:	2201      	movpl	r2, #1
   d71be:	601a      	strpl	r2, [r3, #0]
   d71c0:	4b0e      	ldr	r3, [pc, #56]	; (d71fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d71c2:	681a      	ldr	r2, [r3, #0]
   d71c4:	07d0      	lsls	r0, r2, #31
   d71c6:	bf5c      	itt	pl
   d71c8:	2201      	movpl	r2, #1
   d71ca:	601a      	strpl	r2, [r3, #0]
   d71cc:	4b0c      	ldr	r3, [pc, #48]	; (d7200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d71ce:	681a      	ldr	r2, [r3, #0]
   d71d0:	07d1      	lsls	r1, r2, #31
   d71d2:	bf5c      	itt	pl
   d71d4:	2201      	movpl	r2, #1
   d71d6:	601a      	strpl	r2, [r3, #0]
   d71d8:	4b0a      	ldr	r3, [pc, #40]	; (d7204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d71da:	681a      	ldr	r2, [r3, #0]
   d71dc:	07d2      	lsls	r2, r2, #31
   d71de:	bf5c      	itt	pl
   d71e0:	2201      	movpl	r2, #1
   d71e2:	601a      	strpl	r2, [r3, #0]
   d71e4:	4770      	bx	lr
   d71e6:	bf00      	nop
   d71e8:	2003e76c 	.word	0x2003e76c
   d71ec:	2003e768 	.word	0x2003e768
   d71f0:	2003e764 	.word	0x2003e764
   d71f4:	2003e760 	.word	0x2003e760
   d71f8:	2003e75c 	.word	0x2003e75c
   d71fc:	2003e758 	.word	0x2003e758
   d7200:	2003e754 	.word	0x2003e754
   d7204:	2003e750 	.word	0x2003e750

000d7208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7208:	4b24      	ldr	r3, [pc, #144]	; (d729c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d720a:	681a      	ldr	r2, [r3, #0]
   d720c:	07d0      	lsls	r0, r2, #31
   d720e:	bf5c      	itt	pl
   d7210:	2201      	movpl	r2, #1
   d7212:	601a      	strpl	r2, [r3, #0]
   d7214:	4b22      	ldr	r3, [pc, #136]	; (d72a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7216:	681a      	ldr	r2, [r3, #0]
   d7218:	07d1      	lsls	r1, r2, #31
   d721a:	bf5c      	itt	pl
   d721c:	2201      	movpl	r2, #1
   d721e:	601a      	strpl	r2, [r3, #0]
   d7220:	4b20      	ldr	r3, [pc, #128]	; (d72a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7222:	681a      	ldr	r2, [r3, #0]
   d7224:	07d2      	lsls	r2, r2, #31
   d7226:	bf5c      	itt	pl
   d7228:	2201      	movpl	r2, #1
   d722a:	601a      	strpl	r2, [r3, #0]
   d722c:	4b1e      	ldr	r3, [pc, #120]	; (d72a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d722e:	681a      	ldr	r2, [r3, #0]
   d7230:	07d0      	lsls	r0, r2, #31
   d7232:	bf5c      	itt	pl
   d7234:	2201      	movpl	r2, #1
   d7236:	601a      	strpl	r2, [r3, #0]
   d7238:	4b1c      	ldr	r3, [pc, #112]	; (d72ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d723a:	681a      	ldr	r2, [r3, #0]
   d723c:	07d1      	lsls	r1, r2, #31
   d723e:	bf5c      	itt	pl
   d7240:	2201      	movpl	r2, #1
   d7242:	601a      	strpl	r2, [r3, #0]
   d7244:	4b1a      	ldr	r3, [pc, #104]	; (d72b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7246:	681a      	ldr	r2, [r3, #0]
   d7248:	07d2      	lsls	r2, r2, #31
   d724a:	bf5c      	itt	pl
   d724c:	2201      	movpl	r2, #1
   d724e:	601a      	strpl	r2, [r3, #0]
   d7250:	4b18      	ldr	r3, [pc, #96]	; (d72b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7252:	681a      	ldr	r2, [r3, #0]
   d7254:	07d0      	lsls	r0, r2, #31
   d7256:	bf5c      	itt	pl
   d7258:	2201      	movpl	r2, #1
   d725a:	601a      	strpl	r2, [r3, #0]
   d725c:	4b16      	ldr	r3, [pc, #88]	; (d72b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d725e:	681a      	ldr	r2, [r3, #0]
   d7260:	07d1      	lsls	r1, r2, #31
   d7262:	bf5c      	itt	pl
   d7264:	2201      	movpl	r2, #1
   d7266:	601a      	strpl	r2, [r3, #0]
   d7268:	4b14      	ldr	r3, [pc, #80]	; (d72bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d726a:	681a      	ldr	r2, [r3, #0]
   d726c:	07d2      	lsls	r2, r2, #31
   d726e:	bf5c      	itt	pl
   d7270:	2201      	movpl	r2, #1
   d7272:	601a      	strpl	r2, [r3, #0]
   d7274:	4b12      	ldr	r3, [pc, #72]	; (d72c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7276:	681a      	ldr	r2, [r3, #0]
   d7278:	07d0      	lsls	r0, r2, #31
   d727a:	bf5c      	itt	pl
   d727c:	2201      	movpl	r2, #1
   d727e:	601a      	strpl	r2, [r3, #0]
   d7280:	4b10      	ldr	r3, [pc, #64]	; (d72c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7282:	681a      	ldr	r2, [r3, #0]
   d7284:	07d1      	lsls	r1, r2, #31
   d7286:	bf5c      	itt	pl
   d7288:	2201      	movpl	r2, #1
   d728a:	601a      	strpl	r2, [r3, #0]
   d728c:	4b0e      	ldr	r3, [pc, #56]	; (d72c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d728e:	681a      	ldr	r2, [r3, #0]
   d7290:	07d2      	lsls	r2, r2, #31
   d7292:	bf5c      	itt	pl
   d7294:	2201      	movpl	r2, #1
   d7296:	601a      	strpl	r2, [r3, #0]
   d7298:	4770      	bx	lr
   d729a:	bf00      	nop
   d729c:	2003e79c 	.word	0x2003e79c
   d72a0:	2003e798 	.word	0x2003e798
   d72a4:	2003e794 	.word	0x2003e794
   d72a8:	2003e790 	.word	0x2003e790
   d72ac:	2003e78c 	.word	0x2003e78c
   d72b0:	2003e788 	.word	0x2003e788
   d72b4:	2003e784 	.word	0x2003e784
   d72b8:	2003e780 	.word	0x2003e780
   d72bc:	2003e77c 	.word	0x2003e77c
   d72c0:	2003e778 	.word	0x2003e778
   d72c4:	2003e774 	.word	0x2003e774
   d72c8:	2003e770 	.word	0x2003e770

000d72cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d72cc:	4b24      	ldr	r3, [pc, #144]	; (d7360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d72ce:	681a      	ldr	r2, [r3, #0]
   d72d0:	07d0      	lsls	r0, r2, #31
   d72d2:	bf5c      	itt	pl
   d72d4:	2201      	movpl	r2, #1
   d72d6:	601a      	strpl	r2, [r3, #0]
   d72d8:	4b22      	ldr	r3, [pc, #136]	; (d7364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d72da:	681a      	ldr	r2, [r3, #0]
   d72dc:	07d1      	lsls	r1, r2, #31
   d72de:	bf5c      	itt	pl
   d72e0:	2201      	movpl	r2, #1
   d72e2:	601a      	strpl	r2, [r3, #0]
   d72e4:	4b20      	ldr	r3, [pc, #128]	; (d7368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d72e6:	681a      	ldr	r2, [r3, #0]
   d72e8:	07d2      	lsls	r2, r2, #31
   d72ea:	bf5c      	itt	pl
   d72ec:	2201      	movpl	r2, #1
   d72ee:	601a      	strpl	r2, [r3, #0]
   d72f0:	4b1e      	ldr	r3, [pc, #120]	; (d736c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d72f2:	681a      	ldr	r2, [r3, #0]
   d72f4:	07d0      	lsls	r0, r2, #31
   d72f6:	bf5c      	itt	pl
   d72f8:	2201      	movpl	r2, #1
   d72fa:	601a      	strpl	r2, [r3, #0]
   d72fc:	4b1c      	ldr	r3, [pc, #112]	; (d7370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d72fe:	681a      	ldr	r2, [r3, #0]
   d7300:	07d1      	lsls	r1, r2, #31
   d7302:	bf5c      	itt	pl
   d7304:	2201      	movpl	r2, #1
   d7306:	601a      	strpl	r2, [r3, #0]
   d7308:	4b1a      	ldr	r3, [pc, #104]	; (d7374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d730a:	681a      	ldr	r2, [r3, #0]
   d730c:	07d2      	lsls	r2, r2, #31
   d730e:	bf5c      	itt	pl
   d7310:	2201      	movpl	r2, #1
   d7312:	601a      	strpl	r2, [r3, #0]
   d7314:	4b18      	ldr	r3, [pc, #96]	; (d7378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7316:	681a      	ldr	r2, [r3, #0]
   d7318:	07d0      	lsls	r0, r2, #31
   d731a:	bf5c      	itt	pl
   d731c:	2201      	movpl	r2, #1
   d731e:	601a      	strpl	r2, [r3, #0]
   d7320:	4b16      	ldr	r3, [pc, #88]	; (d737c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7322:	681a      	ldr	r2, [r3, #0]
   d7324:	07d1      	lsls	r1, r2, #31
   d7326:	bf5c      	itt	pl
   d7328:	2201      	movpl	r2, #1
   d732a:	601a      	strpl	r2, [r3, #0]
   d732c:	4b14      	ldr	r3, [pc, #80]	; (d7380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d732e:	681a      	ldr	r2, [r3, #0]
   d7330:	07d2      	lsls	r2, r2, #31
   d7332:	bf5c      	itt	pl
   d7334:	2201      	movpl	r2, #1
   d7336:	601a      	strpl	r2, [r3, #0]
   d7338:	4b12      	ldr	r3, [pc, #72]	; (d7384 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d733a:	681a      	ldr	r2, [r3, #0]
   d733c:	07d0      	lsls	r0, r2, #31
   d733e:	bf5c      	itt	pl
   d7340:	2201      	movpl	r2, #1
   d7342:	601a      	strpl	r2, [r3, #0]
   d7344:	4b10      	ldr	r3, [pc, #64]	; (d7388 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7346:	681a      	ldr	r2, [r3, #0]
   d7348:	07d1      	lsls	r1, r2, #31
   d734a:	bf5c      	itt	pl
   d734c:	2201      	movpl	r2, #1
   d734e:	601a      	strpl	r2, [r3, #0]
   d7350:	4b0e      	ldr	r3, [pc, #56]	; (d738c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7352:	681a      	ldr	r2, [r3, #0]
   d7354:	07d2      	lsls	r2, r2, #31
   d7356:	bf5c      	itt	pl
   d7358:	2201      	movpl	r2, #1
   d735a:	601a      	strpl	r2, [r3, #0]
   d735c:	4770      	bx	lr
   d735e:	bf00      	nop
   d7360:	2003e7cc 	.word	0x2003e7cc
   d7364:	2003e7c8 	.word	0x2003e7c8
   d7368:	2003e7c4 	.word	0x2003e7c4
   d736c:	2003e7c0 	.word	0x2003e7c0
   d7370:	2003e7bc 	.word	0x2003e7bc
   d7374:	2003e7b8 	.word	0x2003e7b8
   d7378:	2003e7b4 	.word	0x2003e7b4
   d737c:	2003e7b0 	.word	0x2003e7b0
   d7380:	2003e7ac 	.word	0x2003e7ac
   d7384:	2003e7a8 	.word	0x2003e7a8
   d7388:	2003e7a4 	.word	0x2003e7a4
   d738c:	2003e7a0 	.word	0x2003e7a0

000d7390 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7390:	4b18      	ldr	r3, [pc, #96]	; (d73f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7392:	681a      	ldr	r2, [r3, #0]
   d7394:	07d1      	lsls	r1, r2, #31
   d7396:	bf5c      	itt	pl
   d7398:	2201      	movpl	r2, #1
   d739a:	601a      	strpl	r2, [r3, #0]
   d739c:	4b16      	ldr	r3, [pc, #88]	; (d73f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d739e:	681a      	ldr	r2, [r3, #0]
   d73a0:	07d2      	lsls	r2, r2, #31
   d73a2:	bf5c      	itt	pl
   d73a4:	2201      	movpl	r2, #1
   d73a6:	601a      	strpl	r2, [r3, #0]
   d73a8:	4b14      	ldr	r3, [pc, #80]	; (d73fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d73aa:	681a      	ldr	r2, [r3, #0]
   d73ac:	07d0      	lsls	r0, r2, #31
   d73ae:	bf5c      	itt	pl
   d73b0:	2201      	movpl	r2, #1
   d73b2:	601a      	strpl	r2, [r3, #0]
   d73b4:	4b12      	ldr	r3, [pc, #72]	; (d7400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d73b6:	681a      	ldr	r2, [r3, #0]
   d73b8:	07d1      	lsls	r1, r2, #31
   d73ba:	bf5c      	itt	pl
   d73bc:	2201      	movpl	r2, #1
   d73be:	601a      	strpl	r2, [r3, #0]
   d73c0:	4b10      	ldr	r3, [pc, #64]	; (d7404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d73c2:	681a      	ldr	r2, [r3, #0]
   d73c4:	07d2      	lsls	r2, r2, #31
   d73c6:	bf5c      	itt	pl
   d73c8:	2201      	movpl	r2, #1
   d73ca:	601a      	strpl	r2, [r3, #0]
   d73cc:	4b0e      	ldr	r3, [pc, #56]	; (d7408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d73ce:	681a      	ldr	r2, [r3, #0]
   d73d0:	07d0      	lsls	r0, r2, #31
   d73d2:	bf5c      	itt	pl
   d73d4:	2201      	movpl	r2, #1
   d73d6:	601a      	strpl	r2, [r3, #0]
   d73d8:	4b0c      	ldr	r3, [pc, #48]	; (d740c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d73da:	681a      	ldr	r2, [r3, #0]
   d73dc:	07d1      	lsls	r1, r2, #31
   d73de:	bf5c      	itt	pl
   d73e0:	2201      	movpl	r2, #1
   d73e2:	601a      	strpl	r2, [r3, #0]
   d73e4:	4b0a      	ldr	r3, [pc, #40]	; (d7410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d73e6:	681a      	ldr	r2, [r3, #0]
   d73e8:	07d2      	lsls	r2, r2, #31
   d73ea:	bf5c      	itt	pl
   d73ec:	2201      	movpl	r2, #1
   d73ee:	601a      	strpl	r2, [r3, #0]
   d73f0:	4770      	bx	lr
   d73f2:	bf00      	nop
   d73f4:	2003e7ec 	.word	0x2003e7ec
   d73f8:	2003e7e8 	.word	0x2003e7e8
   d73fc:	2003e7e4 	.word	0x2003e7e4
   d7400:	2003e7e0 	.word	0x2003e7e0
   d7404:	2003e7dc 	.word	0x2003e7dc
   d7408:	2003e7d8 	.word	0x2003e7d8
   d740c:	2003e7d4 	.word	0x2003e7d4
   d7410:	2003e7d0 	.word	0x2003e7d0

000d7414 <fmod>:
   d7414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7418:	ed2d 8b02 	vpush	{d8}
   d741c:	b08b      	sub	sp, #44	; 0x2c
   d741e:	ec57 6b10 	vmov	r6, r7, d0
   d7422:	ec55 4b11 	vmov	r4, r5, d1
   d7426:	f000 f8e9 	bl	d75fc <__ieee754_fmod>
   d742a:	4b2e      	ldr	r3, [pc, #184]	; (d74e4 <fmod+0xd0>)
   d742c:	eeb0 8a40 	vmov.f32	s16, s0
   d7430:	eef0 8a60 	vmov.f32	s17, s1
   d7434:	f993 8000 	ldrsb.w	r8, [r3]
   d7438:	f1b8 3fff 	cmp.w	r8, #4294967295
   d743c:	d031      	beq.n	d74a2 <fmod+0x8e>
   d743e:	4622      	mov	r2, r4
   d7440:	462b      	mov	r3, r5
   d7442:	4620      	mov	r0, r4
   d7444:	4629      	mov	r1, r5
   d7446:	f001 f875 	bl	d8534 <__aeabi_dcmpun>
   d744a:	bb50      	cbnz	r0, d74a2 <fmod+0x8e>
   d744c:	4632      	mov	r2, r6
   d744e:	463b      	mov	r3, r7
   d7450:	4630      	mov	r0, r6
   d7452:	4639      	mov	r1, r7
   d7454:	f001 f86e 	bl	d8534 <__aeabi_dcmpun>
   d7458:	4681      	mov	r9, r0
   d745a:	bb10      	cbnz	r0, d74a2 <fmod+0x8e>
   d745c:	2200      	movs	r2, #0
   d745e:	2300      	movs	r3, #0
   d7460:	4620      	mov	r0, r4
   d7462:	4629      	mov	r1, r5
   d7464:	f001 f834 	bl	d84d0 <__aeabi_dcmpeq>
   d7468:	b1d8      	cbz	r0, d74a2 <fmod+0x8e>
   d746a:	4b1f      	ldr	r3, [pc, #124]	; (d74e8 <fmod+0xd4>)
   d746c:	f8cd 9020 	str.w	r9, [sp, #32]
   d7470:	2201      	movs	r2, #1
   d7472:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7476:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d747a:	e88d 000c 	stmia.w	sp, {r2, r3}
   d747e:	f1b8 0f00 	cmp.w	r8, #0
   d7482:	d117      	bne.n	d74b4 <fmod+0xa0>
   d7484:	e9cd 6706 	strd	r6, r7, [sp, #24]
   d7488:	4668      	mov	r0, sp
   d748a:	f000 fbf5 	bl	d7c78 <matherr>
   d748e:	b1e0      	cbz	r0, d74ca <fmod+0xb6>
   d7490:	9b08      	ldr	r3, [sp, #32]
   d7492:	bb0b      	cbnz	r3, d74d8 <fmod+0xc4>
   d7494:	ed9d 0b06 	vldr	d0, [sp, #24]
   d7498:	b00b      	add	sp, #44	; 0x2c
   d749a:	ecbd 8b02 	vpop	{d8}
   d749e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d74a2:	eeb0 0a48 	vmov.f32	s0, s16
   d74a6:	eef0 0a68 	vmov.f32	s1, s17
   d74aa:	b00b      	add	sp, #44	; 0x2c
   d74ac:	ecbd 8b02 	vpop	{d8}
   d74b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d74b4:	2200      	movs	r2, #0
   d74b6:	2300      	movs	r3, #0
   d74b8:	4610      	mov	r0, r2
   d74ba:	4619      	mov	r1, r3
   d74bc:	f000 feca 	bl	d8254 <__aeabi_ddiv>
   d74c0:	f1b8 0f02 	cmp.w	r8, #2
   d74c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d74c8:	d1de      	bne.n	d7488 <fmod+0x74>
   d74ca:	f7fe fa6b 	bl	d59a4 <__errno>
   d74ce:	2321      	movs	r3, #33	; 0x21
   d74d0:	6003      	str	r3, [r0, #0]
   d74d2:	9b08      	ldr	r3, [sp, #32]
   d74d4:	2b00      	cmp	r3, #0
   d74d6:	d0dd      	beq.n	d7494 <fmod+0x80>
   d74d8:	f7fe fa64 	bl	d59a4 <__errno>
   d74dc:	9b08      	ldr	r3, [sp, #32]
   d74de:	6003      	str	r3, [r0, #0]
   d74e0:	e7d8      	b.n	d7494 <fmod+0x80>
   d74e2:	bf00      	nop
   d74e4:	2003dff0 	.word	0x2003dff0
   d74e8:	000da974 	.word	0x000da974

000d74ec <log>:
   d74ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d74f0:	ed2d 8b02 	vpush	{d8}
   d74f4:	b08b      	sub	sp, #44	; 0x2c
   d74f6:	ec55 4b10 	vmov	r4, r5, d0
   d74fa:	f000 f9b9 	bl	d7870 <__ieee754_log>
   d74fe:	4b3a      	ldr	r3, [pc, #232]	; (d75e8 <log+0xfc>)
   d7500:	eeb0 8a40 	vmov.f32	s16, s0
   d7504:	eef0 8a60 	vmov.f32	s17, s1
   d7508:	f993 6000 	ldrsb.w	r6, [r3]
   d750c:	1c73      	adds	r3, r6, #1
   d750e:	d00d      	beq.n	d752c <log+0x40>
   d7510:	4622      	mov	r2, r4
   d7512:	462b      	mov	r3, r5
   d7514:	4620      	mov	r0, r4
   d7516:	4629      	mov	r1, r5
   d7518:	f001 f80c 	bl	d8534 <__aeabi_dcmpun>
   d751c:	b930      	cbnz	r0, d752c <log+0x40>
   d751e:	2200      	movs	r2, #0
   d7520:	2300      	movs	r3, #0
   d7522:	4620      	mov	r0, r4
   d7524:	4629      	mov	r1, r5
   d7526:	f000 fffb 	bl	d8520 <__aeabi_dcmpgt>
   d752a:	b140      	cbz	r0, d753e <log+0x52>
   d752c:	eeb0 0a48 	vmov.f32	s0, s16
   d7530:	eef0 0a68 	vmov.f32	s1, s17
   d7534:	b00b      	add	sp, #44	; 0x2c
   d7536:	ecbd 8b02 	vpop	{d8}
   d753a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d753e:	4b2b      	ldr	r3, [pc, #172]	; (d75ec <log+0x100>)
   d7540:	9008      	str	r0, [sp, #32]
   d7542:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d7546:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d754a:	9301      	str	r3, [sp, #4]
   d754c:	b9de      	cbnz	r6, d7586 <log+0x9a>
   d754e:	4f28      	ldr	r7, [pc, #160]	; (d75f0 <log+0x104>)
   d7550:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
   d7554:	4620      	mov	r0, r4
   d7556:	4629      	mov	r1, r5
   d7558:	2200      	movs	r2, #0
   d755a:	2300      	movs	r3, #0
   d755c:	e9cd 6706 	strd	r6, r7, [sp, #24]
   d7560:	f000 ffb6 	bl	d84d0 <__aeabi_dcmpeq>
   d7564:	2800      	cmp	r0, #0
   d7566:	d037      	beq.n	d75d8 <log+0xec>
   d7568:	2302      	movs	r3, #2
   d756a:	9300      	str	r3, [sp, #0]
   d756c:	4668      	mov	r0, sp
   d756e:	f000 fb83 	bl	d7c78 <matherr>
   d7572:	b1c8      	cbz	r0, d75a8 <log+0xbc>
   d7574:	9b08      	ldr	r3, [sp, #32]
   d7576:	b9e3      	cbnz	r3, d75b2 <log+0xc6>
   d7578:	ed9d 0b06 	vldr	d0, [sp, #24]
   d757c:	b00b      	add	sp, #44	; 0x2c
   d757e:	ecbd 8b02 	vpop	{d8}
   d7582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7586:	f8df 9070 	ldr.w	r9, [pc, #112]	; d75f8 <log+0x10c>
   d758a:	f04f 0800 	mov.w	r8, #0
   d758e:	4620      	mov	r0, r4
   d7590:	4629      	mov	r1, r5
   d7592:	2200      	movs	r2, #0
   d7594:	2300      	movs	r3, #0
   d7596:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d759a:	f000 ff99 	bl	d84d0 <__aeabi_dcmpeq>
   d759e:	b168      	cbz	r0, d75bc <log+0xd0>
   d75a0:	2302      	movs	r3, #2
   d75a2:	429e      	cmp	r6, r3
   d75a4:	9300      	str	r3, [sp, #0]
   d75a6:	d1e1      	bne.n	d756c <log+0x80>
   d75a8:	f7fe f9fc 	bl	d59a4 <__errno>
   d75ac:	2322      	movs	r3, #34	; 0x22
   d75ae:	6003      	str	r3, [r0, #0]
   d75b0:	e7e0      	b.n	d7574 <log+0x88>
   d75b2:	f7fe f9f7 	bl	d59a4 <__errno>
   d75b6:	9b08      	ldr	r3, [sp, #32]
   d75b8:	6003      	str	r3, [r0, #0]
   d75ba:	e7dd      	b.n	d7578 <log+0x8c>
   d75bc:	2301      	movs	r3, #1
   d75be:	2e02      	cmp	r6, #2
   d75c0:	9300      	str	r3, [sp, #0]
   d75c2:	d10b      	bne.n	d75dc <log+0xf0>
   d75c4:	f7fe f9ee 	bl	d59a4 <__errno>
   d75c8:	2321      	movs	r3, #33	; 0x21
   d75ca:	6003      	str	r3, [r0, #0]
   d75cc:	4809      	ldr	r0, [pc, #36]	; (d75f4 <log+0x108>)
   d75ce:	f000 fb57 	bl	d7c80 <nan>
   d75d2:	ed8d 0b06 	vstr	d0, [sp, #24]
   d75d6:	e7cd      	b.n	d7574 <log+0x88>
   d75d8:	2301      	movs	r3, #1
   d75da:	9300      	str	r3, [sp, #0]
   d75dc:	4668      	mov	r0, sp
   d75de:	f000 fb4b 	bl	d7c78 <matherr>
   d75e2:	2800      	cmp	r0, #0
   d75e4:	d1f2      	bne.n	d75cc <log+0xe0>
   d75e6:	e7ed      	b.n	d75c4 <log+0xd8>
   d75e8:	2003dff0 	.word	0x2003dff0
   d75ec:	000da97c 	.word	0x000da97c
   d75f0:	c7efffff 	.word	0xc7efffff
   d75f4:	000da978 	.word	0x000da978
   d75f8:	fff00000 	.word	0xfff00000

000d75fc <__ieee754_fmod>:
   d75fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7600:	ec53 2b11 	vmov	r2, r3, d1
   d7604:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
   d7608:	ea52 0009 	orrs.w	r0, r2, r9
   d760c:	ec55 4b10 	vmov	r4, r5, d0
   d7610:	d025      	beq.n	d765e <__ieee754_fmod+0x62>
   d7612:	f005 4600 	and.w	r6, r5, #2147483648	; 0x80000000
   d7616:	488f      	ldr	r0, [pc, #572]	; (d7854 <__ieee754_fmod+0x258>)
   d7618:	ea85 0b06 	eor.w	fp, r5, r6
   d761c:	4583      	cmp	fp, r0
   d761e:	dc1e      	bgt.n	d765e <__ieee754_fmod+0x62>
   d7620:	4250      	negs	r0, r2
   d7622:	4310      	orrs	r0, r2
   d7624:	f8df c244 	ldr.w	ip, [pc, #580]	; d786c <__ieee754_fmod+0x270>
   d7628:	ea49 70d0 	orr.w	r0, r9, r0, lsr #31
   d762c:	4560      	cmp	r0, ip
   d762e:	ee11 8a10 	vmov	r8, s2
   d7632:	d814      	bhi.n	d765e <__ieee754_fmod+0x62>
   d7634:	45cb      	cmp	fp, r9
   d7636:	461f      	mov	r7, r3
   d7638:	ee10 aa10 	vmov	sl, s0
   d763c:	ee11 ea10 	vmov	lr, s2
   d7640:	ee10 1a10 	vmov	r1, s0
   d7644:	dc17      	bgt.n	d7676 <__ieee754_fmod+0x7a>
   d7646:	db28      	blt.n	d769a <__ieee754_fmod+0x9e>
   d7648:	4294      	cmp	r4, r2
   d764a:	d326      	bcc.n	d769a <__ieee754_fmod+0x9e>
   d764c:	d113      	bne.n	d7676 <__ieee754_fmod+0x7a>
   d764e:	4b82      	ldr	r3, [pc, #520]	; (d7858 <__ieee754_fmod+0x25c>)
   d7650:	0ff6      	lsrs	r6, r6, #31
   d7652:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   d7656:	ed93 0b00 	vldr	d0, [r3]
   d765a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d765e:	4620      	mov	r0, r4
   d7660:	4629      	mov	r1, r5
   d7662:	f000 fccd 	bl	d8000 <__aeabi_dmul>
   d7666:	4602      	mov	r2, r0
   d7668:	460b      	mov	r3, r1
   d766a:	f000 fdf3 	bl	d8254 <__aeabi_ddiv>
   d766e:	ec41 0b10 	vmov	d0, r0, r1
   d7672:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7676:	f5bb 1f80 	cmp.w	fp, #1048576	; 0x100000
   d767a:	da12      	bge.n	d76a2 <__ieee754_fmod+0xa6>
   d767c:	f1bb 0f00 	cmp.w	fp, #0
   d7680:	f040 80a7 	bne.w	d77d2 <__ieee754_fmod+0x1d6>
   d7684:	f1ba 0f00 	cmp.w	sl, #0
   d7688:	4653      	mov	r3, sl
   d768a:	4874      	ldr	r0, [pc, #464]	; (d785c <__ieee754_fmod+0x260>)
   d768c:	dd0d      	ble.n	d76aa <__ieee754_fmod+0xae>
   d768e:	005b      	lsls	r3, r3, #1
   d7690:	2b00      	cmp	r3, #0
   d7692:	f100 30ff 	add.w	r0, r0, #4294967295
   d7696:	dcfa      	bgt.n	d768e <__ieee754_fmod+0x92>
   d7698:	e007      	b.n	d76aa <__ieee754_fmod+0xae>
   d769a:	ec45 4b10 	vmov	d0, r4, r5
   d769e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d76a2:	ea4f 502b 	mov.w	r0, fp, asr #20
   d76a6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
   d76aa:	f5b9 1f80 	cmp.w	r9, #1048576	; 0x100000
   d76ae:	da0f      	bge.n	d76d0 <__ieee754_fmod+0xd4>
   d76b0:	f1b9 0f00 	cmp.w	r9, #0
   d76b4:	f040 80a7 	bne.w	d7806 <__ieee754_fmod+0x20a>
   d76b8:	f1b8 0f00 	cmp.w	r8, #0
   d76bc:	4643      	mov	r3, r8
   d76be:	f8df c19c 	ldr.w	ip, [pc, #412]	; d785c <__ieee754_fmod+0x260>
   d76c2:	dd09      	ble.n	d76d8 <__ieee754_fmod+0xdc>
   d76c4:	005b      	lsls	r3, r3, #1
   d76c6:	2b00      	cmp	r3, #0
   d76c8:	f10c 3cff 	add.w	ip, ip, #4294967295
   d76cc:	dcfa      	bgt.n	d76c4 <__ieee754_fmod+0xc8>
   d76ce:	e003      	b.n	d76d8 <__ieee754_fmod+0xdc>
   d76d0:	ea4f 5c29 	mov.w	ip, r9, asr #20
   d76d4:	f2ac 3cff 	subw	ip, ip, #1023	; 0x3ff
   d76d8:	4b61      	ldr	r3, [pc, #388]	; (d7860 <__ieee754_fmod+0x264>)
   d76da:	4298      	cmp	r0, r3
   d76dc:	db5b      	blt.n	d7796 <__ieee754_fmod+0x19a>
   d76de:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d76e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d76e6:	4a5e      	ldr	r2, [pc, #376]	; (d7860 <__ieee754_fmod+0x264>)
   d76e8:	4594      	cmp	ip, r2
   d76ea:	db63      	blt.n	d77b4 <__ieee754_fmod+0x1b8>
   d76ec:	f3c7 0513 	ubfx	r5, r7, #0, #20
   d76f0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d76f4:	ebcc 0000 	rsb	r0, ip, r0
   d76f8:	e007      	b.n	d770a <__ieee754_fmod+0x10e>
   d76fa:	ea52 0304 	orrs.w	r3, r2, r4
   d76fe:	d013      	beq.n	d7728 <__ieee754_fmod+0x12c>
   d7700:	0fe3      	lsrs	r3, r4, #31
   d7702:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   d7706:	0061      	lsls	r1, r4, #1
   d7708:	3801      	subs	r0, #1
   d770a:	ebce 0401 	rsb	r4, lr, r1
   d770e:	1b5a      	subs	r2, r3, r5
   d7710:	b190      	cbz	r0, d7738 <__ieee754_fmod+0x13c>
   d7712:	4571      	cmp	r1, lr
   d7714:	bf38      	it	cc
   d7716:	f102 32ff 	addcc.w	r2, r2, #4294967295
   d771a:	2a00      	cmp	r2, #0
   d771c:	daed      	bge.n	d76fa <__ieee754_fmod+0xfe>
   d771e:	0fca      	lsrs	r2, r1, #31
   d7720:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d7724:	0049      	lsls	r1, r1, #1
   d7726:	e7ef      	b.n	d7708 <__ieee754_fmod+0x10c>
   d7728:	4b4b      	ldr	r3, [pc, #300]	; (d7858 <__ieee754_fmod+0x25c>)
   d772a:	0ff6      	lsrs	r6, r6, #31
   d772c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   d7730:	ed96 0b00 	vldr	d0, [r6]
   d7734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7738:	4571      	cmp	r1, lr
   d773a:	4615      	mov	r5, r2
   d773c:	bf38      	it	cc
   d773e:	f102 35ff 	addcc.w	r5, r2, #4294967295
   d7742:	2d00      	cmp	r5, #0
   d7744:	bfac      	ite	ge
   d7746:	ebce 0101 	rsbge	r1, lr, r1
   d774a:	461d      	movlt	r5, r3
   d774c:	ea55 0301 	orrs.w	r3, r5, r1
   d7750:	d0ea      	beq.n	d7728 <__ieee754_fmod+0x12c>
   d7752:	4a44      	ldr	r2, [pc, #272]	; (d7864 <__ieee754_fmod+0x268>)
   d7754:	4295      	cmp	r5, r2
   d7756:	dc08      	bgt.n	d776a <__ieee754_fmod+0x16e>
   d7758:	0fcb      	lsrs	r3, r1, #31
   d775a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
   d775e:	4295      	cmp	r5, r2
   d7760:	f10c 3cff 	add.w	ip, ip, #4294967295
   d7764:	ea4f 0141 	mov.w	r1, r1, lsl #1
   d7768:	ddf6      	ble.n	d7758 <__ieee754_fmod+0x15c>
   d776a:	4b3d      	ldr	r3, [pc, #244]	; (d7860 <__ieee754_fmod+0x264>)
   d776c:	459c      	cmp	ip, r3
   d776e:	da54      	bge.n	d781a <__ieee754_fmod+0x21e>
   d7770:	4a3b      	ldr	r2, [pc, #236]	; (d7860 <__ieee754_fmod+0x264>)
   d7772:	ebcc 0202 	rsb	r2, ip, r2
   d7776:	2a14      	cmp	r2, #20
   d7778:	dc5b      	bgt.n	d7832 <__ieee754_fmod+0x236>
   d777a:	f1c2 0320 	rsb	r3, r2, #32
   d777e:	fa05 f303 	lsl.w	r3, r5, r3
   d7782:	40d1      	lsrs	r1, r2
   d7784:	430b      	orrs	r3, r1
   d7786:	4115      	asrs	r5, r2
   d7788:	ea45 0106 	orr.w	r1, r5, r6
   d778c:	4618      	mov	r0, r3
   d778e:	ec41 0b10 	vmov	d0, r0, r1
   d7792:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7796:	4932      	ldr	r1, [pc, #200]	; (d7860 <__ieee754_fmod+0x264>)
   d7798:	1a09      	subs	r1, r1, r0
   d779a:	291f      	cmp	r1, #31
   d779c:	dc2d      	bgt.n	d77fa <__ieee754_fmod+0x1fe>
   d779e:	f1c1 0320 	rsb	r3, r1, #32
   d77a2:	fa0b fb01 	lsl.w	fp, fp, r1
   d77a6:	fa2a f303 	lsr.w	r3, sl, r3
   d77aa:	ea43 030b 	orr.w	r3, r3, fp
   d77ae:	fa0a f101 	lsl.w	r1, sl, r1
   d77b2:	e798      	b.n	d76e6 <__ieee754_fmod+0xea>
   d77b4:	4c2a      	ldr	r4, [pc, #168]	; (d7860 <__ieee754_fmod+0x264>)
   d77b6:	ebcc 0404 	rsb	r4, ip, r4
   d77ba:	2c1f      	cmp	r4, #31
   d77bc:	dc15      	bgt.n	d77ea <__ieee754_fmod+0x1ee>
   d77be:	f1c4 0220 	rsb	r2, r4, #32
   d77c2:	fa09 f504 	lsl.w	r5, r9, r4
   d77c6:	fa28 f202 	lsr.w	r2, r8, r2
   d77ca:	4315      	orrs	r5, r2
   d77cc:	fa08 fe04 	lsl.w	lr, r8, r4
   d77d0:	e790      	b.n	d76f4 <__ieee754_fmod+0xf8>
   d77d2:	ea4f 23cb 	mov.w	r3, fp, lsl #11
   d77d6:	2b00      	cmp	r3, #0
   d77d8:	4821      	ldr	r0, [pc, #132]	; (d7860 <__ieee754_fmod+0x264>)
   d77da:	f77f af66 	ble.w	d76aa <__ieee754_fmod+0xae>
   d77de:	005b      	lsls	r3, r3, #1
   d77e0:	2b00      	cmp	r3, #0
   d77e2:	f100 30ff 	add.w	r0, r0, #4294967295
   d77e6:	dcfa      	bgt.n	d77de <__ieee754_fmod+0x1e2>
   d77e8:	e75f      	b.n	d76aa <__ieee754_fmod+0xae>
   d77ea:	4d1f      	ldr	r5, [pc, #124]	; (d7868 <__ieee754_fmod+0x26c>)
   d77ec:	ebcc 0505 	rsb	r5, ip, r5
   d77f0:	fa08 f505 	lsl.w	r5, r8, r5
   d77f4:	f04f 0e00 	mov.w	lr, #0
   d77f8:	e77c      	b.n	d76f4 <__ieee754_fmod+0xf8>
   d77fa:	4b1b      	ldr	r3, [pc, #108]	; (d7868 <__ieee754_fmod+0x26c>)
   d77fc:	1a1b      	subs	r3, r3, r0
   d77fe:	fa0a f303 	lsl.w	r3, sl, r3
   d7802:	2100      	movs	r1, #0
   d7804:	e76f      	b.n	d76e6 <__ieee754_fmod+0xea>
   d7806:	f8df c058 	ldr.w	ip, [pc, #88]	; d7860 <__ieee754_fmod+0x264>
   d780a:	ea4f 23c9 	mov.w	r3, r9, lsl #11
   d780e:	005b      	lsls	r3, r3, #1
   d7810:	2b00      	cmp	r3, #0
   d7812:	f10c 3cff 	add.w	ip, ip, #4294967295
   d7816:	dcfa      	bgt.n	d780e <__ieee754_fmod+0x212>
   d7818:	e75e      	b.n	d76d8 <__ieee754_fmod+0xdc>
   d781a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
   d781e:	432e      	orrs	r6, r5
   d7820:	f20c 3cff 	addw	ip, ip, #1023	; 0x3ff
   d7824:	ea46 530c 	orr.w	r3, r6, ip, lsl #20
   d7828:	460a      	mov	r2, r1
   d782a:	ec43 2b10 	vmov	d0, r2, r3
   d782e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7832:	2a1f      	cmp	r2, #31
   d7834:	dc07      	bgt.n	d7846 <__ieee754_fmod+0x24a>
   d7836:	f1c2 0320 	rsb	r3, r2, #32
   d783a:	409d      	lsls	r5, r3
   d783c:	40d1      	lsrs	r1, r2
   d783e:	ea45 0301 	orr.w	r3, r5, r1
   d7842:	4635      	mov	r5, r6
   d7844:	e7a0      	b.n	d7788 <__ieee754_fmod+0x18c>
   d7846:	4b08      	ldr	r3, [pc, #32]	; (d7868 <__ieee754_fmod+0x26c>)
   d7848:	ebcc 0303 	rsb	r3, ip, r3
   d784c:	fa45 f303 	asr.w	r3, r5, r3
   d7850:	4635      	mov	r5, r6
   d7852:	e799      	b.n	d7788 <__ieee754_fmod+0x18c>
   d7854:	7fefffff 	.word	0x7fefffff
   d7858:	000da980 	.word	0x000da980
   d785c:	fffffbed 	.word	0xfffffbed
   d7860:	fffffc02 	.word	0xfffffc02
   d7864:	000fffff 	.word	0x000fffff
   d7868:	fffffbe2 	.word	0xfffffbe2
   d786c:	7ff00000 	.word	0x7ff00000

000d7870 <__ieee754_log>:
   d7870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7874:	ec51 0b10 	vmov	r0, r1, d0
   d7878:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d787c:	b085      	sub	sp, #20
   d787e:	460b      	mov	r3, r1
   d7880:	da59      	bge.n	d7936 <__ieee754_log+0xc6>
   d7882:	ee10 2a10 	vmov	r2, s0
   d7886:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
   d788a:	4322      	orrs	r2, r4
   d788c:	f000 80f8 	beq.w	d7a80 <__ieee754_log+0x210>
   d7890:	2900      	cmp	r1, #0
   d7892:	f2c0 8180 	blt.w	d7b96 <__ieee754_log+0x326>
   d7896:	2200      	movs	r2, #0
   d7898:	4bdd      	ldr	r3, [pc, #884]	; (d7c10 <__ieee754_log+0x3a0>)
   d789a:	4cde      	ldr	r4, [pc, #888]	; (d7c14 <__ieee754_log+0x3a4>)
   d789c:	f000 fbb0 	bl	d8000 <__aeabi_dmul>
   d78a0:	460b      	mov	r3, r1
   d78a2:	42a3      	cmp	r3, r4
   d78a4:	f06f 0235 	mvn.w	r2, #53	; 0x35
   d78a8:	dc4a      	bgt.n	d7940 <__ieee754_log+0xd0>
   d78aa:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d78ae:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
   d78b2:	f604 7464 	addw	r4, r4, #3940	; 0xf64
   d78b6:	f404 1680 	and.w	r6, r4, #1048576	; 0x100000
   d78ba:	f086 547f 	eor.w	r4, r6, #1069547520	; 0x3fc00000
   d78be:	151b      	asrs	r3, r3, #20
   d78c0:	f484 1440 	eor.w	r4, r4, #3145728	; 0x300000
   d78c4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d78c8:	ea44 0105 	orr.w	r1, r4, r5
   d78cc:	189c      	adds	r4, r3, r2
   d78ce:	2200      	movs	r2, #0
   d78d0:	4bd1      	ldr	r3, [pc, #836]	; (d7c18 <__ieee754_log+0x3a8>)
   d78d2:	f000 f9e1 	bl	d7c98 <__aeabi_dsub>
   d78d6:	1cab      	adds	r3, r5, #2
   d78d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d78dc:	2b02      	cmp	r3, #2
   d78de:	eb04 5416 	add.w	r4, r4, r6, lsr #20
   d78e2:	4682      	mov	sl, r0
   d78e4:	468b      	mov	fp, r1
   d78e6:	f04f 0200 	mov.w	r2, #0
   d78ea:	dc32      	bgt.n	d7952 <__ieee754_log+0xe2>
   d78ec:	2300      	movs	r3, #0
   d78ee:	f000 fdef 	bl	d84d0 <__aeabi_dcmpeq>
   d78f2:	2800      	cmp	r0, #0
   d78f4:	f000 80cf 	beq.w	d7a96 <__ieee754_log+0x226>
   d78f8:	2c00      	cmp	r4, #0
   d78fa:	f000 8158 	beq.w	d7bae <__ieee754_log+0x33e>
   d78fe:	4620      	mov	r0, r4
   d7900:	f000 fb18 	bl	d7f34 <__aeabi_i2d>
   d7904:	a3ac      	add	r3, pc, #688	; (adr r3, d7bb8 <__ieee754_log+0x348>)
   d7906:	e9d3 2300 	ldrd	r2, r3, [r3]
   d790a:	4606      	mov	r6, r0
   d790c:	460f      	mov	r7, r1
   d790e:	f000 fb77 	bl	d8000 <__aeabi_dmul>
   d7912:	a3ab      	add	r3, pc, #684	; (adr r3, d7bc0 <__ieee754_log+0x350>)
   d7914:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7918:	4604      	mov	r4, r0
   d791a:	460d      	mov	r5, r1
   d791c:	4630      	mov	r0, r6
   d791e:	4639      	mov	r1, r7
   d7920:	f000 fb6e 	bl	d8000 <__aeabi_dmul>
   d7924:	4602      	mov	r2, r0
   d7926:	460b      	mov	r3, r1
   d7928:	4620      	mov	r0, r4
   d792a:	4629      	mov	r1, r5
   d792c:	f000 f9b6 	bl	d7c9c <__adddf3>
   d7930:	ec41 0b10 	vmov	d0, r0, r1
   d7934:	e00a      	b.n	d794c <__ieee754_log+0xdc>
   d7936:	4cb7      	ldr	r4, [pc, #732]	; (d7c14 <__ieee754_log+0x3a4>)
   d7938:	42a3      	cmp	r3, r4
   d793a:	f04f 0200 	mov.w	r2, #0
   d793e:	ddb4      	ble.n	d78aa <__ieee754_log+0x3a>
   d7940:	4602      	mov	r2, r0
   d7942:	460b      	mov	r3, r1
   d7944:	f000 f9aa 	bl	d7c9c <__adddf3>
   d7948:	ec41 0b10 	vmov	d0, r0, r1
   d794c:	b005      	add	sp, #20
   d794e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d7956:	f000 f9a1 	bl	d7c9c <__adddf3>
   d795a:	4602      	mov	r2, r0
   d795c:	460b      	mov	r3, r1
   d795e:	4650      	mov	r0, sl
   d7960:	4659      	mov	r1, fp
   d7962:	f000 fc77 	bl	d8254 <__aeabi_ddiv>
   d7966:	4606      	mov	r6, r0
   d7968:	4620      	mov	r0, r4
   d796a:	460f      	mov	r7, r1
   d796c:	f000 fae2 	bl	d7f34 <__aeabi_i2d>
   d7970:	4632      	mov	r2, r6
   d7972:	e9cd 0100 	strd	r0, r1, [sp]
   d7976:	463b      	mov	r3, r7
   d7978:	4630      	mov	r0, r6
   d797a:	4639      	mov	r1, r7
   d797c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   d7980:	f000 fb3e 	bl	d8000 <__aeabi_dmul>
   d7984:	4602      	mov	r2, r0
   d7986:	460b      	mov	r3, r1
   d7988:	4680      	mov	r8, r0
   d798a:	4689      	mov	r9, r1
   d798c:	f000 fb38 	bl	d8000 <__aeabi_dmul>
   d7990:	a38d      	add	r3, pc, #564	; (adr r3, d7bc8 <__ieee754_log+0x358>)
   d7992:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7996:	4606      	mov	r6, r0
   d7998:	460f      	mov	r7, r1
   d799a:	f000 fb31 	bl	d8000 <__aeabi_dmul>
   d799e:	a38c      	add	r3, pc, #560	; (adr r3, d7bd0 <__ieee754_log+0x360>)
   d79a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79a4:	f000 f97a 	bl	d7c9c <__adddf3>
   d79a8:	4632      	mov	r2, r6
   d79aa:	463b      	mov	r3, r7
   d79ac:	f000 fb28 	bl	d8000 <__aeabi_dmul>
   d79b0:	a389      	add	r3, pc, #548	; (adr r3, d7bd8 <__ieee754_log+0x368>)
   d79b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79b6:	f000 f971 	bl	d7c9c <__adddf3>
   d79ba:	4632      	mov	r2, r6
   d79bc:	463b      	mov	r3, r7
   d79be:	f000 fb1f 	bl	d8000 <__aeabi_dmul>
   d79c2:	a387      	add	r3, pc, #540	; (adr r3, d7be0 <__ieee754_log+0x370>)
   d79c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79c8:	f000 f968 	bl	d7c9c <__adddf3>
   d79cc:	4642      	mov	r2, r8
   d79ce:	464b      	mov	r3, r9
   d79d0:	f000 fb16 	bl	d8000 <__aeabi_dmul>
   d79d4:	a384      	add	r3, pc, #528	; (adr r3, d7be8 <__ieee754_log+0x378>)
   d79d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79da:	4680      	mov	r8, r0
   d79dc:	4689      	mov	r9, r1
   d79de:	4630      	mov	r0, r6
   d79e0:	4639      	mov	r1, r7
   d79e2:	f000 fb0d 	bl	d8000 <__aeabi_dmul>
   d79e6:	a382      	add	r3, pc, #520	; (adr r3, d7bf0 <__ieee754_log+0x380>)
   d79e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79ec:	f000 f956 	bl	d7c9c <__adddf3>
   d79f0:	4632      	mov	r2, r6
   d79f2:	463b      	mov	r3, r7
   d79f4:	f000 fb04 	bl	d8000 <__aeabi_dmul>
   d79f8:	a37f      	add	r3, pc, #508	; (adr r3, d7bf8 <__ieee754_log+0x388>)
   d79fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d79fe:	f000 f94d 	bl	d7c9c <__adddf3>
   d7a02:	4632      	mov	r2, r6
   d7a04:	463b      	mov	r3, r7
   d7a06:	f000 fafb 	bl	d8000 <__aeabi_dmul>
   d7a0a:	460b      	mov	r3, r1
   d7a0c:	4602      	mov	r2, r0
   d7a0e:	4649      	mov	r1, r9
   d7a10:	4640      	mov	r0, r8
   d7a12:	f000 f943 	bl	d7c9c <__adddf3>
   d7a16:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
   d7a1a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
   d7a1e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
   d7a22:	3551      	adds	r5, #81	; 0x51
   d7a24:	431d      	orrs	r5, r3
   d7a26:	2d00      	cmp	r5, #0
   d7a28:	4680      	mov	r8, r0
   d7a2a:	4689      	mov	r9, r1
   d7a2c:	dd5c      	ble.n	d7ae8 <__ieee754_log+0x278>
   d7a2e:	2200      	movs	r2, #0
   d7a30:	4b7a      	ldr	r3, [pc, #488]	; (d7c1c <__ieee754_log+0x3ac>)
   d7a32:	4650      	mov	r0, sl
   d7a34:	4659      	mov	r1, fp
   d7a36:	f000 fae3 	bl	d8000 <__aeabi_dmul>
   d7a3a:	4652      	mov	r2, sl
   d7a3c:	465b      	mov	r3, fp
   d7a3e:	f000 fadf 	bl	d8000 <__aeabi_dmul>
   d7a42:	4606      	mov	r6, r0
   d7a44:	460f      	mov	r7, r1
   d7a46:	2c00      	cmp	r4, #0
   d7a48:	d16e      	bne.n	d7b28 <__ieee754_log+0x2b8>
   d7a4a:	4632      	mov	r2, r6
   d7a4c:	463b      	mov	r3, r7
   d7a4e:	4640      	mov	r0, r8
   d7a50:	4649      	mov	r1, r9
   d7a52:	f000 f923 	bl	d7c9c <__adddf3>
   d7a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7a5a:	f000 fad1 	bl	d8000 <__aeabi_dmul>
   d7a5e:	4602      	mov	r2, r0
   d7a60:	460b      	mov	r3, r1
   d7a62:	4630      	mov	r0, r6
   d7a64:	4639      	mov	r1, r7
   d7a66:	f000 f917 	bl	d7c98 <__aeabi_dsub>
   d7a6a:	4602      	mov	r2, r0
   d7a6c:	460b      	mov	r3, r1
   d7a6e:	4650      	mov	r0, sl
   d7a70:	4659      	mov	r1, fp
   d7a72:	f000 f911 	bl	d7c98 <__aeabi_dsub>
   d7a76:	ec41 0b10 	vmov	d0, r0, r1
   d7a7a:	b005      	add	sp, #20
   d7a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a80:	2200      	movs	r2, #0
   d7a82:	2300      	movs	r3, #0
   d7a84:	2000      	movs	r0, #0
   d7a86:	4966      	ldr	r1, [pc, #408]	; (d7c20 <__ieee754_log+0x3b0>)
   d7a88:	f000 fbe4 	bl	d8254 <__aeabi_ddiv>
   d7a8c:	ec41 0b10 	vmov	d0, r0, r1
   d7a90:	b005      	add	sp, #20
   d7a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a96:	a35a      	add	r3, pc, #360	; (adr r3, d7c00 <__ieee754_log+0x390>)
   d7a98:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7a9c:	4650      	mov	r0, sl
   d7a9e:	4659      	mov	r1, fp
   d7aa0:	f000 faae 	bl	d8000 <__aeabi_dmul>
   d7aa4:	4602      	mov	r2, r0
   d7aa6:	460b      	mov	r3, r1
   d7aa8:	2000      	movs	r0, #0
   d7aaa:	495c      	ldr	r1, [pc, #368]	; (d7c1c <__ieee754_log+0x3ac>)
   d7aac:	f000 f8f4 	bl	d7c98 <__aeabi_dsub>
   d7ab0:	4652      	mov	r2, sl
   d7ab2:	4606      	mov	r6, r0
   d7ab4:	460f      	mov	r7, r1
   d7ab6:	465b      	mov	r3, fp
   d7ab8:	4650      	mov	r0, sl
   d7aba:	4659      	mov	r1, fp
   d7abc:	f000 faa0 	bl	d8000 <__aeabi_dmul>
   d7ac0:	4602      	mov	r2, r0
   d7ac2:	460b      	mov	r3, r1
   d7ac4:	4630      	mov	r0, r6
   d7ac6:	4639      	mov	r1, r7
   d7ac8:	f000 fa9a 	bl	d8000 <__aeabi_dmul>
   d7acc:	4606      	mov	r6, r0
   d7ace:	460f      	mov	r7, r1
   d7ad0:	2c00      	cmp	r4, #0
   d7ad2:	f040 80a7 	bne.w	d7c24 <__ieee754_log+0x3b4>
   d7ad6:	4602      	mov	r2, r0
   d7ad8:	460b      	mov	r3, r1
   d7ada:	4650      	mov	r0, sl
   d7adc:	4659      	mov	r1, fp
   d7ade:	f000 f8db 	bl	d7c98 <__aeabi_dsub>
   d7ae2:	ec41 0b10 	vmov	d0, r0, r1
   d7ae6:	e731      	b.n	d794c <__ieee754_log+0xdc>
   d7ae8:	2c00      	cmp	r4, #0
   d7aea:	f000 80af 	beq.w	d7c4c <__ieee754_log+0x3dc>
   d7aee:	a332      	add	r3, pc, #200	; (adr r3, d7bb8 <__ieee754_log+0x348>)
   d7af0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7af4:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7af8:	f000 fa82 	bl	d8000 <__aeabi_dmul>
   d7afc:	4642      	mov	r2, r8
   d7afe:	464b      	mov	r3, r9
   d7b00:	4604      	mov	r4, r0
   d7b02:	460d      	mov	r5, r1
   d7b04:	4650      	mov	r0, sl
   d7b06:	4659      	mov	r1, fp
   d7b08:	f000 f8c6 	bl	d7c98 <__aeabi_dsub>
   d7b0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7b10:	f000 fa76 	bl	d8000 <__aeabi_dmul>
   d7b14:	a32a      	add	r3, pc, #168	; (adr r3, d7bc0 <__ieee754_log+0x350>)
   d7b16:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b1a:	4606      	mov	r6, r0
   d7b1c:	460f      	mov	r7, r1
   d7b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7b22:	f000 fa6d 	bl	d8000 <__aeabi_dmul>
   d7b26:	e021      	b.n	d7b6c <__ieee754_log+0x2fc>
   d7b28:	a323      	add	r3, pc, #140	; (adr r3, d7bb8 <__ieee754_log+0x348>)
   d7b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7b32:	f000 fa65 	bl	d8000 <__aeabi_dmul>
   d7b36:	4632      	mov	r2, r6
   d7b38:	463b      	mov	r3, r7
   d7b3a:	4604      	mov	r4, r0
   d7b3c:	460d      	mov	r5, r1
   d7b3e:	4640      	mov	r0, r8
   d7b40:	4649      	mov	r1, r9
   d7b42:	f000 f8ab 	bl	d7c9c <__adddf3>
   d7b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7b4a:	f000 fa59 	bl	d8000 <__aeabi_dmul>
   d7b4e:	a31c      	add	r3, pc, #112	; (adr r3, d7bc0 <__ieee754_log+0x350>)
   d7b50:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7b54:	4680      	mov	r8, r0
   d7b56:	4689      	mov	r9, r1
   d7b58:	e9dd 0100 	ldrd	r0, r1, [sp]
   d7b5c:	f000 fa50 	bl	d8000 <__aeabi_dmul>
   d7b60:	4602      	mov	r2, r0
   d7b62:	460b      	mov	r3, r1
   d7b64:	4640      	mov	r0, r8
   d7b66:	4649      	mov	r1, r9
   d7b68:	f000 f898 	bl	d7c9c <__adddf3>
   d7b6c:	4602      	mov	r2, r0
   d7b6e:	460b      	mov	r3, r1
   d7b70:	4630      	mov	r0, r6
   d7b72:	4639      	mov	r1, r7
   d7b74:	f000 f890 	bl	d7c98 <__aeabi_dsub>
   d7b78:	4652      	mov	r2, sl
   d7b7a:	465b      	mov	r3, fp
   d7b7c:	f000 f88c 	bl	d7c98 <__aeabi_dsub>
   d7b80:	4602      	mov	r2, r0
   d7b82:	460b      	mov	r3, r1
   d7b84:	4620      	mov	r0, r4
   d7b86:	4629      	mov	r1, r5
   d7b88:	f000 f886 	bl	d7c98 <__aeabi_dsub>
   d7b8c:	ec41 0b10 	vmov	d0, r0, r1
   d7b90:	b005      	add	sp, #20
   d7b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b96:	ee10 2a10 	vmov	r2, s0
   d7b9a:	460b      	mov	r3, r1
   d7b9c:	f000 f87c 	bl	d7c98 <__aeabi_dsub>
   d7ba0:	2200      	movs	r2, #0
   d7ba2:	2300      	movs	r3, #0
   d7ba4:	f000 fb56 	bl	d8254 <__aeabi_ddiv>
   d7ba8:	ec41 0b10 	vmov	d0, r0, r1
   d7bac:	e6ce      	b.n	d794c <__ieee754_log+0xdc>
   d7bae:	ed9f 0b16 	vldr	d0, [pc, #88]	; d7c08 <__ieee754_log+0x398>
   d7bb2:	e6cb      	b.n	d794c <__ieee754_log+0xdc>
   d7bb4:	f3af 8000 	nop.w
   d7bb8:	fee00000 	.word	0xfee00000
   d7bbc:	3fe62e42 	.word	0x3fe62e42
   d7bc0:	35793c76 	.word	0x35793c76
   d7bc4:	3dea39ef 	.word	0x3dea39ef
   d7bc8:	df3e5244 	.word	0xdf3e5244
   d7bcc:	3fc2f112 	.word	0x3fc2f112
   d7bd0:	96cb03de 	.word	0x96cb03de
   d7bd4:	3fc74664 	.word	0x3fc74664
   d7bd8:	94229359 	.word	0x94229359
   d7bdc:	3fd24924 	.word	0x3fd24924
   d7be0:	55555593 	.word	0x55555593
   d7be4:	3fe55555 	.word	0x3fe55555
   d7be8:	d078c69f 	.word	0xd078c69f
   d7bec:	3fc39a09 	.word	0x3fc39a09
   d7bf0:	1d8e78af 	.word	0x1d8e78af
   d7bf4:	3fcc71c5 	.word	0x3fcc71c5
   d7bf8:	9997fa04 	.word	0x9997fa04
   d7bfc:	3fd99999 	.word	0x3fd99999
   d7c00:	55555555 	.word	0x55555555
   d7c04:	3fd55555 	.word	0x3fd55555
	...
   d7c10:	43500000 	.word	0x43500000
   d7c14:	7fefffff 	.word	0x7fefffff
   d7c18:	3ff00000 	.word	0x3ff00000
   d7c1c:	3fe00000 	.word	0x3fe00000
   d7c20:	c3500000 	.word	0xc3500000
   d7c24:	4620      	mov	r0, r4
   d7c26:	f000 f985 	bl	d7f34 <__aeabi_i2d>
   d7c2a:	a30f      	add	r3, pc, #60	; (adr r3, d7c68 <__ieee754_log+0x3f8>)
   d7c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c30:	4680      	mov	r8, r0
   d7c32:	4689      	mov	r9, r1
   d7c34:	f000 f9e4 	bl	d8000 <__aeabi_dmul>
   d7c38:	a30d      	add	r3, pc, #52	; (adr r3, d7c70 <__ieee754_log+0x400>)
   d7c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d7c3e:	4604      	mov	r4, r0
   d7c40:	460d      	mov	r5, r1
   d7c42:	4640      	mov	r0, r8
   d7c44:	4649      	mov	r1, r9
   d7c46:	f000 f9db 	bl	d8000 <__aeabi_dmul>
   d7c4a:	e78f      	b.n	d7b6c <__ieee754_log+0x2fc>
   d7c4c:	4602      	mov	r2, r0
   d7c4e:	460b      	mov	r3, r1
   d7c50:	4650      	mov	r0, sl
   d7c52:	4659      	mov	r1, fp
   d7c54:	f000 f820 	bl	d7c98 <__aeabi_dsub>
   d7c58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d7c5c:	f000 f9d0 	bl	d8000 <__aeabi_dmul>
   d7c60:	e703      	b.n	d7a6a <__ieee754_log+0x1fa>
   d7c62:	bf00      	nop
   d7c64:	f3af 8000 	nop.w
   d7c68:	fee00000 	.word	0xfee00000
   d7c6c:	3fe62e42 	.word	0x3fe62e42
   d7c70:	35793c76 	.word	0x35793c76
   d7c74:	3dea39ef 	.word	0x3dea39ef

000d7c78 <matherr>:
   d7c78:	2000      	movs	r0, #0
   d7c7a:	4770      	bx	lr
   d7c7c:	0000      	movs	r0, r0
	...

000d7c80 <nan>:
   d7c80:	ed9f 0b01 	vldr	d0, [pc, #4]	; d7c88 <nan+0x8>
   d7c84:	4770      	bx	lr
   d7c86:	bf00      	nop
   d7c88:	00000000 	.word	0x00000000
   d7c8c:	7ff80000 	.word	0x7ff80000

000d7c90 <__aeabi_drsub>:
   d7c90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7c94:	e002      	b.n	d7c9c <__adddf3>
   d7c96:	bf00      	nop

000d7c98 <__aeabi_dsub>:
   d7c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7c9c <__adddf3>:
   d7c9c:	b530      	push	{r4, r5, lr}
   d7c9e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7ca2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7ca6:	ea94 0f05 	teq	r4, r5
   d7caa:	bf08      	it	eq
   d7cac:	ea90 0f02 	teqeq	r0, r2
   d7cb0:	bf1f      	itttt	ne
   d7cb2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7cb6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7cba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7cbe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7cc2:	f000 80e2 	beq.w	d7e8a <__adddf3+0x1ee>
   d7cc6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7cca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7cce:	bfb8      	it	lt
   d7cd0:	426d      	neglt	r5, r5
   d7cd2:	dd0c      	ble.n	d7cee <__adddf3+0x52>
   d7cd4:	442c      	add	r4, r5
   d7cd6:	ea80 0202 	eor.w	r2, r0, r2
   d7cda:	ea81 0303 	eor.w	r3, r1, r3
   d7cde:	ea82 0000 	eor.w	r0, r2, r0
   d7ce2:	ea83 0101 	eor.w	r1, r3, r1
   d7ce6:	ea80 0202 	eor.w	r2, r0, r2
   d7cea:	ea81 0303 	eor.w	r3, r1, r3
   d7cee:	2d36      	cmp	r5, #54	; 0x36
   d7cf0:	bf88      	it	hi
   d7cf2:	bd30      	pophi	{r4, r5, pc}
   d7cf4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7cf8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7cfc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7d00:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7d04:	d002      	beq.n	d7d0c <__adddf3+0x70>
   d7d06:	4240      	negs	r0, r0
   d7d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d0c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7d10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7d14:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7d18:	d002      	beq.n	d7d20 <__adddf3+0x84>
   d7d1a:	4252      	negs	r2, r2
   d7d1c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d20:	ea94 0f05 	teq	r4, r5
   d7d24:	f000 80a7 	beq.w	d7e76 <__adddf3+0x1da>
   d7d28:	f1a4 0401 	sub.w	r4, r4, #1
   d7d2c:	f1d5 0e20 	rsbs	lr, r5, #32
   d7d30:	db0d      	blt.n	d7d4e <__adddf3+0xb2>
   d7d32:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7d36:	fa22 f205 	lsr.w	r2, r2, r5
   d7d3a:	1880      	adds	r0, r0, r2
   d7d3c:	f141 0100 	adc.w	r1, r1, #0
   d7d40:	fa03 f20e 	lsl.w	r2, r3, lr
   d7d44:	1880      	adds	r0, r0, r2
   d7d46:	fa43 f305 	asr.w	r3, r3, r5
   d7d4a:	4159      	adcs	r1, r3
   d7d4c:	e00e      	b.n	d7d6c <__adddf3+0xd0>
   d7d4e:	f1a5 0520 	sub.w	r5, r5, #32
   d7d52:	f10e 0e20 	add.w	lr, lr, #32
   d7d56:	2a01      	cmp	r2, #1
   d7d58:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7d5c:	bf28      	it	cs
   d7d5e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7d62:	fa43 f305 	asr.w	r3, r3, r5
   d7d66:	18c0      	adds	r0, r0, r3
   d7d68:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7d6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d70:	d507      	bpl.n	d7d82 <__adddf3+0xe6>
   d7d72:	f04f 0e00 	mov.w	lr, #0
   d7d76:	f1dc 0c00 	rsbs	ip, ip, #0
   d7d7a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7d7e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7d82:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7d86:	d31b      	bcc.n	d7dc0 <__adddf3+0x124>
   d7d88:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7d8c:	d30c      	bcc.n	d7da8 <__adddf3+0x10c>
   d7d8e:	0849      	lsrs	r1, r1, #1
   d7d90:	ea5f 0030 	movs.w	r0, r0, rrx
   d7d94:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7d98:	f104 0401 	add.w	r4, r4, #1
   d7d9c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7da0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7da4:	f080 809a 	bcs.w	d7edc <__adddf3+0x240>
   d7da8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7dac:	bf08      	it	eq
   d7dae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7db2:	f150 0000 	adcs.w	r0, r0, #0
   d7db6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7dba:	ea41 0105 	orr.w	r1, r1, r5
   d7dbe:	bd30      	pop	{r4, r5, pc}
   d7dc0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7dc4:	4140      	adcs	r0, r0
   d7dc6:	eb41 0101 	adc.w	r1, r1, r1
   d7dca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7dce:	f1a4 0401 	sub.w	r4, r4, #1
   d7dd2:	d1e9      	bne.n	d7da8 <__adddf3+0x10c>
   d7dd4:	f091 0f00 	teq	r1, #0
   d7dd8:	bf04      	itt	eq
   d7dda:	4601      	moveq	r1, r0
   d7ddc:	2000      	moveq	r0, #0
   d7dde:	fab1 f381 	clz	r3, r1
   d7de2:	bf08      	it	eq
   d7de4:	3320      	addeq	r3, #32
   d7de6:	f1a3 030b 	sub.w	r3, r3, #11
   d7dea:	f1b3 0220 	subs.w	r2, r3, #32
   d7dee:	da0c      	bge.n	d7e0a <__adddf3+0x16e>
   d7df0:	320c      	adds	r2, #12
   d7df2:	dd08      	ble.n	d7e06 <__adddf3+0x16a>
   d7df4:	f102 0c14 	add.w	ip, r2, #20
   d7df8:	f1c2 020c 	rsb	r2, r2, #12
   d7dfc:	fa01 f00c 	lsl.w	r0, r1, ip
   d7e00:	fa21 f102 	lsr.w	r1, r1, r2
   d7e04:	e00c      	b.n	d7e20 <__adddf3+0x184>
   d7e06:	f102 0214 	add.w	r2, r2, #20
   d7e0a:	bfd8      	it	le
   d7e0c:	f1c2 0c20 	rsble	ip, r2, #32
   d7e10:	fa01 f102 	lsl.w	r1, r1, r2
   d7e14:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7e18:	bfdc      	itt	le
   d7e1a:	ea41 010c 	orrle.w	r1, r1, ip
   d7e1e:	4090      	lslle	r0, r2
   d7e20:	1ae4      	subs	r4, r4, r3
   d7e22:	bfa2      	ittt	ge
   d7e24:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7e28:	4329      	orrge	r1, r5
   d7e2a:	bd30      	popge	{r4, r5, pc}
   d7e2c:	ea6f 0404 	mvn.w	r4, r4
   d7e30:	3c1f      	subs	r4, #31
   d7e32:	da1c      	bge.n	d7e6e <__adddf3+0x1d2>
   d7e34:	340c      	adds	r4, #12
   d7e36:	dc0e      	bgt.n	d7e56 <__adddf3+0x1ba>
   d7e38:	f104 0414 	add.w	r4, r4, #20
   d7e3c:	f1c4 0220 	rsb	r2, r4, #32
   d7e40:	fa20 f004 	lsr.w	r0, r0, r4
   d7e44:	fa01 f302 	lsl.w	r3, r1, r2
   d7e48:	ea40 0003 	orr.w	r0, r0, r3
   d7e4c:	fa21 f304 	lsr.w	r3, r1, r4
   d7e50:	ea45 0103 	orr.w	r1, r5, r3
   d7e54:	bd30      	pop	{r4, r5, pc}
   d7e56:	f1c4 040c 	rsb	r4, r4, #12
   d7e5a:	f1c4 0220 	rsb	r2, r4, #32
   d7e5e:	fa20 f002 	lsr.w	r0, r0, r2
   d7e62:	fa01 f304 	lsl.w	r3, r1, r4
   d7e66:	ea40 0003 	orr.w	r0, r0, r3
   d7e6a:	4629      	mov	r1, r5
   d7e6c:	bd30      	pop	{r4, r5, pc}
   d7e6e:	fa21 f004 	lsr.w	r0, r1, r4
   d7e72:	4629      	mov	r1, r5
   d7e74:	bd30      	pop	{r4, r5, pc}
   d7e76:	f094 0f00 	teq	r4, #0
   d7e7a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7e7e:	bf06      	itte	eq
   d7e80:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7e84:	3401      	addeq	r4, #1
   d7e86:	3d01      	subne	r5, #1
   d7e88:	e74e      	b.n	d7d28 <__adddf3+0x8c>
   d7e8a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7e8e:	bf18      	it	ne
   d7e90:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7e94:	d029      	beq.n	d7eea <__adddf3+0x24e>
   d7e96:	ea94 0f05 	teq	r4, r5
   d7e9a:	bf08      	it	eq
   d7e9c:	ea90 0f02 	teqeq	r0, r2
   d7ea0:	d005      	beq.n	d7eae <__adddf3+0x212>
   d7ea2:	ea54 0c00 	orrs.w	ip, r4, r0
   d7ea6:	bf04      	itt	eq
   d7ea8:	4619      	moveq	r1, r3
   d7eaa:	4610      	moveq	r0, r2
   d7eac:	bd30      	pop	{r4, r5, pc}
   d7eae:	ea91 0f03 	teq	r1, r3
   d7eb2:	bf1e      	ittt	ne
   d7eb4:	2100      	movne	r1, #0
   d7eb6:	2000      	movne	r0, #0
   d7eb8:	bd30      	popne	{r4, r5, pc}
   d7eba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7ebe:	d105      	bne.n	d7ecc <__adddf3+0x230>
   d7ec0:	0040      	lsls	r0, r0, #1
   d7ec2:	4149      	adcs	r1, r1
   d7ec4:	bf28      	it	cs
   d7ec6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7eca:	bd30      	pop	{r4, r5, pc}
   d7ecc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7ed0:	bf3c      	itt	cc
   d7ed2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7ed6:	bd30      	popcc	{r4, r5, pc}
   d7ed8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7edc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7ee0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ee4:	f04f 0000 	mov.w	r0, #0
   d7ee8:	bd30      	pop	{r4, r5, pc}
   d7eea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7eee:	bf1a      	itte	ne
   d7ef0:	4619      	movne	r1, r3
   d7ef2:	4610      	movne	r0, r2
   d7ef4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7ef8:	bf1c      	itt	ne
   d7efa:	460b      	movne	r3, r1
   d7efc:	4602      	movne	r2, r0
   d7efe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7f02:	bf06      	itte	eq
   d7f04:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7f08:	ea91 0f03 	teqeq	r1, r3
   d7f0c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7f10:	bd30      	pop	{r4, r5, pc}
   d7f12:	bf00      	nop

000d7f14 <__aeabi_ui2d>:
   d7f14:	f090 0f00 	teq	r0, #0
   d7f18:	bf04      	itt	eq
   d7f1a:	2100      	moveq	r1, #0
   d7f1c:	4770      	bxeq	lr
   d7f1e:	b530      	push	{r4, r5, lr}
   d7f20:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f24:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f28:	f04f 0500 	mov.w	r5, #0
   d7f2c:	f04f 0100 	mov.w	r1, #0
   d7f30:	e750      	b.n	d7dd4 <__adddf3+0x138>
   d7f32:	bf00      	nop

000d7f34 <__aeabi_i2d>:
   d7f34:	f090 0f00 	teq	r0, #0
   d7f38:	bf04      	itt	eq
   d7f3a:	2100      	moveq	r1, #0
   d7f3c:	4770      	bxeq	lr
   d7f3e:	b530      	push	{r4, r5, lr}
   d7f40:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f44:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f48:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7f4c:	bf48      	it	mi
   d7f4e:	4240      	negmi	r0, r0
   d7f50:	f04f 0100 	mov.w	r1, #0
   d7f54:	e73e      	b.n	d7dd4 <__adddf3+0x138>
   d7f56:	bf00      	nop

000d7f58 <__aeabi_f2d>:
   d7f58:	0042      	lsls	r2, r0, #1
   d7f5a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7f5e:	ea4f 0131 	mov.w	r1, r1, rrx
   d7f62:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7f66:	bf1f      	itttt	ne
   d7f68:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7f6c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f70:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7f74:	4770      	bxne	lr
   d7f76:	f092 0f00 	teq	r2, #0
   d7f7a:	bf14      	ite	ne
   d7f7c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f80:	4770      	bxeq	lr
   d7f82:	b530      	push	{r4, r5, lr}
   d7f84:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7f88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7f90:	e720      	b.n	d7dd4 <__adddf3+0x138>
   d7f92:	bf00      	nop

000d7f94 <__aeabi_ul2d>:
   d7f94:	ea50 0201 	orrs.w	r2, r0, r1
   d7f98:	bf08      	it	eq
   d7f9a:	4770      	bxeq	lr
   d7f9c:	b530      	push	{r4, r5, lr}
   d7f9e:	f04f 0500 	mov.w	r5, #0
   d7fa2:	e00a      	b.n	d7fba <__aeabi_l2d+0x16>

000d7fa4 <__aeabi_l2d>:
   d7fa4:	ea50 0201 	orrs.w	r2, r0, r1
   d7fa8:	bf08      	it	eq
   d7faa:	4770      	bxeq	lr
   d7fac:	b530      	push	{r4, r5, lr}
   d7fae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7fb2:	d502      	bpl.n	d7fba <__aeabi_l2d+0x16>
   d7fb4:	4240      	negs	r0, r0
   d7fb6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7fba:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7fbe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7fc2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7fc6:	f43f aedc 	beq.w	d7d82 <__adddf3+0xe6>
   d7fca:	f04f 0203 	mov.w	r2, #3
   d7fce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7fd2:	bf18      	it	ne
   d7fd4:	3203      	addne	r2, #3
   d7fd6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7fda:	bf18      	it	ne
   d7fdc:	3203      	addne	r2, #3
   d7fde:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7fe2:	f1c2 0320 	rsb	r3, r2, #32
   d7fe6:	fa00 fc03 	lsl.w	ip, r0, r3
   d7fea:	fa20 f002 	lsr.w	r0, r0, r2
   d7fee:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ff2:	ea40 000e 	orr.w	r0, r0, lr
   d7ff6:	fa21 f102 	lsr.w	r1, r1, r2
   d7ffa:	4414      	add	r4, r2
   d7ffc:	e6c1      	b.n	d7d82 <__adddf3+0xe6>
   d7ffe:	bf00      	nop

000d8000 <__aeabi_dmul>:
   d8000:	b570      	push	{r4, r5, r6, lr}
   d8002:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8006:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d800a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d800e:	bf1d      	ittte	ne
   d8010:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8014:	ea94 0f0c 	teqne	r4, ip
   d8018:	ea95 0f0c 	teqne	r5, ip
   d801c:	f000 f8de 	bleq	d81dc <__aeabi_dmul+0x1dc>
   d8020:	442c      	add	r4, r5
   d8022:	ea81 0603 	eor.w	r6, r1, r3
   d8026:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d802a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d802e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8032:	bf18      	it	ne
   d8034:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8038:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d803c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8040:	d038      	beq.n	d80b4 <__aeabi_dmul+0xb4>
   d8042:	fba0 ce02 	umull	ip, lr, r0, r2
   d8046:	f04f 0500 	mov.w	r5, #0
   d804a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d804e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8052:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8056:	f04f 0600 	mov.w	r6, #0
   d805a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d805e:	f09c 0f00 	teq	ip, #0
   d8062:	bf18      	it	ne
   d8064:	f04e 0e01 	orrne.w	lr, lr, #1
   d8068:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d806c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8070:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8074:	d204      	bcs.n	d8080 <__aeabi_dmul+0x80>
   d8076:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d807a:	416d      	adcs	r5, r5
   d807c:	eb46 0606 	adc.w	r6, r6, r6
   d8080:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8084:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8088:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d808c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8090:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8094:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8098:	bf88      	it	hi
   d809a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d809e:	d81e      	bhi.n	d80de <__aeabi_dmul+0xde>
   d80a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d80a4:	bf08      	it	eq
   d80a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d80aa:	f150 0000 	adcs.w	r0, r0, #0
   d80ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d80b2:	bd70      	pop	{r4, r5, r6, pc}
   d80b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d80b8:	ea46 0101 	orr.w	r1, r6, r1
   d80bc:	ea40 0002 	orr.w	r0, r0, r2
   d80c0:	ea81 0103 	eor.w	r1, r1, r3
   d80c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d80c8:	bfc2      	ittt	gt
   d80ca:	ebd4 050c 	rsbsgt	r5, r4, ip
   d80ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d80d2:	bd70      	popgt	{r4, r5, r6, pc}
   d80d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d80d8:	f04f 0e00 	mov.w	lr, #0
   d80dc:	3c01      	subs	r4, #1
   d80de:	f300 80ab 	bgt.w	d8238 <__aeabi_dmul+0x238>
   d80e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d80e6:	bfde      	ittt	le
   d80e8:	2000      	movle	r0, #0
   d80ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d80ee:	bd70      	pople	{r4, r5, r6, pc}
   d80f0:	f1c4 0400 	rsb	r4, r4, #0
   d80f4:	3c20      	subs	r4, #32
   d80f6:	da35      	bge.n	d8164 <__aeabi_dmul+0x164>
   d80f8:	340c      	adds	r4, #12
   d80fa:	dc1b      	bgt.n	d8134 <__aeabi_dmul+0x134>
   d80fc:	f104 0414 	add.w	r4, r4, #20
   d8100:	f1c4 0520 	rsb	r5, r4, #32
   d8104:	fa00 f305 	lsl.w	r3, r0, r5
   d8108:	fa20 f004 	lsr.w	r0, r0, r4
   d810c:	fa01 f205 	lsl.w	r2, r1, r5
   d8110:	ea40 0002 	orr.w	r0, r0, r2
   d8114:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8118:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d811c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8120:	fa21 f604 	lsr.w	r6, r1, r4
   d8124:	eb42 0106 	adc.w	r1, r2, r6
   d8128:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d812c:	bf08      	it	eq
   d812e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8132:	bd70      	pop	{r4, r5, r6, pc}
   d8134:	f1c4 040c 	rsb	r4, r4, #12
   d8138:	f1c4 0520 	rsb	r5, r4, #32
   d813c:	fa00 f304 	lsl.w	r3, r0, r4
   d8140:	fa20 f005 	lsr.w	r0, r0, r5
   d8144:	fa01 f204 	lsl.w	r2, r1, r4
   d8148:	ea40 0002 	orr.w	r0, r0, r2
   d814c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8150:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8154:	f141 0100 	adc.w	r1, r1, #0
   d8158:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d815c:	bf08      	it	eq
   d815e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8162:	bd70      	pop	{r4, r5, r6, pc}
   d8164:	f1c4 0520 	rsb	r5, r4, #32
   d8168:	fa00 f205 	lsl.w	r2, r0, r5
   d816c:	ea4e 0e02 	orr.w	lr, lr, r2
   d8170:	fa20 f304 	lsr.w	r3, r0, r4
   d8174:	fa01 f205 	lsl.w	r2, r1, r5
   d8178:	ea43 0302 	orr.w	r3, r3, r2
   d817c:	fa21 f004 	lsr.w	r0, r1, r4
   d8180:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8184:	fa21 f204 	lsr.w	r2, r1, r4
   d8188:	ea20 0002 	bic.w	r0, r0, r2
   d818c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8190:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8194:	bf08      	it	eq
   d8196:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d819a:	bd70      	pop	{r4, r5, r6, pc}
   d819c:	f094 0f00 	teq	r4, #0
   d81a0:	d10f      	bne.n	d81c2 <__aeabi_dmul+0x1c2>
   d81a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d81a6:	0040      	lsls	r0, r0, #1
   d81a8:	eb41 0101 	adc.w	r1, r1, r1
   d81ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d81b0:	bf08      	it	eq
   d81b2:	3c01      	subeq	r4, #1
   d81b4:	d0f7      	beq.n	d81a6 <__aeabi_dmul+0x1a6>
   d81b6:	ea41 0106 	orr.w	r1, r1, r6
   d81ba:	f095 0f00 	teq	r5, #0
   d81be:	bf18      	it	ne
   d81c0:	4770      	bxne	lr
   d81c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d81c6:	0052      	lsls	r2, r2, #1
   d81c8:	eb43 0303 	adc.w	r3, r3, r3
   d81cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d81d0:	bf08      	it	eq
   d81d2:	3d01      	subeq	r5, #1
   d81d4:	d0f7      	beq.n	d81c6 <__aeabi_dmul+0x1c6>
   d81d6:	ea43 0306 	orr.w	r3, r3, r6
   d81da:	4770      	bx	lr
   d81dc:	ea94 0f0c 	teq	r4, ip
   d81e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d81e4:	bf18      	it	ne
   d81e6:	ea95 0f0c 	teqne	r5, ip
   d81ea:	d00c      	beq.n	d8206 <__aeabi_dmul+0x206>
   d81ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d81f0:	bf18      	it	ne
   d81f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d81f6:	d1d1      	bne.n	d819c <__aeabi_dmul+0x19c>
   d81f8:	ea81 0103 	eor.w	r1, r1, r3
   d81fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8200:	f04f 0000 	mov.w	r0, #0
   d8204:	bd70      	pop	{r4, r5, r6, pc}
   d8206:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d820a:	bf06      	itte	eq
   d820c:	4610      	moveq	r0, r2
   d820e:	4619      	moveq	r1, r3
   d8210:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8214:	d019      	beq.n	d824a <__aeabi_dmul+0x24a>
   d8216:	ea94 0f0c 	teq	r4, ip
   d821a:	d102      	bne.n	d8222 <__aeabi_dmul+0x222>
   d821c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8220:	d113      	bne.n	d824a <__aeabi_dmul+0x24a>
   d8222:	ea95 0f0c 	teq	r5, ip
   d8226:	d105      	bne.n	d8234 <__aeabi_dmul+0x234>
   d8228:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d822c:	bf1c      	itt	ne
   d822e:	4610      	movne	r0, r2
   d8230:	4619      	movne	r1, r3
   d8232:	d10a      	bne.n	d824a <__aeabi_dmul+0x24a>
   d8234:	ea81 0103 	eor.w	r1, r1, r3
   d8238:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d823c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8240:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8244:	f04f 0000 	mov.w	r0, #0
   d8248:	bd70      	pop	{r4, r5, r6, pc}
   d824a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d824e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8252:	bd70      	pop	{r4, r5, r6, pc}

000d8254 <__aeabi_ddiv>:
   d8254:	b570      	push	{r4, r5, r6, lr}
   d8256:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d825a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d825e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8262:	bf1d      	ittte	ne
   d8264:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8268:	ea94 0f0c 	teqne	r4, ip
   d826c:	ea95 0f0c 	teqne	r5, ip
   d8270:	f000 f8a7 	bleq	d83c2 <__aeabi_ddiv+0x16e>
   d8274:	eba4 0405 	sub.w	r4, r4, r5
   d8278:	ea81 0e03 	eor.w	lr, r1, r3
   d827c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8280:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8284:	f000 8088 	beq.w	d8398 <__aeabi_ddiv+0x144>
   d8288:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d828c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8290:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8294:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8298:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d829c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d82a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d82a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d82a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d82ac:	429d      	cmp	r5, r3
   d82ae:	bf08      	it	eq
   d82b0:	4296      	cmpeq	r6, r2
   d82b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d82b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d82ba:	d202      	bcs.n	d82c2 <__aeabi_ddiv+0x6e>
   d82bc:	085b      	lsrs	r3, r3, #1
   d82be:	ea4f 0232 	mov.w	r2, r2, rrx
   d82c2:	1ab6      	subs	r6, r6, r2
   d82c4:	eb65 0503 	sbc.w	r5, r5, r3
   d82c8:	085b      	lsrs	r3, r3, #1
   d82ca:	ea4f 0232 	mov.w	r2, r2, rrx
   d82ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d82d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d82d6:	ebb6 0e02 	subs.w	lr, r6, r2
   d82da:	eb75 0e03 	sbcs.w	lr, r5, r3
   d82de:	bf22      	ittt	cs
   d82e0:	1ab6      	subcs	r6, r6, r2
   d82e2:	4675      	movcs	r5, lr
   d82e4:	ea40 000c 	orrcs.w	r0, r0, ip
   d82e8:	085b      	lsrs	r3, r3, #1
   d82ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d82ee:	ebb6 0e02 	subs.w	lr, r6, r2
   d82f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d82f6:	bf22      	ittt	cs
   d82f8:	1ab6      	subcs	r6, r6, r2
   d82fa:	4675      	movcs	r5, lr
   d82fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8300:	085b      	lsrs	r3, r3, #1
   d8302:	ea4f 0232 	mov.w	r2, r2, rrx
   d8306:	ebb6 0e02 	subs.w	lr, r6, r2
   d830a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d830e:	bf22      	ittt	cs
   d8310:	1ab6      	subcs	r6, r6, r2
   d8312:	4675      	movcs	r5, lr
   d8314:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8318:	085b      	lsrs	r3, r3, #1
   d831a:	ea4f 0232 	mov.w	r2, r2, rrx
   d831e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8322:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8326:	bf22      	ittt	cs
   d8328:	1ab6      	subcs	r6, r6, r2
   d832a:	4675      	movcs	r5, lr
   d832c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8330:	ea55 0e06 	orrs.w	lr, r5, r6
   d8334:	d018      	beq.n	d8368 <__aeabi_ddiv+0x114>
   d8336:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d833a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d833e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8342:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8346:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d834a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d834e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8352:	d1c0      	bne.n	d82d6 <__aeabi_ddiv+0x82>
   d8354:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8358:	d10b      	bne.n	d8372 <__aeabi_ddiv+0x11e>
   d835a:	ea41 0100 	orr.w	r1, r1, r0
   d835e:	f04f 0000 	mov.w	r0, #0
   d8362:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8366:	e7b6      	b.n	d82d6 <__aeabi_ddiv+0x82>
   d8368:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d836c:	bf04      	itt	eq
   d836e:	4301      	orreq	r1, r0
   d8370:	2000      	moveq	r0, #0
   d8372:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8376:	bf88      	it	hi
   d8378:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d837c:	f63f aeaf 	bhi.w	d80de <__aeabi_dmul+0xde>
   d8380:	ebb5 0c03 	subs.w	ip, r5, r3
   d8384:	bf04      	itt	eq
   d8386:	ebb6 0c02 	subseq.w	ip, r6, r2
   d838a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d838e:	f150 0000 	adcs.w	r0, r0, #0
   d8392:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8396:	bd70      	pop	{r4, r5, r6, pc}
   d8398:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d839c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d83a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d83a4:	bfc2      	ittt	gt
   d83a6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d83aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d83ae:	bd70      	popgt	{r4, r5, r6, pc}
   d83b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d83b4:	f04f 0e00 	mov.w	lr, #0
   d83b8:	3c01      	subs	r4, #1
   d83ba:	e690      	b.n	d80de <__aeabi_dmul+0xde>
   d83bc:	ea45 0e06 	orr.w	lr, r5, r6
   d83c0:	e68d      	b.n	d80de <__aeabi_dmul+0xde>
   d83c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d83c6:	ea94 0f0c 	teq	r4, ip
   d83ca:	bf08      	it	eq
   d83cc:	ea95 0f0c 	teqeq	r5, ip
   d83d0:	f43f af3b 	beq.w	d824a <__aeabi_dmul+0x24a>
   d83d4:	ea94 0f0c 	teq	r4, ip
   d83d8:	d10a      	bne.n	d83f0 <__aeabi_ddiv+0x19c>
   d83da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d83de:	f47f af34 	bne.w	d824a <__aeabi_dmul+0x24a>
   d83e2:	ea95 0f0c 	teq	r5, ip
   d83e6:	f47f af25 	bne.w	d8234 <__aeabi_dmul+0x234>
   d83ea:	4610      	mov	r0, r2
   d83ec:	4619      	mov	r1, r3
   d83ee:	e72c      	b.n	d824a <__aeabi_dmul+0x24a>
   d83f0:	ea95 0f0c 	teq	r5, ip
   d83f4:	d106      	bne.n	d8404 <__aeabi_ddiv+0x1b0>
   d83f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d83fa:	f43f aefd 	beq.w	d81f8 <__aeabi_dmul+0x1f8>
   d83fe:	4610      	mov	r0, r2
   d8400:	4619      	mov	r1, r3
   d8402:	e722      	b.n	d824a <__aeabi_dmul+0x24a>
   d8404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8408:	bf18      	it	ne
   d840a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d840e:	f47f aec5 	bne.w	d819c <__aeabi_dmul+0x19c>
   d8412:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8416:	f47f af0d 	bne.w	d8234 <__aeabi_dmul+0x234>
   d841a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d841e:	f47f aeeb 	bne.w	d81f8 <__aeabi_dmul+0x1f8>
   d8422:	e712      	b.n	d824a <__aeabi_dmul+0x24a>

000d8424 <__gedf2>:
   d8424:	f04f 3cff 	mov.w	ip, #4294967295
   d8428:	e006      	b.n	d8438 <__cmpdf2+0x4>
   d842a:	bf00      	nop

000d842c <__ledf2>:
   d842c:	f04f 0c01 	mov.w	ip, #1
   d8430:	e002      	b.n	d8438 <__cmpdf2+0x4>
   d8432:	bf00      	nop

000d8434 <__cmpdf2>:
   d8434:	f04f 0c01 	mov.w	ip, #1
   d8438:	f84d cd04 	str.w	ip, [sp, #-4]!
   d843c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8440:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8444:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8448:	bf18      	it	ne
   d844a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d844e:	d01b      	beq.n	d8488 <__cmpdf2+0x54>
   d8450:	b001      	add	sp, #4
   d8452:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8456:	bf0c      	ite	eq
   d8458:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d845c:	ea91 0f03 	teqne	r1, r3
   d8460:	bf02      	ittt	eq
   d8462:	ea90 0f02 	teqeq	r0, r2
   d8466:	2000      	moveq	r0, #0
   d8468:	4770      	bxeq	lr
   d846a:	f110 0f00 	cmn.w	r0, #0
   d846e:	ea91 0f03 	teq	r1, r3
   d8472:	bf58      	it	pl
   d8474:	4299      	cmppl	r1, r3
   d8476:	bf08      	it	eq
   d8478:	4290      	cmpeq	r0, r2
   d847a:	bf2c      	ite	cs
   d847c:	17d8      	asrcs	r0, r3, #31
   d847e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8482:	f040 0001 	orr.w	r0, r0, #1
   d8486:	4770      	bx	lr
   d8488:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d848c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8490:	d102      	bne.n	d8498 <__cmpdf2+0x64>
   d8492:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8496:	d107      	bne.n	d84a8 <__cmpdf2+0x74>
   d8498:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d849c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d84a0:	d1d6      	bne.n	d8450 <__cmpdf2+0x1c>
   d84a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d84a6:	d0d3      	beq.n	d8450 <__cmpdf2+0x1c>
   d84a8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d84ac:	4770      	bx	lr
   d84ae:	bf00      	nop

000d84b0 <__aeabi_cdrcmple>:
   d84b0:	4684      	mov	ip, r0
   d84b2:	4610      	mov	r0, r2
   d84b4:	4662      	mov	r2, ip
   d84b6:	468c      	mov	ip, r1
   d84b8:	4619      	mov	r1, r3
   d84ba:	4663      	mov	r3, ip
   d84bc:	e000      	b.n	d84c0 <__aeabi_cdcmpeq>
   d84be:	bf00      	nop

000d84c0 <__aeabi_cdcmpeq>:
   d84c0:	b501      	push	{r0, lr}
   d84c2:	f7ff ffb7 	bl	d8434 <__cmpdf2>
   d84c6:	2800      	cmp	r0, #0
   d84c8:	bf48      	it	mi
   d84ca:	f110 0f00 	cmnmi.w	r0, #0
   d84ce:	bd01      	pop	{r0, pc}

000d84d0 <__aeabi_dcmpeq>:
   d84d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84d4:	f7ff fff4 	bl	d84c0 <__aeabi_cdcmpeq>
   d84d8:	bf0c      	ite	eq
   d84da:	2001      	moveq	r0, #1
   d84dc:	2000      	movne	r0, #0
   d84de:	f85d fb08 	ldr.w	pc, [sp], #8
   d84e2:	bf00      	nop

000d84e4 <__aeabi_dcmplt>:
   d84e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84e8:	f7ff ffea 	bl	d84c0 <__aeabi_cdcmpeq>
   d84ec:	bf34      	ite	cc
   d84ee:	2001      	movcc	r0, #1
   d84f0:	2000      	movcs	r0, #0
   d84f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d84f6:	bf00      	nop

000d84f8 <__aeabi_dcmple>:
   d84f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d84fc:	f7ff ffe0 	bl	d84c0 <__aeabi_cdcmpeq>
   d8500:	bf94      	ite	ls
   d8502:	2001      	movls	r0, #1
   d8504:	2000      	movhi	r0, #0
   d8506:	f85d fb08 	ldr.w	pc, [sp], #8
   d850a:	bf00      	nop

000d850c <__aeabi_dcmpge>:
   d850c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8510:	f7ff ffce 	bl	d84b0 <__aeabi_cdrcmple>
   d8514:	bf94      	ite	ls
   d8516:	2001      	movls	r0, #1
   d8518:	2000      	movhi	r0, #0
   d851a:	f85d fb08 	ldr.w	pc, [sp], #8
   d851e:	bf00      	nop

000d8520 <__aeabi_dcmpgt>:
   d8520:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8524:	f7ff ffc4 	bl	d84b0 <__aeabi_cdrcmple>
   d8528:	bf34      	ite	cc
   d852a:	2001      	movcc	r0, #1
   d852c:	2000      	movcs	r0, #0
   d852e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8532:	bf00      	nop

000d8534 <__aeabi_dcmpun>:
   d8534:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d853c:	d102      	bne.n	d8544 <__aeabi_dcmpun+0x10>
   d853e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8542:	d10a      	bne.n	d855a <__aeabi_dcmpun+0x26>
   d8544:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8548:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d854c:	d102      	bne.n	d8554 <__aeabi_dcmpun+0x20>
   d854e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8552:	d102      	bne.n	d855a <__aeabi_dcmpun+0x26>
   d8554:	f04f 0000 	mov.w	r0, #0
   d8558:	4770      	bx	lr
   d855a:	f04f 0001 	mov.w	r0, #1
   d855e:	4770      	bx	lr

000d8560 <__aeabi_d2iz>:
   d8560:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8564:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8568:	d215      	bcs.n	d8596 <__aeabi_d2iz+0x36>
   d856a:	d511      	bpl.n	d8590 <__aeabi_d2iz+0x30>
   d856c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8570:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8574:	d912      	bls.n	d859c <__aeabi_d2iz+0x3c>
   d8576:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d857a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d857e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8582:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8586:	fa23 f002 	lsr.w	r0, r3, r2
   d858a:	bf18      	it	ne
   d858c:	4240      	negne	r0, r0
   d858e:	4770      	bx	lr
   d8590:	f04f 0000 	mov.w	r0, #0
   d8594:	4770      	bx	lr
   d8596:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d859a:	d105      	bne.n	d85a8 <__aeabi_d2iz+0x48>
   d859c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d85a0:	bf08      	it	eq
   d85a2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d85a6:	4770      	bx	lr
   d85a8:	f04f 0000 	mov.w	r0, #0
   d85ac:	4770      	bx	lr
   d85ae:	bf00      	nop

000d85b0 <__aeabi_d2uiz>:
   d85b0:	004a      	lsls	r2, r1, #1
   d85b2:	d211      	bcs.n	d85d8 <__aeabi_d2uiz+0x28>
   d85b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d85b8:	d211      	bcs.n	d85de <__aeabi_d2uiz+0x2e>
   d85ba:	d50d      	bpl.n	d85d8 <__aeabi_d2uiz+0x28>
   d85bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d85c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d85c4:	d40e      	bmi.n	d85e4 <__aeabi_d2uiz+0x34>
   d85c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d85ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d85ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d85d2:	fa23 f002 	lsr.w	r0, r3, r2
   d85d6:	4770      	bx	lr
   d85d8:	f04f 0000 	mov.w	r0, #0
   d85dc:	4770      	bx	lr
   d85de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d85e2:	d102      	bne.n	d85ea <__aeabi_d2uiz+0x3a>
   d85e4:	f04f 30ff 	mov.w	r0, #4294967295
   d85e8:	4770      	bx	lr
   d85ea:	f04f 0000 	mov.w	r0, #0
   d85ee:	4770      	bx	lr

000d85f0 <__aeabi_d2f>:
   d85f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d85f4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d85f8:	bf24      	itt	cs
   d85fa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d85fe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8602:	d90d      	bls.n	d8620 <__aeabi_d2f+0x30>
   d8604:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8608:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d860c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8610:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8614:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8618:	bf08      	it	eq
   d861a:	f020 0001 	biceq.w	r0, r0, #1
   d861e:	4770      	bx	lr
   d8620:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8624:	d121      	bne.n	d866a <__aeabi_d2f+0x7a>
   d8626:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d862a:	bfbc      	itt	lt
   d862c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8630:	4770      	bxlt	lr
   d8632:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8636:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d863a:	f1c2 0218 	rsb	r2, r2, #24
   d863e:	f1c2 0c20 	rsb	ip, r2, #32
   d8642:	fa10 f30c 	lsls.w	r3, r0, ip
   d8646:	fa20 f002 	lsr.w	r0, r0, r2
   d864a:	bf18      	it	ne
   d864c:	f040 0001 	orrne.w	r0, r0, #1
   d8650:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8654:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8658:	fa03 fc0c 	lsl.w	ip, r3, ip
   d865c:	ea40 000c 	orr.w	r0, r0, ip
   d8660:	fa23 f302 	lsr.w	r3, r3, r2
   d8664:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8668:	e7cc      	b.n	d8604 <__aeabi_d2f+0x14>
   d866a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d866e:	d107      	bne.n	d8680 <__aeabi_d2f+0x90>
   d8670:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8674:	bf1e      	ittt	ne
   d8676:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d867a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d867e:	4770      	bxne	lr
   d8680:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8684:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8688:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d868c:	4770      	bx	lr
   d868e:	bf00      	nop

000d8690 <atof>:
   d8690:	2100      	movs	r1, #0
   d8692:	f000 bee9 	b.w	d9468 <strtod>

000d8696 <atoi>:
   d8696:	220a      	movs	r2, #10
   d8698:	2100      	movs	r1, #0
   d869a:	f000 bf73 	b.w	d9584 <strtol>

000d869e <atol>:
   d869e:	220a      	movs	r2, #10
   d86a0:	2100      	movs	r1, #0
   d86a2:	f000 bf6f 	b.w	d9584 <strtol>
	...

000d86a8 <__cxa_atexit>:
   d86a8:	b510      	push	{r4, lr}
   d86aa:	4c05      	ldr	r4, [pc, #20]	; (d86c0 <__cxa_atexit+0x18>)
   d86ac:	4613      	mov	r3, r2
   d86ae:	b12c      	cbz	r4, d86bc <__cxa_atexit+0x14>
   d86b0:	460a      	mov	r2, r1
   d86b2:	4601      	mov	r1, r0
   d86b4:	2002      	movs	r0, #2
   d86b6:	f3af 8000 	nop.w
   d86ba:	bd10      	pop	{r4, pc}
   d86bc:	4620      	mov	r0, r4
   d86be:	bd10      	pop	{r4, pc}
   d86c0:	00000000 	.word	0x00000000

000d86c4 <_localeconv_r>:
   d86c4:	4800      	ldr	r0, [pc, #0]	; (d86c8 <_localeconv_r+0x4>)
   d86c6:	4770      	bx	lr
   d86c8:	2003e05c 	.word	0x2003e05c

000d86cc <memcpy>:
   d86cc:	b510      	push	{r4, lr}
   d86ce:	1e43      	subs	r3, r0, #1
   d86d0:	440a      	add	r2, r1
   d86d2:	4291      	cmp	r1, r2
   d86d4:	d004      	beq.n	d86e0 <memcpy+0x14>
   d86d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d86da:	f803 4f01 	strb.w	r4, [r3, #1]!
   d86de:	e7f8      	b.n	d86d2 <memcpy+0x6>
   d86e0:	bd10      	pop	{r4, pc}

000d86e2 <memset>:
   d86e2:	4402      	add	r2, r0
   d86e4:	4603      	mov	r3, r0
   d86e6:	4293      	cmp	r3, r2
   d86e8:	d002      	beq.n	d86f0 <memset+0xe>
   d86ea:	f803 1b01 	strb.w	r1, [r3], #1
   d86ee:	e7fa      	b.n	d86e6 <memset+0x4>
   d86f0:	4770      	bx	lr
	...

000d86f4 <srand>:
   d86f4:	b538      	push	{r3, r4, r5, lr}
   d86f6:	4b12      	ldr	r3, [pc, #72]	; (d8740 <srand+0x4c>)
   d86f8:	681c      	ldr	r4, [r3, #0]
   d86fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d86fc:	4605      	mov	r5, r0
   d86fe:	b9d3      	cbnz	r3, d8736 <srand+0x42>
   d8700:	2018      	movs	r0, #24
   d8702:	f7fd f927 	bl	d5954 <malloc>
   d8706:	f243 330e 	movw	r3, #13070	; 0x330e
   d870a:	63a0      	str	r0, [r4, #56]	; 0x38
   d870c:	8003      	strh	r3, [r0, #0]
   d870e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8712:	8043      	strh	r3, [r0, #2]
   d8714:	f241 2334 	movw	r3, #4660	; 0x1234
   d8718:	8083      	strh	r3, [r0, #4]
   d871a:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d871e:	80c3      	strh	r3, [r0, #6]
   d8720:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8724:	8103      	strh	r3, [r0, #8]
   d8726:	2305      	movs	r3, #5
   d8728:	8143      	strh	r3, [r0, #10]
   d872a:	230b      	movs	r3, #11
   d872c:	8183      	strh	r3, [r0, #12]
   d872e:	2201      	movs	r2, #1
   d8730:	2300      	movs	r3, #0
   d8732:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8738:	2200      	movs	r2, #0
   d873a:	611d      	str	r5, [r3, #16]
   d873c:	615a      	str	r2, [r3, #20]
   d873e:	bd38      	pop	{r3, r4, r5, pc}
   d8740:	2003e058 	.word	0x2003e058

000d8744 <strchr>:
   d8744:	b2c9      	uxtb	r1, r1
   d8746:	4603      	mov	r3, r0
   d8748:	f810 2b01 	ldrb.w	r2, [r0], #1
   d874c:	b11a      	cbz	r2, d8756 <strchr+0x12>
   d874e:	4291      	cmp	r1, r2
   d8750:	d1f9      	bne.n	d8746 <strchr+0x2>
   d8752:	4618      	mov	r0, r3
   d8754:	4770      	bx	lr
   d8756:	2900      	cmp	r1, #0
   d8758:	bf0c      	ite	eq
   d875a:	4618      	moveq	r0, r3
   d875c:	2000      	movne	r0, #0
   d875e:	4770      	bx	lr

000d8760 <strdup>:
   d8760:	4b02      	ldr	r3, [pc, #8]	; (d876c <strdup+0xc>)
   d8762:	4601      	mov	r1, r0
   d8764:	6818      	ldr	r0, [r3, #0]
   d8766:	f000 b803 	b.w	d8770 <_strdup_r>
   d876a:	bf00      	nop
   d876c:	2003e058 	.word	0x2003e058

000d8770 <_strdup_r>:
   d8770:	b570      	push	{r4, r5, r6, lr}
   d8772:	4606      	mov	r6, r0
   d8774:	4608      	mov	r0, r1
   d8776:	460c      	mov	r4, r1
   d8778:	f000 f80d 	bl	d8796 <strlen>
   d877c:	1c45      	adds	r5, r0, #1
   d877e:	4629      	mov	r1, r5
   d8780:	4630      	mov	r0, r6
   d8782:	f7fd f907 	bl	d5994 <_malloc_r>
   d8786:	4606      	mov	r6, r0
   d8788:	b118      	cbz	r0, d8792 <_strdup_r+0x22>
   d878a:	462a      	mov	r2, r5
   d878c:	4621      	mov	r1, r4
   d878e:	f7ff ff9d 	bl	d86cc <memcpy>
   d8792:	4630      	mov	r0, r6
   d8794:	bd70      	pop	{r4, r5, r6, pc}

000d8796 <strlen>:
   d8796:	4603      	mov	r3, r0
   d8798:	f813 2b01 	ldrb.w	r2, [r3], #1
   d879c:	2a00      	cmp	r2, #0
   d879e:	d1fb      	bne.n	d8798 <strlen+0x2>
   d87a0:	1a18      	subs	r0, r3, r0
   d87a2:	3801      	subs	r0, #1
   d87a4:	4770      	bx	lr

000d87a6 <strncmp>:
   d87a6:	b530      	push	{r4, r5, lr}
   d87a8:	b182      	cbz	r2, d87cc <strncmp+0x26>
   d87aa:	1e45      	subs	r5, r0, #1
   d87ac:	3901      	subs	r1, #1
   d87ae:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d87b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d87b6:	42a3      	cmp	r3, r4
   d87b8:	d106      	bne.n	d87c8 <strncmp+0x22>
   d87ba:	43ec      	mvns	r4, r5
   d87bc:	4414      	add	r4, r2
   d87be:	42e0      	cmn	r0, r4
   d87c0:	d001      	beq.n	d87c6 <strncmp+0x20>
   d87c2:	2b00      	cmp	r3, #0
   d87c4:	d1f3      	bne.n	d87ae <strncmp+0x8>
   d87c6:	461c      	mov	r4, r3
   d87c8:	1b18      	subs	r0, r3, r4
   d87ca:	bd30      	pop	{r4, r5, pc}
   d87cc:	4610      	mov	r0, r2
   d87ce:	bd30      	pop	{r4, r5, pc}

000d87d0 <strncpy>:
   d87d0:	b510      	push	{r4, lr}
   d87d2:	4603      	mov	r3, r0
   d87d4:	b142      	cbz	r2, d87e8 <strncpy+0x18>
   d87d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d87da:	f803 4b01 	strb.w	r4, [r3], #1
   d87de:	3a01      	subs	r2, #1
   d87e0:	2c00      	cmp	r4, #0
   d87e2:	d1f7      	bne.n	d87d4 <strncpy+0x4>
   d87e4:	441a      	add	r2, r3
   d87e6:	e000      	b.n	d87ea <strncpy+0x1a>
   d87e8:	bd10      	pop	{r4, pc}
   d87ea:	4293      	cmp	r3, r2
   d87ec:	d002      	beq.n	d87f4 <strncpy+0x24>
   d87ee:	f803 4b01 	strb.w	r4, [r3], #1
   d87f2:	e7fa      	b.n	d87ea <strncpy+0x1a>
   d87f4:	bd10      	pop	{r4, pc}

000d87f6 <strstr>:
   d87f6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d87f8:	7803      	ldrb	r3, [r0, #0]
   d87fa:	b963      	cbnz	r3, d8816 <strstr+0x20>
   d87fc:	780b      	ldrb	r3, [r1, #0]
   d87fe:	2b00      	cmp	r3, #0
   d8800:	bf18      	it	ne
   d8802:	2000      	movne	r0, #0
   d8804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8806:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d880a:	b162      	cbz	r2, d8826 <strstr+0x30>
   d880c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d8810:	4297      	cmp	r7, r2
   d8812:	4630      	mov	r0, r6
   d8814:	d0f7      	beq.n	d8806 <strstr+0x10>
   d8816:	4603      	mov	r3, r0
   d8818:	1c46      	adds	r6, r0, #1
   d881a:	7800      	ldrb	r0, [r0, #0]
   d881c:	b110      	cbz	r0, d8824 <strstr+0x2e>
   d881e:	1e4d      	subs	r5, r1, #1
   d8820:	1e5c      	subs	r4, r3, #1
   d8822:	e7f0      	b.n	d8806 <strstr+0x10>
   d8824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8826:	4618      	mov	r0, r3
   d8828:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d882a <sulp>:
   d882a:	b570      	push	{r4, r5, r6, lr}
   d882c:	4604      	mov	r4, r0
   d882e:	460d      	mov	r5, r1
   d8830:	ec45 4b10 	vmov	d0, r4, r5
   d8834:	4616      	mov	r6, r2
   d8836:	f001 fc93 	bl	da160 <__ulp>
   d883a:	ec51 0b10 	vmov	r0, r1, d0
   d883e:	b17e      	cbz	r6, d8860 <sulp+0x36>
   d8840:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8844:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8848:	2b00      	cmp	r3, #0
   d884a:	dd09      	ble.n	d8860 <sulp+0x36>
   d884c:	051b      	lsls	r3, r3, #20
   d884e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8852:	2400      	movs	r4, #0
   d8854:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8858:	4622      	mov	r2, r4
   d885a:	462b      	mov	r3, r5
   d885c:	f7ff fbd0 	bl	d8000 <__aeabi_dmul>
   d8860:	bd70      	pop	{r4, r5, r6, pc}
   d8862:	0000      	movs	r0, r0
   d8864:	0000      	movs	r0, r0
	...

000d8868 <_strtod_r>:
   d8868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d886c:	b09d      	sub	sp, #116	; 0x74
   d886e:	2300      	movs	r3, #0
   d8870:	9002      	str	r0, [sp, #8]
   d8872:	460c      	mov	r4, r1
   d8874:	9213      	str	r2, [sp, #76]	; 0x4c
   d8876:	9318      	str	r3, [sp, #96]	; 0x60
   d8878:	f04f 0a00 	mov.w	sl, #0
   d887c:	f04f 0b00 	mov.w	fp, #0
   d8880:	9117      	str	r1, [sp, #92]	; 0x5c
   d8882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8884:	781a      	ldrb	r2, [r3, #0]
   d8886:	2a0d      	cmp	r2, #13
   d8888:	d805      	bhi.n	d8896 <_strtod_r+0x2e>
   d888a:	2a09      	cmp	r2, #9
   d888c:	d213      	bcs.n	d88b6 <_strtod_r+0x4e>
   d888e:	2a00      	cmp	r2, #0
   d8890:	f000 81ac 	beq.w	d8bec <_strtod_r+0x384>
   d8894:	e012      	b.n	d88bc <_strtod_r+0x54>
   d8896:	2a2b      	cmp	r2, #43	; 0x2b
   d8898:	d004      	beq.n	d88a4 <_strtod_r+0x3c>
   d889a:	2a2d      	cmp	r2, #45	; 0x2d
   d889c:	d004      	beq.n	d88a8 <_strtod_r+0x40>
   d889e:	2a20      	cmp	r2, #32
   d88a0:	d10c      	bne.n	d88bc <_strtod_r+0x54>
   d88a2:	e008      	b.n	d88b6 <_strtod_r+0x4e>
   d88a4:	2200      	movs	r2, #0
   d88a6:	e000      	b.n	d88aa <_strtod_r+0x42>
   d88a8:	2201      	movs	r2, #1
   d88aa:	920c      	str	r2, [sp, #48]	; 0x30
   d88ac:	1c5a      	adds	r2, r3, #1
   d88ae:	9217      	str	r2, [sp, #92]	; 0x5c
   d88b0:	785b      	ldrb	r3, [r3, #1]
   d88b2:	b92b      	cbnz	r3, d88c0 <_strtod_r+0x58>
   d88b4:	e19a      	b.n	d8bec <_strtod_r+0x384>
   d88b6:	3301      	adds	r3, #1
   d88b8:	9317      	str	r3, [sp, #92]	; 0x5c
   d88ba:	e7e2      	b.n	d8882 <_strtod_r+0x1a>
   d88bc:	2300      	movs	r3, #0
   d88be:	930c      	str	r3, [sp, #48]	; 0x30
   d88c0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d88c2:	782b      	ldrb	r3, [r5, #0]
   d88c4:	2b30      	cmp	r3, #48	; 0x30
   d88c6:	d15c      	bne.n	d8982 <_strtod_r+0x11a>
   d88c8:	786b      	ldrb	r3, [r5, #1]
   d88ca:	2b58      	cmp	r3, #88	; 0x58
   d88cc:	d001      	beq.n	d88d2 <_strtod_r+0x6a>
   d88ce:	2b78      	cmp	r3, #120	; 0x78
   d88d0:	d14c      	bne.n	d896c <_strtod_r+0x104>
   d88d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d88d4:	9301      	str	r3, [sp, #4]
   d88d6:	ab18      	add	r3, sp, #96	; 0x60
   d88d8:	9300      	str	r3, [sp, #0]
   d88da:	4aa9      	ldr	r2, [pc, #676]	; (d8b80 <_strtod_r+0x318>)
   d88dc:	9802      	ldr	r0, [sp, #8]
   d88de:	ab19      	add	r3, sp, #100	; 0x64
   d88e0:	a917      	add	r1, sp, #92	; 0x5c
   d88e2:	f000 fea4 	bl	d962e <__gethex>
   d88e6:	f010 0607 	ands.w	r6, r0, #7
   d88ea:	4604      	mov	r4, r0
   d88ec:	f000 8587 	beq.w	d93fe <_strtod_r+0xb96>
   d88f0:	2e06      	cmp	r6, #6
   d88f2:	d105      	bne.n	d8900 <_strtod_r+0x98>
   d88f4:	3501      	adds	r5, #1
   d88f6:	2300      	movs	r3, #0
   d88f8:	9517      	str	r5, [sp, #92]	; 0x5c
   d88fa:	930c      	str	r3, [sp, #48]	; 0x30
   d88fc:	f000 bd7f 	b.w	d93fe <_strtod_r+0xb96>
   d8900:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d8902:	b13a      	cbz	r2, d8914 <_strtod_r+0xac>
   d8904:	2135      	movs	r1, #53	; 0x35
   d8906:	a81a      	add	r0, sp, #104	; 0x68
   d8908:	f001 fd17 	bl	da33a <__copybits>
   d890c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d890e:	9802      	ldr	r0, [sp, #8]
   d8910:	f001 f994 	bl	d9c3c <_Bfree>
   d8914:	2e06      	cmp	r6, #6
   d8916:	d822      	bhi.n	d895e <_strtod_r+0xf6>
   d8918:	e8df f006 	tbb	[pc, r6]
   d891c:	18080d04 	.word	0x18080d04
   d8920:	0d1d      	.short	0x0d1d
   d8922:	04          	.byte	0x04
   d8923:	00          	.byte	0x00
   d8924:	f04f 0b00 	mov.w	fp, #0
   d8928:	46da      	mov	sl, fp
   d892a:	e018      	b.n	d895e <_strtod_r+0xf6>
   d892c:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8930:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   d8934:	e013      	b.n	d895e <_strtod_r+0xf6>
   d8936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8938:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d893a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d893e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8942:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8946:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d894a:	e008      	b.n	d895e <_strtod_r+0xf6>
   d894c:	f8df b234 	ldr.w	fp, [pc, #564]	; d8b84 <_strtod_r+0x31c>
   d8950:	f04f 0a00 	mov.w	sl, #0
   d8954:	e003      	b.n	d895e <_strtod_r+0xf6>
   d8956:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d895a:	f04f 3aff 	mov.w	sl, #4294967295
   d895e:	0721      	lsls	r1, r4, #28
   d8960:	f140 854d 	bpl.w	d93fe <_strtod_r+0xb96>
   d8964:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8968:	f000 bd49 	b.w	d93fe <_strtod_r+0xb96>
   d896c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d896e:	1c5a      	adds	r2, r3, #1
   d8970:	9217      	str	r2, [sp, #92]	; 0x5c
   d8972:	785b      	ldrb	r3, [r3, #1]
   d8974:	2b30      	cmp	r3, #48	; 0x30
   d8976:	d0f9      	beq.n	d896c <_strtod_r+0x104>
   d8978:	2b00      	cmp	r3, #0
   d897a:	f000 8540 	beq.w	d93fe <_strtod_r+0xb96>
   d897e:	2301      	movs	r3, #1
   d8980:	e000      	b.n	d8984 <_strtod_r+0x11c>
   d8982:	2300      	movs	r3, #0
   d8984:	f04f 0800 	mov.w	r8, #0
   d8988:	9306      	str	r3, [sp, #24]
   d898a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d898c:	9307      	str	r3, [sp, #28]
   d898e:	f8cd 8014 	str.w	r8, [sp, #20]
   d8992:	f8cd 8010 	str.w	r8, [sp, #16]
   d8996:	220a      	movs	r2, #10
   d8998:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   d899a:	782e      	ldrb	r6, [r5, #0]
   d899c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d89a0:	b2d9      	uxtb	r1, r3
   d89a2:	2909      	cmp	r1, #9
   d89a4:	d80e      	bhi.n	d89c4 <_strtod_r+0x15c>
   d89a6:	9904      	ldr	r1, [sp, #16]
   d89a8:	2908      	cmp	r1, #8
   d89aa:	bfdd      	ittte	le
   d89ac:	9905      	ldrle	r1, [sp, #20]
   d89ae:	fb02 3301 	mlale	r3, r2, r1, r3
   d89b2:	9305      	strle	r3, [sp, #20]
   d89b4:	fb02 3808 	mlagt	r8, r2, r8, r3
   d89b8:	9b04      	ldr	r3, [sp, #16]
   d89ba:	3501      	adds	r5, #1
   d89bc:	3301      	adds	r3, #1
   d89be:	9304      	str	r3, [sp, #16]
   d89c0:	9517      	str	r5, [sp, #92]	; 0x5c
   d89c2:	e7e9      	b.n	d8998 <_strtod_r+0x130>
   d89c4:	9802      	ldr	r0, [sp, #8]
   d89c6:	f7ff fe7d 	bl	d86c4 <_localeconv_r>
   d89ca:	6807      	ldr	r7, [r0, #0]
   d89cc:	9802      	ldr	r0, [sp, #8]
   d89ce:	f7ff fe79 	bl	d86c4 <_localeconv_r>
   d89d2:	6800      	ldr	r0, [r0, #0]
   d89d4:	f7ff fedf 	bl	d8796 <strlen>
   d89d8:	4639      	mov	r1, r7
   d89da:	4602      	mov	r2, r0
   d89dc:	4628      	mov	r0, r5
   d89de:	f7ff fee2 	bl	d87a6 <strncmp>
   d89e2:	4607      	mov	r7, r0
   d89e4:	b128      	cbz	r0, d89f2 <_strtod_r+0x18a>
   d89e6:	2000      	movs	r0, #0
   d89e8:	4633      	mov	r3, r6
   d89ea:	9d04      	ldr	r5, [sp, #16]
   d89ec:	4602      	mov	r2, r0
   d89ee:	4601      	mov	r1, r0
   d89f0:	e057      	b.n	d8aa2 <_strtod_r+0x23a>
   d89f2:	9802      	ldr	r0, [sp, #8]
   d89f4:	f7ff fe66 	bl	d86c4 <_localeconv_r>
   d89f8:	6800      	ldr	r0, [r0, #0]
   d89fa:	f7ff fecc 	bl	d8796 <strlen>
   d89fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a00:	181a      	adds	r2, r3, r0
   d8a02:	9217      	str	r2, [sp, #92]	; 0x5c
   d8a04:	9a04      	ldr	r2, [sp, #16]
   d8a06:	5c1b      	ldrb	r3, [r3, r0]
   d8a08:	2a00      	cmp	r2, #0
   d8a0a:	d142      	bne.n	d8a92 <_strtod_r+0x22a>
   d8a0c:	4610      	mov	r0, r2
   d8a0e:	2b30      	cmp	r3, #48	; 0x30
   d8a10:	d105      	bne.n	d8a1e <_strtod_r+0x1b6>
   d8a12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a14:	1c5a      	adds	r2, r3, #1
   d8a16:	9217      	str	r2, [sp, #92]	; 0x5c
   d8a18:	3001      	adds	r0, #1
   d8a1a:	785b      	ldrb	r3, [r3, #1]
   d8a1c:	e7f7      	b.n	d8a0e <_strtod_r+0x1a6>
   d8a1e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d8a22:	2a08      	cmp	r2, #8
   d8a24:	d843      	bhi.n	d8aae <_strtod_r+0x246>
   d8a26:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d8a28:	9207      	str	r2, [sp, #28]
   d8a2a:	4602      	mov	r2, r0
   d8a2c:	2000      	movs	r0, #0
   d8a2e:	4605      	mov	r5, r0
   d8a30:	3b30      	subs	r3, #48	; 0x30
   d8a32:	f100 0101 	add.w	r1, r0, #1
   d8a36:	d026      	beq.n	d8a86 <_strtod_r+0x21e>
   d8a38:	440a      	add	r2, r1
   d8a3a:	eb05 0c00 	add.w	ip, r5, r0
   d8a3e:	4629      	mov	r1, r5
   d8a40:	260a      	movs	r6, #10
   d8a42:	4561      	cmp	r1, ip
   d8a44:	d00e      	beq.n	d8a64 <_strtod_r+0x1fc>
   d8a46:	3101      	adds	r1, #1
   d8a48:	f101 3eff 	add.w	lr, r1, #4294967295
   d8a4c:	f1be 0f08 	cmp.w	lr, #8
   d8a50:	dc03      	bgt.n	d8a5a <_strtod_r+0x1f2>
   d8a52:	9f05      	ldr	r7, [sp, #20]
   d8a54:	4377      	muls	r7, r6
   d8a56:	9705      	str	r7, [sp, #20]
   d8a58:	e7f3      	b.n	d8a42 <_strtod_r+0x1da>
   d8a5a:	2910      	cmp	r1, #16
   d8a5c:	bfd8      	it	le
   d8a5e:	fb06 f808 	mulle.w	r8, r6, r8
   d8a62:	e7ee      	b.n	d8a42 <_strtod_r+0x1da>
   d8a64:	4428      	add	r0, r5
   d8a66:	2808      	cmp	r0, #8
   d8a68:	f100 0501 	add.w	r5, r0, #1
   d8a6c:	dc05      	bgt.n	d8a7a <_strtod_r+0x212>
   d8a6e:	9805      	ldr	r0, [sp, #20]
   d8a70:	210a      	movs	r1, #10
   d8a72:	fb01 3300 	mla	r3, r1, r0, r3
   d8a76:	9305      	str	r3, [sp, #20]
   d8a78:	e004      	b.n	d8a84 <_strtod_r+0x21c>
   d8a7a:	2d10      	cmp	r5, #16
   d8a7c:	bfdc      	itt	le
   d8a7e:	210a      	movle	r1, #10
   d8a80:	fb01 3808 	mlale	r8, r1, r8, r3
   d8a84:	2100      	movs	r1, #0
   d8a86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8a88:	1c58      	adds	r0, r3, #1
   d8a8a:	9017      	str	r0, [sp, #92]	; 0x5c
   d8a8c:	785b      	ldrb	r3, [r3, #1]
   d8a8e:	4608      	mov	r0, r1
   d8a90:	e002      	b.n	d8a98 <_strtod_r+0x230>
   d8a92:	9d04      	ldr	r5, [sp, #16]
   d8a94:	4638      	mov	r0, r7
   d8a96:	463a      	mov	r2, r7
   d8a98:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d8a9c:	2909      	cmp	r1, #9
   d8a9e:	d9c7      	bls.n	d8a30 <_strtod_r+0x1c8>
   d8aa0:	2101      	movs	r1, #1
   d8aa2:	2b65      	cmp	r3, #101	; 0x65
   d8aa4:	d001      	beq.n	d8aaa <_strtod_r+0x242>
   d8aa6:	2b45      	cmp	r3, #69	; 0x45
   d8aa8:	d151      	bne.n	d8b4e <_strtod_r+0x2e6>
   d8aaa:	b96d      	cbnz	r5, d8ac8 <_strtod_r+0x260>
   d8aac:	e004      	b.n	d8ab8 <_strtod_r+0x250>
   d8aae:	2b65      	cmp	r3, #101	; 0x65
   d8ab0:	f040 84b3 	bne.w	d941a <_strtod_r+0xbb2>
   d8ab4:	2200      	movs	r2, #0
   d8ab6:	2101      	movs	r1, #1
   d8ab8:	b928      	cbnz	r0, d8ac6 <_strtod_r+0x25e>
   d8aba:	9b06      	ldr	r3, [sp, #24]
   d8abc:	2b00      	cmp	r3, #0
   d8abe:	f000 8095 	beq.w	d8bec <_strtod_r+0x384>
   d8ac2:	4605      	mov	r5, r0
   d8ac4:	e000      	b.n	d8ac8 <_strtod_r+0x260>
   d8ac6:	2500      	movs	r5, #0
   d8ac8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   d8aca:	1c63      	adds	r3, r4, #1
   d8acc:	9317      	str	r3, [sp, #92]	; 0x5c
   d8ace:	7863      	ldrb	r3, [r4, #1]
   d8ad0:	2b2b      	cmp	r3, #43	; 0x2b
   d8ad2:	d006      	beq.n	d8ae2 <_strtod_r+0x27a>
   d8ad4:	2b2d      	cmp	r3, #45	; 0x2d
   d8ad6:	d002      	beq.n	d8ade <_strtod_r+0x276>
   d8ad8:	2600      	movs	r6, #0
   d8ada:	9603      	str	r6, [sp, #12]
   d8adc:	e006      	b.n	d8aec <_strtod_r+0x284>
   d8ade:	2301      	movs	r3, #1
   d8ae0:	e000      	b.n	d8ae4 <_strtod_r+0x27c>
   d8ae2:	2300      	movs	r3, #0
   d8ae4:	9303      	str	r3, [sp, #12]
   d8ae6:	1ca3      	adds	r3, r4, #2
   d8ae8:	9317      	str	r3, [sp, #92]	; 0x5c
   d8aea:	78a3      	ldrb	r3, [r4, #2]
   d8aec:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d8af0:	2e09      	cmp	r6, #9
   d8af2:	d82b      	bhi.n	d8b4c <_strtod_r+0x2e4>
   d8af4:	2b30      	cmp	r3, #48	; 0x30
   d8af6:	d104      	bne.n	d8b02 <_strtod_r+0x29a>
   d8af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8afa:	1c5e      	adds	r6, r3, #1
   d8afc:	9617      	str	r6, [sp, #92]	; 0x5c
   d8afe:	785b      	ldrb	r3, [r3, #1]
   d8b00:	e7f8      	b.n	d8af4 <_strtod_r+0x28c>
   d8b02:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   d8b06:	2e08      	cmp	r6, #8
   d8b08:	d821      	bhi.n	d8b4e <_strtod_r+0x2e6>
   d8b0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d8b0e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8b10:	f04f 0c0a 	mov.w	ip, #10
   d8b14:	461f      	mov	r7, r3
   d8b16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8b18:	1c5e      	adds	r6, r3, #1
   d8b1a:	9617      	str	r6, [sp, #92]	; 0x5c
   d8b1c:	785b      	ldrb	r3, [r3, #1]
   d8b1e:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   d8b22:	f1b9 0f09 	cmp.w	r9, #9
   d8b26:	d804      	bhi.n	d8b32 <_strtod_r+0x2ca>
   d8b28:	fb0c 3e0e 	mla	lr, ip, lr, r3
   d8b2c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8b30:	e7f1      	b.n	d8b16 <_strtod_r+0x2ae>
   d8b32:	1bf6      	subs	r6, r6, r7
   d8b34:	2e08      	cmp	r6, #8
   d8b36:	f644 691f 	movw	r9, #19999	; 0x4e1f
   d8b3a:	dc02      	bgt.n	d8b42 <_strtod_r+0x2da>
   d8b3c:	45f1      	cmp	r9, lr
   d8b3e:	bfa8      	it	ge
   d8b40:	46f1      	movge	r9, lr
   d8b42:	9e03      	ldr	r6, [sp, #12]
   d8b44:	b12e      	cbz	r6, d8b52 <_strtod_r+0x2ea>
   d8b46:	f1c9 0900 	rsb	r9, r9, #0
   d8b4a:	e002      	b.n	d8b52 <_strtod_r+0x2ea>
   d8b4c:	9417      	str	r4, [sp, #92]	; 0x5c
   d8b4e:	f04f 0900 	mov.w	r9, #0
   d8b52:	2d00      	cmp	r5, #0
   d8b54:	d153      	bne.n	d8bfe <_strtod_r+0x396>
   d8b56:	2800      	cmp	r0, #0
   d8b58:	f040 8451 	bne.w	d93fe <_strtod_r+0xb96>
   d8b5c:	9a06      	ldr	r2, [sp, #24]
   d8b5e:	2a00      	cmp	r2, #0
   d8b60:	f040 844d 	bne.w	d93fe <_strtod_r+0xb96>
   d8b64:	2900      	cmp	r1, #0
   d8b66:	d141      	bne.n	d8bec <_strtod_r+0x384>
   d8b68:	2b4e      	cmp	r3, #78	; 0x4e
   d8b6a:	d020      	beq.n	d8bae <_strtod_r+0x346>
   d8b6c:	dc02      	bgt.n	d8b74 <_strtod_r+0x30c>
   d8b6e:	2b49      	cmp	r3, #73	; 0x49
   d8b70:	d00a      	beq.n	d8b88 <_strtod_r+0x320>
   d8b72:	e03b      	b.n	d8bec <_strtod_r+0x384>
   d8b74:	2b69      	cmp	r3, #105	; 0x69
   d8b76:	d007      	beq.n	d8b88 <_strtod_r+0x320>
   d8b78:	2b6e      	cmp	r3, #110	; 0x6e
   d8b7a:	d018      	beq.n	d8bae <_strtod_r+0x346>
   d8b7c:	e036      	b.n	d8bec <_strtod_r+0x384>
   d8b7e:	bf00      	nop
   d8b80:	000daafc 	.word	0x000daafc
   d8b84:	7ff00000 	.word	0x7ff00000
   d8b88:	49a8      	ldr	r1, [pc, #672]	; (d8e2c <_strtod_r+0x5c4>)
   d8b8a:	a817      	add	r0, sp, #92	; 0x5c
   d8b8c:	f000 ff80 	bl	d9a90 <__match>
   d8b90:	b360      	cbz	r0, d8bec <_strtod_r+0x384>
   d8b92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8b94:	49a6      	ldr	r1, [pc, #664]	; (d8e30 <_strtod_r+0x5c8>)
   d8b96:	3b01      	subs	r3, #1
   d8b98:	a817      	add	r0, sp, #92	; 0x5c
   d8b9a:	9317      	str	r3, [sp, #92]	; 0x5c
   d8b9c:	f000 ff78 	bl	d9a90 <__match>
   d8ba0:	b910      	cbnz	r0, d8ba8 <_strtod_r+0x340>
   d8ba2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8ba4:	3301      	adds	r3, #1
   d8ba6:	9317      	str	r3, [sp, #92]	; 0x5c
   d8ba8:	f8df b2a0 	ldr.w	fp, [pc, #672]	; d8e4c <_strtod_r+0x5e4>
   d8bac:	e01a      	b.n	d8be4 <_strtod_r+0x37c>
   d8bae:	49a1      	ldr	r1, [pc, #644]	; (d8e34 <_strtod_r+0x5cc>)
   d8bb0:	a817      	add	r0, sp, #92	; 0x5c
   d8bb2:	f000 ff6d 	bl	d9a90 <__match>
   d8bb6:	b1c8      	cbz	r0, d8bec <_strtod_r+0x384>
   d8bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d8bba:	781b      	ldrb	r3, [r3, #0]
   d8bbc:	2b28      	cmp	r3, #40	; 0x28
   d8bbe:	d10f      	bne.n	d8be0 <_strtod_r+0x378>
   d8bc0:	aa1a      	add	r2, sp, #104	; 0x68
   d8bc2:	499d      	ldr	r1, [pc, #628]	; (d8e38 <_strtod_r+0x5d0>)
   d8bc4:	a817      	add	r0, sp, #92	; 0x5c
   d8bc6:	f000 ff76 	bl	d9ab6 <__hexnan>
   d8bca:	2805      	cmp	r0, #5
   d8bcc:	d108      	bne.n	d8be0 <_strtod_r+0x378>
   d8bce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d8bd0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   d8bd4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8bd8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8bdc:	f000 bc0f 	b.w	d93fe <_strtod_r+0xb96>
   d8be0:	f8df b26c 	ldr.w	fp, [pc, #620]	; d8e50 <_strtod_r+0x5e8>
   d8be4:	f04f 0a00 	mov.w	sl, #0
   d8be8:	f000 bc09 	b.w	d93fe <_strtod_r+0xb96>
   d8bec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d8bee:	9417      	str	r4, [sp, #92]	; 0x5c
   d8bf0:	2b00      	cmp	r3, #0
   d8bf2:	f000 840f 	beq.w	d9414 <_strtod_r+0xbac>
   d8bf6:	2300      	movs	r3, #0
   d8bf8:	930c      	str	r3, [sp, #48]	; 0x30
   d8bfa:	f000 bc02 	b.w	d9402 <_strtod_r+0xb9a>
   d8bfe:	9b04      	ldr	r3, [sp, #16]
   d8c00:	9805      	ldr	r0, [sp, #20]
   d8c02:	2b00      	cmp	r3, #0
   d8c04:	bf08      	it	eq
   d8c06:	462b      	moveq	r3, r5
   d8c08:	2d10      	cmp	r5, #16
   d8c0a:	462c      	mov	r4, r5
   d8c0c:	ebc2 0909 	rsb	r9, r2, r9
   d8c10:	bfa8      	it	ge
   d8c12:	2410      	movge	r4, #16
   d8c14:	9304      	str	r3, [sp, #16]
   d8c16:	f7ff f97d 	bl	d7f14 <__aeabi_ui2d>
   d8c1a:	2c09      	cmp	r4, #9
   d8c1c:	4682      	mov	sl, r0
   d8c1e:	468b      	mov	fp, r1
   d8c20:	dd13      	ble.n	d8c4a <_strtod_r+0x3e2>
   d8c22:	4b86      	ldr	r3, [pc, #536]	; (d8e3c <_strtod_r+0x5d4>)
   d8c24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d8c28:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d8c2c:	f7ff f9e8 	bl	d8000 <__aeabi_dmul>
   d8c30:	4606      	mov	r6, r0
   d8c32:	4640      	mov	r0, r8
   d8c34:	460f      	mov	r7, r1
   d8c36:	f7ff f96d 	bl	d7f14 <__aeabi_ui2d>
   d8c3a:	4602      	mov	r2, r0
   d8c3c:	460b      	mov	r3, r1
   d8c3e:	4630      	mov	r0, r6
   d8c40:	4639      	mov	r1, r7
   d8c42:	f7ff f82b 	bl	d7c9c <__adddf3>
   d8c46:	4682      	mov	sl, r0
   d8c48:	468b      	mov	fp, r1
   d8c4a:	2d0f      	cmp	r5, #15
   d8c4c:	dc36      	bgt.n	d8cbc <_strtod_r+0x454>
   d8c4e:	f1b9 0f00 	cmp.w	r9, #0
   d8c52:	f000 83d4 	beq.w	d93fe <_strtod_r+0xb96>
   d8c56:	dd24      	ble.n	d8ca2 <_strtod_r+0x43a>
   d8c58:	f1b9 0f16 	cmp.w	r9, #22
   d8c5c:	dc07      	bgt.n	d8c6e <_strtod_r+0x406>
   d8c5e:	4d77      	ldr	r5, [pc, #476]	; (d8e3c <_strtod_r+0x5d4>)
   d8c60:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   d8c64:	4652      	mov	r2, sl
   d8c66:	465b      	mov	r3, fp
   d8c68:	e9d9 0100 	ldrd	r0, r1, [r9]
   d8c6c:	e014      	b.n	d8c98 <_strtod_r+0x430>
   d8c6e:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8c72:	4599      	cmp	r9, r3
   d8c74:	dc22      	bgt.n	d8cbc <_strtod_r+0x454>
   d8c76:	4c71      	ldr	r4, [pc, #452]	; (d8e3c <_strtod_r+0x5d4>)
   d8c78:	f1c5 050f 	rsb	r5, r5, #15
   d8c7c:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8c80:	ebc5 0509 	rsb	r5, r5, r9
   d8c84:	4652      	mov	r2, sl
   d8c86:	465b      	mov	r3, fp
   d8c88:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8c8c:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8c90:	f7ff f9b6 	bl	d8000 <__aeabi_dmul>
   d8c94:	e9d4 2300 	ldrd	r2, r3, [r4]
   d8c98:	f7ff f9b2 	bl	d8000 <__aeabi_dmul>
   d8c9c:	4682      	mov	sl, r0
   d8c9e:	468b      	mov	fp, r1
   d8ca0:	e3ad      	b.n	d93fe <_strtod_r+0xb96>
   d8ca2:	f119 0f16 	cmn.w	r9, #22
   d8ca6:	db09      	blt.n	d8cbc <_strtod_r+0x454>
   d8ca8:	4d64      	ldr	r5, [pc, #400]	; (d8e3c <_strtod_r+0x5d4>)
   d8caa:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   d8cae:	e9d9 2300 	ldrd	r2, r3, [r9]
   d8cb2:	4650      	mov	r0, sl
   d8cb4:	4659      	mov	r1, fp
   d8cb6:	f7ff facd 	bl	d8254 <__aeabi_ddiv>
   d8cba:	e7ef      	b.n	d8c9c <_strtod_r+0x434>
   d8cbc:	1b2c      	subs	r4, r5, r4
   d8cbe:	444c      	add	r4, r9
   d8cc0:	2c00      	cmp	r4, #0
   d8cc2:	dd57      	ble.n	d8d74 <_strtod_r+0x50c>
   d8cc4:	f014 010f 	ands.w	r1, r4, #15
   d8cc8:	d00a      	beq.n	d8ce0 <_strtod_r+0x478>
   d8cca:	4b5c      	ldr	r3, [pc, #368]	; (d8e3c <_strtod_r+0x5d4>)
   d8ccc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   d8cd0:	4652      	mov	r2, sl
   d8cd2:	465b      	mov	r3, fp
   d8cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8cd8:	f7ff f992 	bl	d8000 <__aeabi_dmul>
   d8cdc:	4682      	mov	sl, r0
   d8cde:	468b      	mov	fp, r1
   d8ce0:	f034 040f 	bics.w	r4, r4, #15
   d8ce4:	f000 80b8 	beq.w	d8e58 <_strtod_r+0x5f0>
   d8ce8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   d8cec:	dd0b      	ble.n	d8d06 <_strtod_r+0x49e>
   d8cee:	2400      	movs	r4, #0
   d8cf0:	4625      	mov	r5, r4
   d8cf2:	9405      	str	r4, [sp, #20]
   d8cf4:	9404      	str	r4, [sp, #16]
   d8cf6:	9a02      	ldr	r2, [sp, #8]
   d8cf8:	f8df b150 	ldr.w	fp, [pc, #336]	; d8e4c <_strtod_r+0x5e4>
   d8cfc:	2322      	movs	r3, #34	; 0x22
   d8cfe:	6013      	str	r3, [r2, #0]
   d8d00:	f04f 0a00 	mov.w	sl, #0
   d8d04:	e187      	b.n	d9016 <_strtod_r+0x7ae>
   d8d06:	4e4e      	ldr	r6, [pc, #312]	; (d8e40 <_strtod_r+0x5d8>)
   d8d08:	2300      	movs	r3, #0
   d8d0a:	1124      	asrs	r4, r4, #4
   d8d0c:	4650      	mov	r0, sl
   d8d0e:	4659      	mov	r1, fp
   d8d10:	4698      	mov	r8, r3
   d8d12:	4637      	mov	r7, r6
   d8d14:	2c01      	cmp	r4, #1
   d8d16:	dd0b      	ble.n	d8d30 <_strtod_r+0x4c8>
   d8d18:	07e2      	lsls	r2, r4, #31
   d8d1a:	d504      	bpl.n	d8d26 <_strtod_r+0x4be>
   d8d1c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8d20:	f7ff f96e 	bl	d8000 <__aeabi_dmul>
   d8d24:	2301      	movs	r3, #1
   d8d26:	f108 0801 	add.w	r8, r8, #1
   d8d2a:	1064      	asrs	r4, r4, #1
   d8d2c:	3608      	adds	r6, #8
   d8d2e:	e7f1      	b.n	d8d14 <_strtod_r+0x4ac>
   d8d30:	b10b      	cbz	r3, d8d36 <_strtod_r+0x4ce>
   d8d32:	4682      	mov	sl, r0
   d8d34:	468b      	mov	fp, r1
   d8d36:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d8d3a:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   d8d3e:	4652      	mov	r2, sl
   d8d40:	465b      	mov	r3, fp
   d8d42:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8d46:	f7ff f95b 	bl	d8000 <__aeabi_dmul>
   d8d4a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8d4e:	468b      	mov	fp, r1
   d8d50:	460a      	mov	r2, r1
   d8d52:	0d1b      	lsrs	r3, r3, #20
   d8d54:	493b      	ldr	r1, [pc, #236]	; (d8e44 <_strtod_r+0x5dc>)
   d8d56:	051b      	lsls	r3, r3, #20
   d8d58:	428b      	cmp	r3, r1
   d8d5a:	4682      	mov	sl, r0
   d8d5c:	d8c7      	bhi.n	d8cee <_strtod_r+0x486>
   d8d5e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8d62:	428b      	cmp	r3, r1
   d8d64:	bf86      	itte	hi
   d8d66:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; d8e54 <_strtod_r+0x5ec>
   d8d6a:	f04f 3aff 	movhi.w	sl, #4294967295
   d8d6e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8d72:	e071      	b.n	d8e58 <_strtod_r+0x5f0>
   d8d74:	d070      	beq.n	d8e58 <_strtod_r+0x5f0>
   d8d76:	4264      	negs	r4, r4
   d8d78:	f014 020f 	ands.w	r2, r4, #15
   d8d7c:	d00a      	beq.n	d8d94 <_strtod_r+0x52c>
   d8d7e:	4b2f      	ldr	r3, [pc, #188]	; (d8e3c <_strtod_r+0x5d4>)
   d8d80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d8d84:	4650      	mov	r0, sl
   d8d86:	4659      	mov	r1, fp
   d8d88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8d8c:	f7ff fa62 	bl	d8254 <__aeabi_ddiv>
   d8d90:	4682      	mov	sl, r0
   d8d92:	468b      	mov	fp, r1
   d8d94:	1124      	asrs	r4, r4, #4
   d8d96:	d05f      	beq.n	d8e58 <_strtod_r+0x5f0>
   d8d98:	2c1f      	cmp	r4, #31
   d8d9a:	dd04      	ble.n	d8da6 <_strtod_r+0x53e>
   d8d9c:	2400      	movs	r4, #0
   d8d9e:	4625      	mov	r5, r4
   d8da0:	9405      	str	r4, [sp, #20]
   d8da2:	9404      	str	r4, [sp, #16]
   d8da4:	e130      	b.n	d9008 <_strtod_r+0x7a0>
   d8da6:	f014 0f10 	tst.w	r4, #16
   d8daa:	bf0c      	ite	eq
   d8dac:	2300      	moveq	r3, #0
   d8dae:	236a      	movne	r3, #106	; 0x6a
   d8db0:	4e25      	ldr	r6, [pc, #148]	; (d8e48 <_strtod_r+0x5e0>)
   d8db2:	9303      	str	r3, [sp, #12]
   d8db4:	4650      	mov	r0, sl
   d8db6:	4659      	mov	r1, fp
   d8db8:	2300      	movs	r3, #0
   d8dba:	2c00      	cmp	r4, #0
   d8dbc:	dd09      	ble.n	d8dd2 <_strtod_r+0x56a>
   d8dbe:	07e2      	lsls	r2, r4, #31
   d8dc0:	d504      	bpl.n	d8dcc <_strtod_r+0x564>
   d8dc2:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8dc6:	f7ff f91b 	bl	d8000 <__aeabi_dmul>
   d8dca:	2301      	movs	r3, #1
   d8dcc:	1064      	asrs	r4, r4, #1
   d8dce:	3608      	adds	r6, #8
   d8dd0:	e7f3      	b.n	d8dba <_strtod_r+0x552>
   d8dd2:	b10b      	cbz	r3, d8dd8 <_strtod_r+0x570>
   d8dd4:	4682      	mov	sl, r0
   d8dd6:	468b      	mov	fp, r1
   d8dd8:	9b03      	ldr	r3, [sp, #12]
   d8dda:	b1eb      	cbz	r3, d8e18 <_strtod_r+0x5b0>
   d8ddc:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d8de0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8de4:	2b00      	cmp	r3, #0
   d8de6:	4659      	mov	r1, fp
   d8de8:	dd16      	ble.n	d8e18 <_strtod_r+0x5b0>
   d8dea:	2b1f      	cmp	r3, #31
   d8dec:	dd0e      	ble.n	d8e0c <_strtod_r+0x5a4>
   d8dee:	2b34      	cmp	r3, #52	; 0x34
   d8df0:	bfde      	ittt	le
   d8df2:	3b20      	suble	r3, #32
   d8df4:	f04f 32ff 	movle.w	r2, #4294967295
   d8df8:	fa02 f303 	lslle.w	r3, r2, r3
   d8dfc:	f04f 0a00 	mov.w	sl, #0
   d8e00:	bfcc      	ite	gt
   d8e02:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d8e06:	ea03 0b01 	andle.w	fp, r3, r1
   d8e0a:	e005      	b.n	d8e18 <_strtod_r+0x5b0>
   d8e0c:	f04f 32ff 	mov.w	r2, #4294967295
   d8e10:	fa02 f303 	lsl.w	r3, r2, r3
   d8e14:	ea03 0a0a 	and.w	sl, r3, sl
   d8e18:	2200      	movs	r2, #0
   d8e1a:	2300      	movs	r3, #0
   d8e1c:	4650      	mov	r0, sl
   d8e1e:	4659      	mov	r1, fp
   d8e20:	f7ff fb56 	bl	d84d0 <__aeabi_dcmpeq>
   d8e24:	2800      	cmp	r0, #0
   d8e26:	d1b9      	bne.n	d8d9c <_strtod_r+0x534>
   d8e28:	e018      	b.n	d8e5c <_strtod_r+0x5f4>
   d8e2a:	bf00      	nop
   d8e2c:	000dab24 	.word	0x000dab24
   d8e30:	000dab27 	.word	0x000dab27
   d8e34:	000dab2d 	.word	0x000dab2d
   d8e38:	000dab10 	.word	0x000dab10
   d8e3c:	000dab58 	.word	0x000dab58
   d8e40:	000dac20 	.word	0x000dac20
   d8e44:	7ca00000 	.word	0x7ca00000
   d8e48:	000dab30 	.word	0x000dab30
   d8e4c:	7ff00000 	.word	0x7ff00000
   d8e50:	fff80000 	.word	0xfff80000
   d8e54:	7fefffff 	.word	0x7fefffff
   d8e58:	2300      	movs	r3, #0
   d8e5a:	9303      	str	r3, [sp, #12]
   d8e5c:	9b05      	ldr	r3, [sp, #20]
   d8e5e:	9300      	str	r3, [sp, #0]
   d8e60:	9a04      	ldr	r2, [sp, #16]
   d8e62:	9907      	ldr	r1, [sp, #28]
   d8e64:	9802      	ldr	r0, [sp, #8]
   d8e66:	462b      	mov	r3, r5
   d8e68:	f000 ff3a 	bl	d9ce0 <__s2b>
   d8e6c:	9005      	str	r0, [sp, #20]
   d8e6e:	2800      	cmp	r0, #0
   d8e70:	f43f af3d 	beq.w	d8cee <_strtod_r+0x486>
   d8e74:	f1b9 0f00 	cmp.w	r9, #0
   d8e78:	f1c9 0300 	rsb	r3, r9, #0
   d8e7c:	bfa8      	it	ge
   d8e7e:	2300      	movge	r3, #0
   d8e80:	930d      	str	r3, [sp, #52]	; 0x34
   d8e82:	2400      	movs	r4, #0
   d8e84:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   d8e88:	9312      	str	r3, [sp, #72]	; 0x48
   d8e8a:	4625      	mov	r5, r4
   d8e8c:	9b05      	ldr	r3, [sp, #20]
   d8e8e:	9802      	ldr	r0, [sp, #8]
   d8e90:	6859      	ldr	r1, [r3, #4]
   d8e92:	f000 fe9e 	bl	d9bd2 <_Balloc>
   d8e96:	9004      	str	r0, [sp, #16]
   d8e98:	2800      	cmp	r0, #0
   d8e9a:	f43f af2c 	beq.w	d8cf6 <_strtod_r+0x48e>
   d8e9e:	9b05      	ldr	r3, [sp, #20]
   d8ea0:	691a      	ldr	r2, [r3, #16]
   d8ea2:	3202      	adds	r2, #2
   d8ea4:	f103 010c 	add.w	r1, r3, #12
   d8ea8:	0092      	lsls	r2, r2, #2
   d8eaa:	300c      	adds	r0, #12
   d8eac:	f7ff fc0e 	bl	d86cc <memcpy>
   d8eb0:	aa1a      	add	r2, sp, #104	; 0x68
   d8eb2:	a919      	add	r1, sp, #100	; 0x64
   d8eb4:	ec4b ab10 	vmov	d0, sl, fp
   d8eb8:	9802      	ldr	r0, [sp, #8]
   d8eba:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d8ebe:	f001 f9c4 	bl	da24a <__d2b>
   d8ec2:	9018      	str	r0, [sp, #96]	; 0x60
   d8ec4:	2800      	cmp	r0, #0
   d8ec6:	f43f af16 	beq.w	d8cf6 <_strtod_r+0x48e>
   d8eca:	2101      	movs	r1, #1
   d8ecc:	9802      	ldr	r0, [sp, #8]
   d8ece:	f000 ff92 	bl	d9df6 <__i2b>
   d8ed2:	4605      	mov	r5, r0
   d8ed4:	2800      	cmp	r0, #0
   d8ed6:	f43f af0e 	beq.w	d8cf6 <_strtod_r+0x48e>
   d8eda:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8edc:	9903      	ldr	r1, [sp, #12]
   d8ede:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   d8ee0:	2b00      	cmp	r3, #0
   d8ee2:	bfad      	iteet	ge
   d8ee4:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   d8ee6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   d8ee8:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   d8eec:	eb02 0803 	addge.w	r8, r2, r3
   d8ef0:	bfb8      	it	lt
   d8ef2:	1ad2      	sublt	r2, r2, r3
   d8ef4:	eba3 0301 	sub.w	r3, r3, r1
   d8ef8:	4433      	add	r3, r6
   d8efa:	49b5      	ldr	r1, [pc, #724]	; (d91d0 <_strtod_r+0x968>)
   d8efc:	bfa8      	it	ge
   d8efe:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   d8f00:	3b01      	subs	r3, #1
   d8f02:	428b      	cmp	r3, r1
   d8f04:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   d8f08:	f280 808a 	bge.w	d9020 <_strtod_r+0x7b8>
   d8f0c:	1ac9      	subs	r1, r1, r3
   d8f0e:	291f      	cmp	r1, #31
   d8f10:	bfc8      	it	gt
   d8f12:	4fb0      	ldrgt	r7, [pc, #704]	; (d91d4 <_strtod_r+0x96c>)
   d8f14:	f04f 0901 	mov.w	r9, #1
   d8f18:	bfd4      	ite	le
   d8f1a:	fa09 f301 	lslle.w	r3, r9, r1
   d8f1e:	1aff      	subgt	r7, r7, r3
   d8f20:	eba6 0601 	sub.w	r6, r6, r1
   d8f24:	bfd9      	ittee	le
   d8f26:	9306      	strle	r3, [sp, #24]
   d8f28:	2700      	movle	r7, #0
   d8f2a:	fa09 f707 	lslgt.w	r7, r9, r7
   d8f2e:	f8cd 9018 	strgt.w	r9, [sp, #24]
   d8f32:	eb08 0906 	add.w	r9, r8, r6
   d8f36:	9b03      	ldr	r3, [sp, #12]
   d8f38:	45c8      	cmp	r8, r9
   d8f3a:	4416      	add	r6, r2
   d8f3c:	441e      	add	r6, r3
   d8f3e:	4643      	mov	r3, r8
   d8f40:	bfa8      	it	ge
   d8f42:	464b      	movge	r3, r9
   d8f44:	42b3      	cmp	r3, r6
   d8f46:	bfa8      	it	ge
   d8f48:	4633      	movge	r3, r6
   d8f4a:	2b00      	cmp	r3, #0
   d8f4c:	bfc2      	ittt	gt
   d8f4e:	ebc3 0909 	rsbgt	r9, r3, r9
   d8f52:	1af6      	subgt	r6, r6, r3
   d8f54:	ebc3 0808 	rsbgt	r8, r3, r8
   d8f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8f5a:	2b00      	cmp	r3, #0
   d8f5c:	d164      	bne.n	d9028 <_strtod_r+0x7c0>
   d8f5e:	f1b9 0f00 	cmp.w	r9, #0
   d8f62:	dc7a      	bgt.n	d905a <_strtod_r+0x7f2>
   d8f64:	9b12      	ldr	r3, [sp, #72]	; 0x48
   d8f66:	2b00      	cmp	r3, #0
   d8f68:	f040 8081 	bne.w	d906e <_strtod_r+0x806>
   d8f6c:	2e00      	cmp	r6, #0
   d8f6e:	f300 8088 	bgt.w	d9082 <_strtod_r+0x81a>
   d8f72:	f1b8 0f00 	cmp.w	r8, #0
   d8f76:	f300 808e 	bgt.w	d9096 <_strtod_r+0x82e>
   d8f7a:	9a04      	ldr	r2, [sp, #16]
   d8f7c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d8f7e:	9802      	ldr	r0, [sp, #8]
   d8f80:	f001 f88f 	bl	da0a2 <__mdiff>
   d8f84:	4604      	mov	r4, r0
   d8f86:	2800      	cmp	r0, #0
   d8f88:	f43f aeb5 	beq.w	d8cf6 <_strtod_r+0x48e>
   d8f8c:	68c3      	ldr	r3, [r0, #12]
   d8f8e:	9307      	str	r3, [sp, #28]
   d8f90:	2300      	movs	r3, #0
   d8f92:	60c3      	str	r3, [r0, #12]
   d8f94:	4629      	mov	r1, r5
   d8f96:	f001 f868 	bl	da06a <__mcmp>
   d8f9a:	2800      	cmp	r0, #0
   d8f9c:	f280 8089 	bge.w	d90b2 <_strtod_r+0x84a>
   d8fa0:	9b07      	ldr	r3, [sp, #28]
   d8fa2:	2b00      	cmp	r3, #0
   d8fa4:	f040 8204 	bne.w	d93b0 <_strtod_r+0xb48>
   d8fa8:	f1ba 0f00 	cmp.w	sl, #0
   d8fac:	f040 8200 	bne.w	d93b0 <_strtod_r+0xb48>
   d8fb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8fb4:	2b00      	cmp	r3, #0
   d8fb6:	f040 81fb 	bne.w	d93b0 <_strtod_r+0xb48>
   d8fba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8fbe:	0d1b      	lsrs	r3, r3, #20
   d8fc0:	051b      	lsls	r3, r3, #20
   d8fc2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8fc6:	f240 81f3 	bls.w	d93b0 <_strtod_r+0xb48>
   d8fca:	6963      	ldr	r3, [r4, #20]
   d8fcc:	2b00      	cmp	r3, #0
   d8fce:	d06c      	beq.n	d90aa <_strtod_r+0x842>
   d8fd0:	4621      	mov	r1, r4
   d8fd2:	2201      	movs	r2, #1
   d8fd4:	9802      	ldr	r0, [sp, #8]
   d8fd6:	f000 fff7 	bl	d9fc8 <__lshift>
   d8fda:	4629      	mov	r1, r5
   d8fdc:	4604      	mov	r4, r0
   d8fde:	f001 f844 	bl	da06a <__mcmp>
   d8fe2:	2800      	cmp	r0, #0
   d8fe4:	f340 81e4 	ble.w	d93b0 <_strtod_r+0xb48>
   d8fe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8fec:	9a03      	ldr	r2, [sp, #12]
   d8fee:	0d1b      	lsrs	r3, r3, #20
   d8ff0:	051b      	lsls	r3, r3, #20
   d8ff2:	2a00      	cmp	r2, #0
   d8ff4:	f000 808c 	beq.w	d9110 <_strtod_r+0x8a8>
   d8ff8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d8ffc:	f300 8088 	bgt.w	d9110 <_strtod_r+0x8a8>
   d9000:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   d9004:	f300 81d6 	bgt.w	d93b4 <_strtod_r+0xb4c>
   d9008:	9a02      	ldr	r2, [sp, #8]
   d900a:	2322      	movs	r3, #34	; 0x22
   d900c:	f04f 0a00 	mov.w	sl, #0
   d9010:	f04f 0b00 	mov.w	fp, #0
   d9014:	6013      	str	r3, [r2, #0]
   d9016:	9b05      	ldr	r3, [sp, #20]
   d9018:	2b00      	cmp	r3, #0
   d901a:	f040 81dc 	bne.w	d93d6 <_strtod_r+0xb6e>
   d901e:	e1ee      	b.n	d93fe <_strtod_r+0xb96>
   d9020:	2301      	movs	r3, #1
   d9022:	2700      	movs	r7, #0
   d9024:	9306      	str	r3, [sp, #24]
   d9026:	e784      	b.n	d8f32 <_strtod_r+0x6ca>
   d9028:	4629      	mov	r1, r5
   d902a:	461a      	mov	r2, r3
   d902c:	9802      	ldr	r0, [sp, #8]
   d902e:	f000 ff7d 	bl	d9f2c <__pow5mult>
   d9032:	4605      	mov	r5, r0
   d9034:	2800      	cmp	r0, #0
   d9036:	f43f ae5e 	beq.w	d8cf6 <_strtod_r+0x48e>
   d903a:	4601      	mov	r1, r0
   d903c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d903e:	9802      	ldr	r0, [sp, #8]
   d9040:	f000 fee2 	bl	d9e08 <__multiply>
   d9044:	9007      	str	r0, [sp, #28]
   d9046:	2800      	cmp	r0, #0
   d9048:	f43f ae55 	beq.w	d8cf6 <_strtod_r+0x48e>
   d904c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d904e:	9802      	ldr	r0, [sp, #8]
   d9050:	f000 fdf4 	bl	d9c3c <_Bfree>
   d9054:	9b07      	ldr	r3, [sp, #28]
   d9056:	9318      	str	r3, [sp, #96]	; 0x60
   d9058:	e781      	b.n	d8f5e <_strtod_r+0x6f6>
   d905a:	464a      	mov	r2, r9
   d905c:	9918      	ldr	r1, [sp, #96]	; 0x60
   d905e:	9802      	ldr	r0, [sp, #8]
   d9060:	f000 ffb2 	bl	d9fc8 <__lshift>
   d9064:	9018      	str	r0, [sp, #96]	; 0x60
   d9066:	2800      	cmp	r0, #0
   d9068:	f47f af7c 	bne.w	d8f64 <_strtod_r+0x6fc>
   d906c:	e643      	b.n	d8cf6 <_strtod_r+0x48e>
   d906e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   d9070:	9904      	ldr	r1, [sp, #16]
   d9072:	9802      	ldr	r0, [sp, #8]
   d9074:	f000 ff5a 	bl	d9f2c <__pow5mult>
   d9078:	9004      	str	r0, [sp, #16]
   d907a:	2800      	cmp	r0, #0
   d907c:	f47f af76 	bne.w	d8f6c <_strtod_r+0x704>
   d9080:	e639      	b.n	d8cf6 <_strtod_r+0x48e>
   d9082:	4632      	mov	r2, r6
   d9084:	9904      	ldr	r1, [sp, #16]
   d9086:	9802      	ldr	r0, [sp, #8]
   d9088:	f000 ff9e 	bl	d9fc8 <__lshift>
   d908c:	9004      	str	r0, [sp, #16]
   d908e:	2800      	cmp	r0, #0
   d9090:	f47f af6f 	bne.w	d8f72 <_strtod_r+0x70a>
   d9094:	e62f      	b.n	d8cf6 <_strtod_r+0x48e>
   d9096:	4629      	mov	r1, r5
   d9098:	4642      	mov	r2, r8
   d909a:	9802      	ldr	r0, [sp, #8]
   d909c:	f000 ff94 	bl	d9fc8 <__lshift>
   d90a0:	4605      	mov	r5, r0
   d90a2:	2800      	cmp	r0, #0
   d90a4:	f47f af69 	bne.w	d8f7a <_strtod_r+0x712>
   d90a8:	e625      	b.n	d8cf6 <_strtod_r+0x48e>
   d90aa:	6923      	ldr	r3, [r4, #16]
   d90ac:	2b01      	cmp	r3, #1
   d90ae:	dc8f      	bgt.n	d8fd0 <_strtod_r+0x768>
   d90b0:	e17e      	b.n	d93b0 <_strtod_r+0xb48>
   d90b2:	d161      	bne.n	d9178 <_strtod_r+0x910>
   d90b4:	9a07      	ldr	r2, [sp, #28]
   d90b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d90ba:	b322      	cbz	r2, d9106 <_strtod_r+0x89e>
   d90bc:	4946      	ldr	r1, [pc, #280]	; (d91d8 <_strtod_r+0x970>)
   d90be:	428b      	cmp	r3, r1
   d90c0:	465a      	mov	r2, fp
   d90c2:	d12e      	bne.n	d9122 <_strtod_r+0x8ba>
   d90c4:	9b03      	ldr	r3, [sp, #12]
   d90c6:	4651      	mov	r1, sl
   d90c8:	b163      	cbz	r3, d90e4 <_strtod_r+0x87c>
   d90ca:	4b44      	ldr	r3, [pc, #272]	; (d91dc <_strtod_r+0x974>)
   d90cc:	4013      	ands	r3, r2
   d90ce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d90d2:	d807      	bhi.n	d90e4 <_strtod_r+0x87c>
   d90d4:	0d1b      	lsrs	r3, r3, #20
   d90d6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d90da:	f04f 30ff 	mov.w	r0, #4294967295
   d90de:	fa00 f303 	lsl.w	r3, r0, r3
   d90e2:	e001      	b.n	d90e8 <_strtod_r+0x880>
   d90e4:	f04f 33ff 	mov.w	r3, #4294967295
   d90e8:	428b      	cmp	r3, r1
   d90ea:	d11a      	bne.n	d9122 <_strtod_r+0x8ba>
   d90ec:	493c      	ldr	r1, [pc, #240]	; (d91e0 <_strtod_r+0x978>)
   d90ee:	428a      	cmp	r2, r1
   d90f0:	d102      	bne.n	d90f8 <_strtod_r+0x890>
   d90f2:	3301      	adds	r3, #1
   d90f4:	f43f adff 	beq.w	d8cf6 <_strtod_r+0x48e>
   d90f8:	4b38      	ldr	r3, [pc, #224]	; (d91dc <_strtod_r+0x974>)
   d90fa:	4013      	ands	r3, r2
   d90fc:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9100:	f04f 0a00 	mov.w	sl, #0
   d9104:	e154      	b.n	d93b0 <_strtod_r+0xb48>
   d9106:	b963      	cbnz	r3, d9122 <_strtod_r+0x8ba>
   d9108:	f1ba 0f00 	cmp.w	sl, #0
   d910c:	d109      	bne.n	d9122 <_strtod_r+0x8ba>
   d910e:	e76b      	b.n	d8fe8 <_strtod_r+0x780>
   d9110:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9114:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9118:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d911c:	f04f 3aff 	mov.w	sl, #4294967295
   d9120:	e146      	b.n	d93b0 <_strtod_r+0xb48>
   d9122:	b117      	cbz	r7, d912a <_strtod_r+0x8c2>
   d9124:	ea17 0f0b 	tst.w	r7, fp
   d9128:	e002      	b.n	d9130 <_strtod_r+0x8c8>
   d912a:	9b06      	ldr	r3, [sp, #24]
   d912c:	ea13 0f0a 	tst.w	r3, sl
   d9130:	f000 813e 	beq.w	d93b0 <_strtod_r+0xb48>
   d9134:	9b07      	ldr	r3, [sp, #28]
   d9136:	9a03      	ldr	r2, [sp, #12]
   d9138:	4650      	mov	r0, sl
   d913a:	4659      	mov	r1, fp
   d913c:	b153      	cbz	r3, d9154 <_strtod_r+0x8ec>
   d913e:	f7ff fb74 	bl	d882a <sulp>
   d9142:	4602      	mov	r2, r0
   d9144:	460b      	mov	r3, r1
   d9146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d914a:	f7fe fda7 	bl	d7c9c <__adddf3>
   d914e:	4682      	mov	sl, r0
   d9150:	468b      	mov	fp, r1
   d9152:	e12d      	b.n	d93b0 <_strtod_r+0xb48>
   d9154:	f7ff fb69 	bl	d882a <sulp>
   d9158:	4602      	mov	r2, r0
   d915a:	460b      	mov	r3, r1
   d915c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   d9160:	f7fe fd9a 	bl	d7c98 <__aeabi_dsub>
   d9164:	2200      	movs	r2, #0
   d9166:	2300      	movs	r3, #0
   d9168:	4682      	mov	sl, r0
   d916a:	468b      	mov	fp, r1
   d916c:	f7ff f9b0 	bl	d84d0 <__aeabi_dcmpeq>
   d9170:	2800      	cmp	r0, #0
   d9172:	f47f af49 	bne.w	d9008 <_strtod_r+0x7a0>
   d9176:	e11b      	b.n	d93b0 <_strtod_r+0xb48>
   d9178:	4629      	mov	r1, r5
   d917a:	4620      	mov	r0, r4
   d917c:	f001 f8b3 	bl	da2e6 <__ratio>
   d9180:	ec57 6b10 	vmov	r6, r7, d0
   d9184:	2200      	movs	r2, #0
   d9186:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d918a:	ee10 0a10 	vmov	r0, s0
   d918e:	4639      	mov	r1, r7
   d9190:	f7ff f9b2 	bl	d84f8 <__aeabi_dcmple>
   d9194:	2800      	cmp	r0, #0
   d9196:	d042      	beq.n	d921e <_strtod_r+0x9b6>
   d9198:	9b07      	ldr	r3, [sp, #28]
   d919a:	b123      	cbz	r3, d91a6 <_strtod_r+0x93e>
   d919c:	f04f 0800 	mov.w	r8, #0
   d91a0:	f8df 9040 	ldr.w	r9, [pc, #64]	; d91e4 <_strtod_r+0x97c>
   d91a4:	e011      	b.n	d91ca <_strtod_r+0x962>
   d91a6:	f1ba 0f00 	cmp.w	sl, #0
   d91aa:	d103      	bne.n	d91b4 <_strtod_r+0x94c>
   d91ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d91b0:	b93b      	cbnz	r3, d91c2 <_strtod_r+0x95a>
   d91b2:	e01b      	b.n	d91ec <_strtod_r+0x984>
   d91b4:	f1ba 0f01 	cmp.w	sl, #1
   d91b8:	d103      	bne.n	d91c2 <_strtod_r+0x95a>
   d91ba:	f1bb 0f00 	cmp.w	fp, #0
   d91be:	f43f af23 	beq.w	d9008 <_strtod_r+0x7a0>
   d91c2:	f8df 9024 	ldr.w	r9, [pc, #36]	; d91e8 <_strtod_r+0x980>
   d91c6:	f04f 0800 	mov.w	r8, #0
   d91ca:	2600      	movs	r6, #0
   d91cc:	4f05      	ldr	r7, [pc, #20]	; (d91e4 <_strtod_r+0x97c>)
   d91ce:	e039      	b.n	d9244 <_strtod_r+0x9dc>
   d91d0:	fffffc02 	.word	0xfffffc02
   d91d4:	fffffbe2 	.word	0xfffffbe2
   d91d8:	000fffff 	.word	0x000fffff
   d91dc:	7ff00000 	.word	0x7ff00000
   d91e0:	7fefffff 	.word	0x7fefffff
   d91e4:	3ff00000 	.word	0x3ff00000
   d91e8:	bff00000 	.word	0xbff00000
   d91ec:	2200      	movs	r2, #0
   d91ee:	4b98      	ldr	r3, [pc, #608]	; (d9450 <_strtod_r+0xbe8>)
   d91f0:	4630      	mov	r0, r6
   d91f2:	4639      	mov	r1, r7
   d91f4:	f7ff f976 	bl	d84e4 <__aeabi_dcmplt>
   d91f8:	b940      	cbnz	r0, d920c <_strtod_r+0x9a4>
   d91fa:	4630      	mov	r0, r6
   d91fc:	4639      	mov	r1, r7
   d91fe:	2200      	movs	r2, #0
   d9200:	4b94      	ldr	r3, [pc, #592]	; (d9454 <_strtod_r+0xbec>)
   d9202:	f7fe fefd 	bl	d8000 <__aeabi_dmul>
   d9206:	4606      	mov	r6, r0
   d9208:	460f      	mov	r7, r1
   d920a:	e001      	b.n	d9210 <_strtod_r+0x9a8>
   d920c:	4f91      	ldr	r7, [pc, #580]	; (d9454 <_strtod_r+0xbec>)
   d920e:	2600      	movs	r6, #0
   d9210:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d9214:	9614      	str	r6, [sp, #80]	; 0x50
   d9216:	9315      	str	r3, [sp, #84]	; 0x54
   d9218:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   d921c:	e012      	b.n	d9244 <_strtod_r+0x9dc>
   d921e:	4b8d      	ldr	r3, [pc, #564]	; (d9454 <_strtod_r+0xbec>)
   d9220:	4630      	mov	r0, r6
   d9222:	4639      	mov	r1, r7
   d9224:	2200      	movs	r2, #0
   d9226:	f7fe feeb 	bl	d8000 <__aeabi_dmul>
   d922a:	9b07      	ldr	r3, [sp, #28]
   d922c:	4606      	mov	r6, r0
   d922e:	460f      	mov	r7, r1
   d9230:	b923      	cbnz	r3, d923c <_strtod_r+0x9d4>
   d9232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9236:	900e      	str	r0, [sp, #56]	; 0x38
   d9238:	930f      	str	r3, [sp, #60]	; 0x3c
   d923a:	e001      	b.n	d9240 <_strtod_r+0x9d8>
   d923c:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   d9240:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   d9244:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9248:	0d1b      	lsrs	r3, r3, #20
   d924a:	051b      	lsls	r3, r3, #20
   d924c:	9306      	str	r3, [sp, #24]
   d924e:	9a06      	ldr	r2, [sp, #24]
   d9250:	4b81      	ldr	r3, [pc, #516]	; (d9458 <_strtod_r+0xbf0>)
   d9252:	429a      	cmp	r2, r3
   d9254:	d12b      	bne.n	d92ae <_strtod_r+0xa46>
   d9256:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d925a:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d925e:	ec4b ab10 	vmov	d0, sl, fp
   d9262:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d9266:	f000 ff7b 	bl	da160 <__ulp>
   d926a:	4640      	mov	r0, r8
   d926c:	ec53 2b10 	vmov	r2, r3, d0
   d9270:	4649      	mov	r1, r9
   d9272:	f7fe fec5 	bl	d8000 <__aeabi_dmul>
   d9276:	4652      	mov	r2, sl
   d9278:	465b      	mov	r3, fp
   d927a:	f7fe fd0f 	bl	d7c9c <__adddf3>
   d927e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d9282:	0d1b      	lsrs	r3, r3, #20
   d9284:	4a75      	ldr	r2, [pc, #468]	; (d945c <_strtod_r+0xbf4>)
   d9286:	051b      	lsls	r3, r3, #20
   d9288:	4293      	cmp	r3, r2
   d928a:	4682      	mov	sl, r0
   d928c:	d90c      	bls.n	d92a8 <_strtod_r+0xa40>
   d928e:	4b74      	ldr	r3, [pc, #464]	; (d9460 <_strtod_r+0xbf8>)
   d9290:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d9292:	429a      	cmp	r2, r3
   d9294:	d103      	bne.n	d929e <_strtod_r+0xa36>
   d9296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9298:	3301      	adds	r3, #1
   d929a:	f43f ad2c 	beq.w	d8cf6 <_strtod_r+0x48e>
   d929e:	f8df b1c0 	ldr.w	fp, [pc, #448]	; d9460 <_strtod_r+0xbf8>
   d92a2:	f04f 3aff 	mov.w	sl, #4294967295
   d92a6:	e072      	b.n	d938e <_strtod_r+0xb26>
   d92a8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   d92ac:	e038      	b.n	d9320 <_strtod_r+0xab8>
   d92ae:	9b03      	ldr	r3, [sp, #12]
   d92b0:	b333      	cbz	r3, d9300 <_strtod_r+0xa98>
   d92b2:	9b06      	ldr	r3, [sp, #24]
   d92b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d92b8:	d822      	bhi.n	d9300 <_strtod_r+0xa98>
   d92ba:	a35d      	add	r3, pc, #372	; (adr r3, d9430 <_strtod_r+0xbc8>)
   d92bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d92c0:	4630      	mov	r0, r6
   d92c2:	4639      	mov	r1, r7
   d92c4:	f7ff f918 	bl	d84f8 <__aeabi_dcmple>
   d92c8:	b1a8      	cbz	r0, d92f6 <_strtod_r+0xa8e>
   d92ca:	4639      	mov	r1, r7
   d92cc:	4630      	mov	r0, r6
   d92ce:	f7ff f96f 	bl	d85b0 <__aeabi_d2uiz>
   d92d2:	2800      	cmp	r0, #0
   d92d4:	bf08      	it	eq
   d92d6:	2001      	moveq	r0, #1
   d92d8:	f7fe fe1c 	bl	d7f14 <__aeabi_ui2d>
   d92dc:	9b07      	ldr	r3, [sp, #28]
   d92de:	4606      	mov	r6, r0
   d92e0:	460f      	mov	r7, r1
   d92e2:	b923      	cbnz	r3, d92ee <_strtod_r+0xa86>
   d92e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d92e8:	9010      	str	r0, [sp, #64]	; 0x40
   d92ea:	9311      	str	r3, [sp, #68]	; 0x44
   d92ec:	e001      	b.n	d92f2 <_strtod_r+0xa8a>
   d92ee:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   d92f2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   d92f6:	9a06      	ldr	r2, [sp, #24]
   d92f8:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   d92fc:	ebc2 0903 	rsb	r9, r2, r3
   d9300:	ed9d 0b08 	vldr	d0, [sp, #32]
   d9304:	f000 ff2c 	bl	da160 <__ulp>
   d9308:	4640      	mov	r0, r8
   d930a:	ec53 2b10 	vmov	r2, r3, d0
   d930e:	4649      	mov	r1, r9
   d9310:	f7fe fe76 	bl	d8000 <__aeabi_dmul>
   d9314:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   d9318:	f7fe fcc0 	bl	d7c9c <__adddf3>
   d931c:	4682      	mov	sl, r0
   d931e:	468b      	mov	fp, r1
   d9320:	9b03      	ldr	r3, [sp, #12]
   d9322:	bba3      	cbnz	r3, d938e <_strtod_r+0xb26>
   d9324:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9328:	0d1b      	lsrs	r3, r3, #20
   d932a:	9a06      	ldr	r2, [sp, #24]
   d932c:	051b      	lsls	r3, r3, #20
   d932e:	429a      	cmp	r2, r3
   d9330:	46d8      	mov	r8, fp
   d9332:	d12c      	bne.n	d938e <_strtod_r+0xb26>
   d9334:	4639      	mov	r1, r7
   d9336:	4630      	mov	r0, r6
   d9338:	f7ff f912 	bl	d8560 <__aeabi_d2iz>
   d933c:	f7fe fdfa 	bl	d7f34 <__aeabi_i2d>
   d9340:	460b      	mov	r3, r1
   d9342:	4602      	mov	r2, r0
   d9344:	4639      	mov	r1, r7
   d9346:	4630      	mov	r0, r6
   d9348:	f7fe fca6 	bl	d7c98 <__aeabi_dsub>
   d934c:	9b07      	ldr	r3, [sp, #28]
   d934e:	4606      	mov	r6, r0
   d9350:	460f      	mov	r7, r1
   d9352:	b92b      	cbnz	r3, d9360 <_strtod_r+0xaf8>
   d9354:	f1ba 0f00 	cmp.w	sl, #0
   d9358:	d102      	bne.n	d9360 <_strtod_r+0xaf8>
   d935a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d935e:	b183      	cbz	r3, d9382 <_strtod_r+0xb1a>
   d9360:	a335      	add	r3, pc, #212	; (adr r3, d9438 <_strtod_r+0xbd0>)
   d9362:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9366:	4630      	mov	r0, r6
   d9368:	4639      	mov	r1, r7
   d936a:	f7ff f8bb 	bl	d84e4 <__aeabi_dcmplt>
   d936e:	2800      	cmp	r0, #0
   d9370:	d131      	bne.n	d93d6 <_strtod_r+0xb6e>
   d9372:	a333      	add	r3, pc, #204	; (adr r3, d9440 <_strtod_r+0xbd8>)
   d9374:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9378:	4630      	mov	r0, r6
   d937a:	4639      	mov	r1, r7
   d937c:	f7ff f8d0 	bl	d8520 <__aeabi_dcmpgt>
   d9380:	e004      	b.n	d938c <_strtod_r+0xb24>
   d9382:	a331      	add	r3, pc, #196	; (adr r3, d9448 <_strtod_r+0xbe0>)
   d9384:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9388:	f7ff f8ac 	bl	d84e4 <__aeabi_dcmplt>
   d938c:	bb18      	cbnz	r0, d93d6 <_strtod_r+0xb6e>
   d938e:	9918      	ldr	r1, [sp, #96]	; 0x60
   d9390:	9802      	ldr	r0, [sp, #8]
   d9392:	f000 fc53 	bl	d9c3c <_Bfree>
   d9396:	9904      	ldr	r1, [sp, #16]
   d9398:	9802      	ldr	r0, [sp, #8]
   d939a:	f000 fc4f 	bl	d9c3c <_Bfree>
   d939e:	4629      	mov	r1, r5
   d93a0:	9802      	ldr	r0, [sp, #8]
   d93a2:	f000 fc4b 	bl	d9c3c <_Bfree>
   d93a6:	4621      	mov	r1, r4
   d93a8:	9802      	ldr	r0, [sp, #8]
   d93aa:	f000 fc47 	bl	d9c3c <_Bfree>
   d93ae:	e56d      	b.n	d8e8c <_strtod_r+0x624>
   d93b0:	9b03      	ldr	r3, [sp, #12]
   d93b2:	b183      	cbz	r3, d93d6 <_strtod_r+0xb6e>
   d93b4:	4b2b      	ldr	r3, [pc, #172]	; (d9464 <_strtod_r+0xbfc>)
   d93b6:	930b      	str	r3, [sp, #44]	; 0x2c
   d93b8:	2300      	movs	r3, #0
   d93ba:	930a      	str	r3, [sp, #40]	; 0x28
   d93bc:	4650      	mov	r0, sl
   d93be:	4659      	mov	r1, fp
   d93c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d93c4:	f7fe fe1c 	bl	d8000 <__aeabi_dmul>
   d93c8:	4682      	mov	sl, r0
   d93ca:	468b      	mov	fp, r1
   d93cc:	b919      	cbnz	r1, d93d6 <_strtod_r+0xb6e>
   d93ce:	b910      	cbnz	r0, d93d6 <_strtod_r+0xb6e>
   d93d0:	9a02      	ldr	r2, [sp, #8]
   d93d2:	2322      	movs	r3, #34	; 0x22
   d93d4:	6013      	str	r3, [r2, #0]
   d93d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   d93d8:	9802      	ldr	r0, [sp, #8]
   d93da:	f000 fc2f 	bl	d9c3c <_Bfree>
   d93de:	9904      	ldr	r1, [sp, #16]
   d93e0:	9802      	ldr	r0, [sp, #8]
   d93e2:	f000 fc2b 	bl	d9c3c <_Bfree>
   d93e6:	4629      	mov	r1, r5
   d93e8:	9802      	ldr	r0, [sp, #8]
   d93ea:	f000 fc27 	bl	d9c3c <_Bfree>
   d93ee:	9905      	ldr	r1, [sp, #20]
   d93f0:	9802      	ldr	r0, [sp, #8]
   d93f2:	f000 fc23 	bl	d9c3c <_Bfree>
   d93f6:	4621      	mov	r1, r4
   d93f8:	9802      	ldr	r0, [sp, #8]
   d93fa:	f000 fc1f 	bl	d9c3c <_Bfree>
   d93fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d9400:	b113      	cbz	r3, d9408 <_strtod_r+0xba0>
   d9402:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   d9404:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d9406:	6013      	str	r3, [r2, #0]
   d9408:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d940a:	b11b      	cbz	r3, d9414 <_strtod_r+0xbac>
   d940c:	4652      	mov	r2, sl
   d940e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9412:	e007      	b.n	d9424 <_strtod_r+0xbbc>
   d9414:	4652      	mov	r2, sl
   d9416:	465b      	mov	r3, fp
   d9418:	e004      	b.n	d9424 <_strtod_r+0xbbc>
   d941a:	2500      	movs	r5, #0
   d941c:	462a      	mov	r2, r5
   d941e:	2101      	movs	r1, #1
   d9420:	f7ff bb41 	b.w	d8aa6 <_strtod_r+0x23e>
   d9424:	ec43 2b10 	vmov	d0, r2, r3
   d9428:	b01d      	add	sp, #116	; 0x74
   d942a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d942e:	bf00      	nop
   d9430:	ffc00000 	.word	0xffc00000
   d9434:	41dfffff 	.word	0x41dfffff
   d9438:	94a03595 	.word	0x94a03595
   d943c:	3fdfffff 	.word	0x3fdfffff
   d9440:	35afe535 	.word	0x35afe535
   d9444:	3fe00000 	.word	0x3fe00000
   d9448:	94a03595 	.word	0x94a03595
   d944c:	3fcfffff 	.word	0x3fcfffff
   d9450:	3ff00000 	.word	0x3ff00000
   d9454:	3fe00000 	.word	0x3fe00000
   d9458:	7fe00000 	.word	0x7fe00000
   d945c:	7c9fffff 	.word	0x7c9fffff
   d9460:	7fefffff 	.word	0x7fefffff
   d9464:	39500000 	.word	0x39500000

000d9468 <strtod>:
   d9468:	4b02      	ldr	r3, [pc, #8]	; (d9474 <strtod+0xc>)
   d946a:	460a      	mov	r2, r1
   d946c:	4601      	mov	r1, r0
   d946e:	6818      	ldr	r0, [r3, #0]
   d9470:	f7ff b9fa 	b.w	d8868 <_strtod_r>
   d9474:	2003e058 	.word	0x2003e058

000d9478 <_strtol_r>:
   d9478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d947c:	4680      	mov	r8, r0
   d947e:	4840      	ldr	r0, [pc, #256]	; (d9580 <_strtol_r+0x108>)
   d9480:	f8d0 9000 	ldr.w	r9, [r0]
   d9484:	460f      	mov	r7, r1
   d9486:	463d      	mov	r5, r7
   d9488:	f815 4b01 	ldrb.w	r4, [r5], #1
   d948c:	eb09 0004 	add.w	r0, r9, r4
   d9490:	7840      	ldrb	r0, [r0, #1]
   d9492:	f000 0008 	and.w	r0, r0, #8
   d9496:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d949a:	b108      	cbz	r0, d94a0 <_strtol_r+0x28>
   d949c:	462f      	mov	r7, r5
   d949e:	e7f2      	b.n	d9486 <_strtol_r+0xe>
   d94a0:	2c2d      	cmp	r4, #45	; 0x2d
   d94a2:	d103      	bne.n	d94ac <_strtol_r+0x34>
   d94a4:	1cbd      	adds	r5, r7, #2
   d94a6:	787c      	ldrb	r4, [r7, #1]
   d94a8:	2601      	movs	r6, #1
   d94aa:	e003      	b.n	d94b4 <_strtol_r+0x3c>
   d94ac:	2c2b      	cmp	r4, #43	; 0x2b
   d94ae:	bf04      	itt	eq
   d94b0:	787c      	ldrbeq	r4, [r7, #1]
   d94b2:	1cbd      	addeq	r5, r7, #2
   d94b4:	b113      	cbz	r3, d94bc <_strtol_r+0x44>
   d94b6:	2b10      	cmp	r3, #16
   d94b8:	d10a      	bne.n	d94d0 <_strtol_r+0x58>
   d94ba:	e05b      	b.n	d9574 <_strtol_r+0xfc>
   d94bc:	2c30      	cmp	r4, #48	; 0x30
   d94be:	d157      	bne.n	d9570 <_strtol_r+0xf8>
   d94c0:	7828      	ldrb	r0, [r5, #0]
   d94c2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d94c6:	2858      	cmp	r0, #88	; 0x58
   d94c8:	d14d      	bne.n	d9566 <_strtol_r+0xee>
   d94ca:	786c      	ldrb	r4, [r5, #1]
   d94cc:	2310      	movs	r3, #16
   d94ce:	3502      	adds	r5, #2
   d94d0:	2e00      	cmp	r6, #0
   d94d2:	bf14      	ite	ne
   d94d4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d94d8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d94dc:	2700      	movs	r7, #0
   d94de:	fbbc faf3 	udiv	sl, ip, r3
   d94e2:	4638      	mov	r0, r7
   d94e4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d94e8:	eb09 0e04 	add.w	lr, r9, r4
   d94ec:	f89e e001 	ldrb.w	lr, [lr, #1]
   d94f0:	f01e 0f04 	tst.w	lr, #4
   d94f4:	d001      	beq.n	d94fa <_strtol_r+0x82>
   d94f6:	3c30      	subs	r4, #48	; 0x30
   d94f8:	e00b      	b.n	d9512 <_strtol_r+0x9a>
   d94fa:	f01e 0e03 	ands.w	lr, lr, #3
   d94fe:	d01b      	beq.n	d9538 <_strtol_r+0xc0>
   d9500:	f1be 0f01 	cmp.w	lr, #1
   d9504:	bf0c      	ite	eq
   d9506:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d950a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d950e:	ebce 0404 	rsb	r4, lr, r4
   d9512:	42a3      	cmp	r3, r4
   d9514:	dd10      	ble.n	d9538 <_strtol_r+0xc0>
   d9516:	f1b7 3fff 	cmp.w	r7, #4294967295
   d951a:	d00a      	beq.n	d9532 <_strtol_r+0xba>
   d951c:	4550      	cmp	r0, sl
   d951e:	d806      	bhi.n	d952e <_strtol_r+0xb6>
   d9520:	d101      	bne.n	d9526 <_strtol_r+0xae>
   d9522:	4564      	cmp	r4, ip
   d9524:	dc03      	bgt.n	d952e <_strtol_r+0xb6>
   d9526:	fb03 4000 	mla	r0, r3, r0, r4
   d952a:	2701      	movs	r7, #1
   d952c:	e001      	b.n	d9532 <_strtol_r+0xba>
   d952e:	f04f 37ff 	mov.w	r7, #4294967295
   d9532:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9536:	e7d7      	b.n	d94e8 <_strtol_r+0x70>
   d9538:	1c7b      	adds	r3, r7, #1
   d953a:	d10c      	bne.n	d9556 <_strtol_r+0xde>
   d953c:	2e00      	cmp	r6, #0
   d953e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9542:	bf14      	ite	ne
   d9544:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9548:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d954c:	f8c8 3000 	str.w	r3, [r8]
   d9550:	b92a      	cbnz	r2, d955e <_strtol_r+0xe6>
   d9552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9556:	b106      	cbz	r6, d955a <_strtol_r+0xe2>
   d9558:	4240      	negs	r0, r0
   d955a:	b172      	cbz	r2, d957a <_strtol_r+0x102>
   d955c:	b107      	cbz	r7, d9560 <_strtol_r+0xe8>
   d955e:	1e69      	subs	r1, r5, #1
   d9560:	6011      	str	r1, [r2, #0]
   d9562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9566:	2430      	movs	r4, #48	; 0x30
   d9568:	2b00      	cmp	r3, #0
   d956a:	d1b1      	bne.n	d94d0 <_strtol_r+0x58>
   d956c:	2308      	movs	r3, #8
   d956e:	e7af      	b.n	d94d0 <_strtol_r+0x58>
   d9570:	230a      	movs	r3, #10
   d9572:	e7ad      	b.n	d94d0 <_strtol_r+0x58>
   d9574:	2c30      	cmp	r4, #48	; 0x30
   d9576:	d0a3      	beq.n	d94c0 <_strtol_r+0x48>
   d9578:	e7aa      	b.n	d94d0 <_strtol_r+0x58>
   d957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d957e:	bf00      	nop
   d9580:	2003dff4 	.word	0x2003dff4

000d9584 <strtol>:
   d9584:	4613      	mov	r3, r2
   d9586:	460a      	mov	r2, r1
   d9588:	4601      	mov	r1, r0
   d958a:	4802      	ldr	r0, [pc, #8]	; (d9594 <strtol+0x10>)
   d958c:	6800      	ldr	r0, [r0, #0]
   d958e:	f7ff bf73 	b.w	d9478 <_strtol_r>
   d9592:	bf00      	nop
   d9594:	2003e058 	.word	0x2003e058

000d9598 <rshift>:
   d9598:	b5f0      	push	{r4, r5, r6, r7, lr}
   d959a:	6906      	ldr	r6, [r0, #16]
   d959c:	114b      	asrs	r3, r1, #5
   d959e:	42b3      	cmp	r3, r6
   d95a0:	f100 0514 	add.w	r5, r0, #20
   d95a4:	da27      	bge.n	d95f6 <rshift+0x5e>
   d95a6:	f011 011f 	ands.w	r1, r1, #31
   d95aa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   d95ae:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   d95b2:	d101      	bne.n	d95b8 <rshift+0x20>
   d95b4:	4629      	mov	r1, r5
   d95b6:	e016      	b.n	d95e6 <rshift+0x4e>
   d95b8:	1d14      	adds	r4, r2, #4
   d95ba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   d95be:	f1c1 0e20 	rsb	lr, r1, #32
   d95c2:	40ca      	lsrs	r2, r1
   d95c4:	462b      	mov	r3, r5
   d95c6:	42b4      	cmp	r4, r6
   d95c8:	d209      	bcs.n	d95de <rshift+0x46>
   d95ca:	6827      	ldr	r7, [r4, #0]
   d95cc:	fa07 f70e 	lsl.w	r7, r7, lr
   d95d0:	433a      	orrs	r2, r7
   d95d2:	f843 2b04 	str.w	r2, [r3], #4
   d95d6:	f854 2b04 	ldr.w	r2, [r4], #4
   d95da:	40ca      	lsrs	r2, r1
   d95dc:	e7f3      	b.n	d95c6 <rshift+0x2e>
   d95de:	601a      	str	r2, [r3, #0]
   d95e0:	b152      	cbz	r2, d95f8 <rshift+0x60>
   d95e2:	3304      	adds	r3, #4
   d95e4:	e008      	b.n	d95f8 <rshift+0x60>
   d95e6:	42b2      	cmp	r2, r6
   d95e8:	460b      	mov	r3, r1
   d95ea:	d205      	bcs.n	d95f8 <rshift+0x60>
   d95ec:	f852 3b04 	ldr.w	r3, [r2], #4
   d95f0:	f841 3b04 	str.w	r3, [r1], #4
   d95f4:	e7f7      	b.n	d95e6 <rshift+0x4e>
   d95f6:	462b      	mov	r3, r5
   d95f8:	1b5b      	subs	r3, r3, r5
   d95fa:	109b      	asrs	r3, r3, #2
   d95fc:	6103      	str	r3, [r0, #16]
   d95fe:	b903      	cbnz	r3, d9602 <rshift+0x6a>
   d9600:	6143      	str	r3, [r0, #20]
   d9602:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9604 <__hexdig_fun>:
   d9604:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9608:	2b09      	cmp	r3, #9
   d960a:	d801      	bhi.n	d9610 <__hexdig_fun+0xc>
   d960c:	3820      	subs	r0, #32
   d960e:	e00a      	b.n	d9626 <__hexdig_fun+0x22>
   d9610:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9614:	2b05      	cmp	r3, #5
   d9616:	d801      	bhi.n	d961c <__hexdig_fun+0x18>
   d9618:	3847      	subs	r0, #71	; 0x47
   d961a:	e004      	b.n	d9626 <__hexdig_fun+0x22>
   d961c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9620:	2b05      	cmp	r3, #5
   d9622:	d802      	bhi.n	d962a <__hexdig_fun+0x26>
   d9624:	3827      	subs	r0, #39	; 0x27
   d9626:	b2c0      	uxtb	r0, r0
   d9628:	4770      	bx	lr
   d962a:	2000      	movs	r0, #0
   d962c:	4770      	bx	lr

000d962e <__gethex>:
   d962e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9632:	b08b      	sub	sp, #44	; 0x2c
   d9634:	468a      	mov	sl, r1
   d9636:	4690      	mov	r8, r2
   d9638:	9306      	str	r3, [sp, #24]
   d963a:	9002      	str	r0, [sp, #8]
   d963c:	f7ff f842 	bl	d86c4 <_localeconv_r>
   d9640:	6803      	ldr	r3, [r0, #0]
   d9642:	9303      	str	r3, [sp, #12]
   d9644:	4618      	mov	r0, r3
   d9646:	f7ff f8a6 	bl	d8796 <strlen>
   d964a:	9b03      	ldr	r3, [sp, #12]
   d964c:	9001      	str	r0, [sp, #4]
   d964e:	4403      	add	r3, r0
   d9650:	f04f 0b00 	mov.w	fp, #0
   d9654:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9658:	9307      	str	r3, [sp, #28]
   d965a:	f8da 3000 	ldr.w	r3, [sl]
   d965e:	3302      	adds	r3, #2
   d9660:	461f      	mov	r7, r3
   d9662:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9666:	2830      	cmp	r0, #48	; 0x30
   d9668:	d102      	bne.n	d9670 <__gethex+0x42>
   d966a:	f10b 0b01 	add.w	fp, fp, #1
   d966e:	e7f7      	b.n	d9660 <__gethex+0x32>
   d9670:	f7ff ffc8 	bl	d9604 <__hexdig_fun>
   d9674:	4604      	mov	r4, r0
   d9676:	b9e0      	cbnz	r0, d96b2 <__gethex+0x84>
   d9678:	9a01      	ldr	r2, [sp, #4]
   d967a:	9903      	ldr	r1, [sp, #12]
   d967c:	4638      	mov	r0, r7
   d967e:	f7ff f892 	bl	d87a6 <strncmp>
   d9682:	2800      	cmp	r0, #0
   d9684:	d134      	bne.n	d96f0 <__gethex+0xc2>
   d9686:	9b01      	ldr	r3, [sp, #4]
   d9688:	5cf8      	ldrb	r0, [r7, r3]
   d968a:	18fe      	adds	r6, r7, r3
   d968c:	f7ff ffba 	bl	d9604 <__hexdig_fun>
   d9690:	b380      	cbz	r0, d96f4 <__gethex+0xc6>
   d9692:	4633      	mov	r3, r6
   d9694:	7818      	ldrb	r0, [r3, #0]
   d9696:	2830      	cmp	r0, #48	; 0x30
   d9698:	461f      	mov	r7, r3
   d969a:	f103 0301 	add.w	r3, r3, #1
   d969e:	d0f9      	beq.n	d9694 <__gethex+0x66>
   d96a0:	f7ff ffb0 	bl	d9604 <__hexdig_fun>
   d96a4:	fab0 f580 	clz	r5, r0
   d96a8:	096d      	lsrs	r5, r5, #5
   d96aa:	4634      	mov	r4, r6
   d96ac:	f04f 0b01 	mov.w	fp, #1
   d96b0:	e001      	b.n	d96b6 <__gethex+0x88>
   d96b2:	2500      	movs	r5, #0
   d96b4:	462c      	mov	r4, r5
   d96b6:	463a      	mov	r2, r7
   d96b8:	4616      	mov	r6, r2
   d96ba:	3201      	adds	r2, #1
   d96bc:	7830      	ldrb	r0, [r6, #0]
   d96be:	f7ff ffa1 	bl	d9604 <__hexdig_fun>
   d96c2:	2800      	cmp	r0, #0
   d96c4:	d1f8      	bne.n	d96b8 <__gethex+0x8a>
   d96c6:	9a01      	ldr	r2, [sp, #4]
   d96c8:	9903      	ldr	r1, [sp, #12]
   d96ca:	4630      	mov	r0, r6
   d96cc:	f7ff f86b 	bl	d87a6 <strncmp>
   d96d0:	b950      	cbnz	r0, d96e8 <__gethex+0xba>
   d96d2:	b954      	cbnz	r4, d96ea <__gethex+0xbc>
   d96d4:	9b01      	ldr	r3, [sp, #4]
   d96d6:	18f4      	adds	r4, r6, r3
   d96d8:	4622      	mov	r2, r4
   d96da:	4616      	mov	r6, r2
   d96dc:	3201      	adds	r2, #1
   d96de:	7830      	ldrb	r0, [r6, #0]
   d96e0:	f7ff ff90 	bl	d9604 <__hexdig_fun>
   d96e4:	2800      	cmp	r0, #0
   d96e6:	d1f8      	bne.n	d96da <__gethex+0xac>
   d96e8:	b134      	cbz	r4, d96f8 <__gethex+0xca>
   d96ea:	1ba4      	subs	r4, r4, r6
   d96ec:	00a4      	lsls	r4, r4, #2
   d96ee:	e003      	b.n	d96f8 <__gethex+0xca>
   d96f0:	463e      	mov	r6, r7
   d96f2:	e000      	b.n	d96f6 <__gethex+0xc8>
   d96f4:	4604      	mov	r4, r0
   d96f6:	2501      	movs	r5, #1
   d96f8:	7833      	ldrb	r3, [r6, #0]
   d96fa:	2b50      	cmp	r3, #80	; 0x50
   d96fc:	d001      	beq.n	d9702 <__gethex+0xd4>
   d96fe:	2b70      	cmp	r3, #112	; 0x70
   d9700:	d12a      	bne.n	d9758 <__gethex+0x12a>
   d9702:	7873      	ldrb	r3, [r6, #1]
   d9704:	2b2b      	cmp	r3, #43	; 0x2b
   d9706:	d008      	beq.n	d971a <__gethex+0xec>
   d9708:	2b2d      	cmp	r3, #45	; 0x2d
   d970a:	d003      	beq.n	d9714 <__gethex+0xe6>
   d970c:	1c71      	adds	r1, r6, #1
   d970e:	f04f 0900 	mov.w	r9, #0
   d9712:	e005      	b.n	d9720 <__gethex+0xf2>
   d9714:	f04f 0901 	mov.w	r9, #1
   d9718:	e001      	b.n	d971e <__gethex+0xf0>
   d971a:	f04f 0900 	mov.w	r9, #0
   d971e:	1cb1      	adds	r1, r6, #2
   d9720:	7808      	ldrb	r0, [r1, #0]
   d9722:	f7ff ff6f 	bl	d9604 <__hexdig_fun>
   d9726:	1e43      	subs	r3, r0, #1
   d9728:	b2db      	uxtb	r3, r3
   d972a:	2b18      	cmp	r3, #24
   d972c:	d814      	bhi.n	d9758 <__gethex+0x12a>
   d972e:	f1a0 0210 	sub.w	r2, r0, #16
   d9732:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9736:	f7ff ff65 	bl	d9604 <__hexdig_fun>
   d973a:	1e43      	subs	r3, r0, #1
   d973c:	b2db      	uxtb	r3, r3
   d973e:	2b18      	cmp	r3, #24
   d9740:	d804      	bhi.n	d974c <__gethex+0x11e>
   d9742:	230a      	movs	r3, #10
   d9744:	fb03 0202 	mla	r2, r3, r2, r0
   d9748:	3a10      	subs	r2, #16
   d974a:	e7f2      	b.n	d9732 <__gethex+0x104>
   d974c:	f1b9 0f00 	cmp.w	r9, #0
   d9750:	d000      	beq.n	d9754 <__gethex+0x126>
   d9752:	4252      	negs	r2, r2
   d9754:	4414      	add	r4, r2
   d9756:	e000      	b.n	d975a <__gethex+0x12c>
   d9758:	4631      	mov	r1, r6
   d975a:	f8ca 1000 	str.w	r1, [sl]
   d975e:	b12d      	cbz	r5, d976c <__gethex+0x13e>
   d9760:	f1bb 0f00 	cmp.w	fp, #0
   d9764:	bf14      	ite	ne
   d9766:	2000      	movne	r0, #0
   d9768:	2006      	moveq	r0, #6
   d976a:	e17c      	b.n	d9a66 <__gethex+0x438>
   d976c:	1bf3      	subs	r3, r6, r7
   d976e:	3b01      	subs	r3, #1
   d9770:	4629      	mov	r1, r5
   d9772:	2b07      	cmp	r3, #7
   d9774:	dd02      	ble.n	d977c <__gethex+0x14e>
   d9776:	3101      	adds	r1, #1
   d9778:	105b      	asrs	r3, r3, #1
   d977a:	e7fa      	b.n	d9772 <__gethex+0x144>
   d977c:	9802      	ldr	r0, [sp, #8]
   d977e:	f000 fa28 	bl	d9bd2 <_Balloc>
   d9782:	9b01      	ldr	r3, [sp, #4]
   d9784:	f100 0a14 	add.w	sl, r0, #20
   d9788:	f04f 0900 	mov.w	r9, #0
   d978c:	f1c3 0301 	rsb	r3, r3, #1
   d9790:	4605      	mov	r5, r0
   d9792:	f8cd a010 	str.w	sl, [sp, #16]
   d9796:	46cb      	mov	fp, r9
   d9798:	9308      	str	r3, [sp, #32]
   d979a:	42b7      	cmp	r7, r6
   d979c:	d22f      	bcs.n	d97fe <__gethex+0x1d0>
   d979e:	1e73      	subs	r3, r6, #1
   d97a0:	9305      	str	r3, [sp, #20]
   d97a2:	9a07      	ldr	r2, [sp, #28]
   d97a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d97a8:	4293      	cmp	r3, r2
   d97aa:	d00b      	beq.n	d97c4 <__gethex+0x196>
   d97ac:	f1bb 0f20 	cmp.w	fp, #32
   d97b0:	d116      	bne.n	d97e0 <__gethex+0x1b2>
   d97b2:	9b04      	ldr	r3, [sp, #16]
   d97b4:	f8c3 9000 	str.w	r9, [r3]
   d97b8:	3304      	adds	r3, #4
   d97ba:	f04f 0900 	mov.w	r9, #0
   d97be:	9304      	str	r3, [sp, #16]
   d97c0:	46cb      	mov	fp, r9
   d97c2:	e00d      	b.n	d97e0 <__gethex+0x1b2>
   d97c4:	9b05      	ldr	r3, [sp, #20]
   d97c6:	9a08      	ldr	r2, [sp, #32]
   d97c8:	4413      	add	r3, r2
   d97ca:	429f      	cmp	r7, r3
   d97cc:	d8ee      	bhi.n	d97ac <__gethex+0x17e>
   d97ce:	4618      	mov	r0, r3
   d97d0:	9a01      	ldr	r2, [sp, #4]
   d97d2:	9903      	ldr	r1, [sp, #12]
   d97d4:	9309      	str	r3, [sp, #36]	; 0x24
   d97d6:	f7fe ffe6 	bl	d87a6 <strncmp>
   d97da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d97dc:	b168      	cbz	r0, d97fa <__gethex+0x1cc>
   d97de:	e7e5      	b.n	d97ac <__gethex+0x17e>
   d97e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d97e4:	f7ff ff0e 	bl	d9604 <__hexdig_fun>
   d97e8:	f000 000f 	and.w	r0, r0, #15
   d97ec:	fa00 f00b 	lsl.w	r0, r0, fp
   d97f0:	9b05      	ldr	r3, [sp, #20]
   d97f2:	ea49 0900 	orr.w	r9, r9, r0
   d97f6:	f10b 0b04 	add.w	fp, fp, #4
   d97fa:	461e      	mov	r6, r3
   d97fc:	e7cd      	b.n	d979a <__gethex+0x16c>
   d97fe:	9804      	ldr	r0, [sp, #16]
   d9800:	f840 9b04 	str.w	r9, [r0], #4
   d9804:	ebca 0000 	rsb	r0, sl, r0
   d9808:	1080      	asrs	r0, r0, #2
   d980a:	6128      	str	r0, [r5, #16]
   d980c:	0147      	lsls	r7, r0, #5
   d980e:	4648      	mov	r0, r9
   d9810:	f000 faa4 	bl	d9d5c <__hi0bits>
   d9814:	f8d8 6000 	ldr.w	r6, [r8]
   d9818:	1a38      	subs	r0, r7, r0
   d981a:	42b0      	cmp	r0, r6
   d981c:	dd26      	ble.n	d986c <__gethex+0x23e>
   d981e:	1b87      	subs	r7, r0, r6
   d9820:	4639      	mov	r1, r7
   d9822:	4628      	mov	r0, r5
   d9824:	f000 fda3 	bl	da36e <__any_on>
   d9828:	b1c8      	cbz	r0, d985e <__gethex+0x230>
   d982a:	1e7b      	subs	r3, r7, #1
   d982c:	1159      	asrs	r1, r3, #5
   d982e:	f003 021f 	and.w	r2, r3, #31
   d9832:	f04f 0901 	mov.w	r9, #1
   d9836:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   d983a:	fa09 f202 	lsl.w	r2, r9, r2
   d983e:	420a      	tst	r2, r1
   d9840:	d00e      	beq.n	d9860 <__gethex+0x232>
   d9842:	454b      	cmp	r3, r9
   d9844:	dc02      	bgt.n	d984c <__gethex+0x21e>
   d9846:	f04f 0902 	mov.w	r9, #2
   d984a:	e009      	b.n	d9860 <__gethex+0x232>
   d984c:	1eb9      	subs	r1, r7, #2
   d984e:	4628      	mov	r0, r5
   d9850:	f000 fd8d 	bl	da36e <__any_on>
   d9854:	2800      	cmp	r0, #0
   d9856:	d0f6      	beq.n	d9846 <__gethex+0x218>
   d9858:	f04f 0903 	mov.w	r9, #3
   d985c:	e000      	b.n	d9860 <__gethex+0x232>
   d985e:	4681      	mov	r9, r0
   d9860:	4639      	mov	r1, r7
   d9862:	4628      	mov	r0, r5
   d9864:	f7ff fe98 	bl	d9598 <rshift>
   d9868:	443c      	add	r4, r7
   d986a:	e00c      	b.n	d9886 <__gethex+0x258>
   d986c:	da09      	bge.n	d9882 <__gethex+0x254>
   d986e:	1a37      	subs	r7, r6, r0
   d9870:	4629      	mov	r1, r5
   d9872:	463a      	mov	r2, r7
   d9874:	9802      	ldr	r0, [sp, #8]
   d9876:	f000 fba7 	bl	d9fc8 <__lshift>
   d987a:	1be4      	subs	r4, r4, r7
   d987c:	4605      	mov	r5, r0
   d987e:	f100 0a14 	add.w	sl, r0, #20
   d9882:	f04f 0900 	mov.w	r9, #0
   d9886:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d988a:	429c      	cmp	r4, r3
   d988c:	dd08      	ble.n	d98a0 <__gethex+0x272>
   d988e:	9802      	ldr	r0, [sp, #8]
   d9890:	4629      	mov	r1, r5
   d9892:	f000 f9d3 	bl	d9c3c <_Bfree>
   d9896:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9898:	2300      	movs	r3, #0
   d989a:	6013      	str	r3, [r2, #0]
   d989c:	20a3      	movs	r0, #163	; 0xa3
   d989e:	e0e2      	b.n	d9a66 <__gethex+0x438>
   d98a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d98a4:	4284      	cmp	r4, r0
   d98a6:	da53      	bge.n	d9950 <__gethex+0x322>
   d98a8:	1b04      	subs	r4, r0, r4
   d98aa:	42a6      	cmp	r6, r4
   d98ac:	dc2e      	bgt.n	d990c <__gethex+0x2de>
   d98ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d98b2:	2b02      	cmp	r3, #2
   d98b4:	d01a      	beq.n	d98ec <__gethex+0x2be>
   d98b6:	2b03      	cmp	r3, #3
   d98b8:	d01c      	beq.n	d98f4 <__gethex+0x2c6>
   d98ba:	2b01      	cmp	r3, #1
   d98bc:	d11d      	bne.n	d98fa <__gethex+0x2cc>
   d98be:	42a6      	cmp	r6, r4
   d98c0:	d11b      	bne.n	d98fa <__gethex+0x2cc>
   d98c2:	2e01      	cmp	r6, #1
   d98c4:	dc0b      	bgt.n	d98de <__gethex+0x2b0>
   d98c6:	9a06      	ldr	r2, [sp, #24]
   d98c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d98cc:	6013      	str	r3, [r2, #0]
   d98ce:	2301      	movs	r3, #1
   d98d0:	612b      	str	r3, [r5, #16]
   d98d2:	f8ca 3000 	str.w	r3, [sl]
   d98d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d98d8:	2062      	movs	r0, #98	; 0x62
   d98da:	601d      	str	r5, [r3, #0]
   d98dc:	e0c3      	b.n	d9a66 <__gethex+0x438>
   d98de:	1e71      	subs	r1, r6, #1
   d98e0:	4628      	mov	r0, r5
   d98e2:	f000 fd44 	bl	da36e <__any_on>
   d98e6:	2800      	cmp	r0, #0
   d98e8:	d1ed      	bne.n	d98c6 <__gethex+0x298>
   d98ea:	e006      	b.n	d98fa <__gethex+0x2cc>
   d98ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d98ee:	2b00      	cmp	r3, #0
   d98f0:	d0e9      	beq.n	d98c6 <__gethex+0x298>
   d98f2:	e002      	b.n	d98fa <__gethex+0x2cc>
   d98f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d98f6:	2b00      	cmp	r3, #0
   d98f8:	d1e5      	bne.n	d98c6 <__gethex+0x298>
   d98fa:	9802      	ldr	r0, [sp, #8]
   d98fc:	4629      	mov	r1, r5
   d98fe:	f000 f99d 	bl	d9c3c <_Bfree>
   d9902:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9904:	2300      	movs	r3, #0
   d9906:	6013      	str	r3, [r2, #0]
   d9908:	2050      	movs	r0, #80	; 0x50
   d990a:	e0ac      	b.n	d9a66 <__gethex+0x438>
   d990c:	1e67      	subs	r7, r4, #1
   d990e:	f1b9 0f00 	cmp.w	r9, #0
   d9912:	d106      	bne.n	d9922 <__gethex+0x2f4>
   d9914:	b13f      	cbz	r7, d9926 <__gethex+0x2f8>
   d9916:	4639      	mov	r1, r7
   d9918:	4628      	mov	r0, r5
   d991a:	f000 fd28 	bl	da36e <__any_on>
   d991e:	4681      	mov	r9, r0
   d9920:	e001      	b.n	d9926 <__gethex+0x2f8>
   d9922:	f04f 0901 	mov.w	r9, #1
   d9926:	117a      	asrs	r2, r7, #5
   d9928:	2301      	movs	r3, #1
   d992a:	f007 071f 	and.w	r7, r7, #31
   d992e:	fa03 f707 	lsl.w	r7, r3, r7
   d9932:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   d9936:	4621      	mov	r1, r4
   d9938:	421f      	tst	r7, r3
   d993a:	4628      	mov	r0, r5
   d993c:	bf18      	it	ne
   d993e:	f049 0902 	orrne.w	r9, r9, #2
   d9942:	1b36      	subs	r6, r6, r4
   d9944:	f7ff fe28 	bl	d9598 <rshift>
   d9948:	2702      	movs	r7, #2
   d994a:	f8d8 4004 	ldr.w	r4, [r8, #4]
   d994e:	e000      	b.n	d9952 <__gethex+0x324>
   d9950:	2701      	movs	r7, #1
   d9952:	f1b9 0f00 	cmp.w	r9, #0
   d9956:	f000 8081 	beq.w	d9a5c <__gethex+0x42e>
   d995a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d995e:	2b02      	cmp	r3, #2
   d9960:	d00e      	beq.n	d9980 <__gethex+0x352>
   d9962:	2b03      	cmp	r3, #3
   d9964:	d010      	beq.n	d9988 <__gethex+0x35a>
   d9966:	2b01      	cmp	r3, #1
   d9968:	d176      	bne.n	d9a58 <__gethex+0x42a>
   d996a:	f019 0f02 	tst.w	r9, #2
   d996e:	d073      	beq.n	d9a58 <__gethex+0x42a>
   d9970:	f8da 0000 	ldr.w	r0, [sl]
   d9974:	ea49 0900 	orr.w	r9, r9, r0
   d9978:	f019 0f01 	tst.w	r9, #1
   d997c:	d107      	bne.n	d998e <__gethex+0x360>
   d997e:	e06b      	b.n	d9a58 <__gethex+0x42a>
   d9980:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9982:	f1c3 0301 	rsb	r3, r3, #1
   d9986:	9315      	str	r3, [sp, #84]	; 0x54
   d9988:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d998a:	2b00      	cmp	r3, #0
   d998c:	d064      	beq.n	d9a58 <__gethex+0x42a>
   d998e:	f8d5 a010 	ldr.w	sl, [r5, #16]
   d9992:	f105 0314 	add.w	r3, r5, #20
   d9996:	ea4f 098a 	mov.w	r9, sl, lsl #2
   d999a:	eb03 0109 	add.w	r1, r3, r9
   d999e:	2000      	movs	r0, #0
   d99a0:	681a      	ldr	r2, [r3, #0]
   d99a2:	f1b2 3fff 	cmp.w	r2, #4294967295
   d99a6:	d002      	beq.n	d99ae <__gethex+0x380>
   d99a8:	3201      	adds	r2, #1
   d99aa:	601a      	str	r2, [r3, #0]
   d99ac:	e020      	b.n	d99f0 <__gethex+0x3c2>
   d99ae:	f843 0b04 	str.w	r0, [r3], #4
   d99b2:	4299      	cmp	r1, r3
   d99b4:	d8f4      	bhi.n	d99a0 <__gethex+0x372>
   d99b6:	68ab      	ldr	r3, [r5, #8]
   d99b8:	459a      	cmp	sl, r3
   d99ba:	db12      	blt.n	d99e2 <__gethex+0x3b4>
   d99bc:	6869      	ldr	r1, [r5, #4]
   d99be:	9802      	ldr	r0, [sp, #8]
   d99c0:	3101      	adds	r1, #1
   d99c2:	f000 f906 	bl	d9bd2 <_Balloc>
   d99c6:	692a      	ldr	r2, [r5, #16]
   d99c8:	3202      	adds	r2, #2
   d99ca:	f105 010c 	add.w	r1, r5, #12
   d99ce:	4683      	mov	fp, r0
   d99d0:	0092      	lsls	r2, r2, #2
   d99d2:	300c      	adds	r0, #12
   d99d4:	f7fe fe7a 	bl	d86cc <memcpy>
   d99d8:	4629      	mov	r1, r5
   d99da:	9802      	ldr	r0, [sp, #8]
   d99dc:	f000 f92e 	bl	d9c3c <_Bfree>
   d99e0:	465d      	mov	r5, fp
   d99e2:	692b      	ldr	r3, [r5, #16]
   d99e4:	1c5a      	adds	r2, r3, #1
   d99e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   d99ea:	612a      	str	r2, [r5, #16]
   d99ec:	2201      	movs	r2, #1
   d99ee:	615a      	str	r2, [r3, #20]
   d99f0:	2f02      	cmp	r7, #2
   d99f2:	f105 0214 	add.w	r2, r5, #20
   d99f6:	d111      	bne.n	d9a1c <__gethex+0x3ee>
   d99f8:	f8d8 3000 	ldr.w	r3, [r8]
   d99fc:	3b01      	subs	r3, #1
   d99fe:	429e      	cmp	r6, r3
   d9a00:	d127      	bne.n	d9a52 <__gethex+0x424>
   d9a02:	1171      	asrs	r1, r6, #5
   d9a04:	2301      	movs	r3, #1
   d9a06:	f006 061f 	and.w	r6, r6, #31
   d9a0a:	fa03 f606 	lsl.w	r6, r3, r6
   d9a0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   d9a12:	421e      	tst	r6, r3
   d9a14:	bf0c      	ite	eq
   d9a16:	2702      	moveq	r7, #2
   d9a18:	2701      	movne	r7, #1
   d9a1a:	e01a      	b.n	d9a52 <__gethex+0x424>
   d9a1c:	692b      	ldr	r3, [r5, #16]
   d9a1e:	459a      	cmp	sl, r3
   d9a20:	da0a      	bge.n	d9a38 <__gethex+0x40a>
   d9a22:	2101      	movs	r1, #1
   d9a24:	4628      	mov	r0, r5
   d9a26:	f7ff fdb7 	bl	d9598 <rshift>
   d9a2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9a2e:	3401      	adds	r4, #1
   d9a30:	429c      	cmp	r4, r3
   d9a32:	f73f af2c 	bgt.w	d988e <__gethex+0x260>
   d9a36:	e00b      	b.n	d9a50 <__gethex+0x422>
   d9a38:	f016 061f 	ands.w	r6, r6, #31
   d9a3c:	d008      	beq.n	d9a50 <__gethex+0x422>
   d9a3e:	4491      	add	r9, r2
   d9a40:	f1c6 0620 	rsb	r6, r6, #32
   d9a44:	f859 0c04 	ldr.w	r0, [r9, #-4]
   d9a48:	f000 f988 	bl	d9d5c <__hi0bits>
   d9a4c:	42b0      	cmp	r0, r6
   d9a4e:	dbe8      	blt.n	d9a22 <__gethex+0x3f4>
   d9a50:	2701      	movs	r7, #1
   d9a52:	f047 0720 	orr.w	r7, r7, #32
   d9a56:	e001      	b.n	d9a5c <__gethex+0x42e>
   d9a58:	f047 0710 	orr.w	r7, r7, #16
   d9a5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9a5e:	601d      	str	r5, [r3, #0]
   d9a60:	9b06      	ldr	r3, [sp, #24]
   d9a62:	4638      	mov	r0, r7
   d9a64:	601c      	str	r4, [r3, #0]
   d9a66:	b00b      	add	sp, #44	; 0x2c
   d9a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9a6c <L_shift>:
   d9a6c:	f1c2 0208 	rsb	r2, r2, #8
   d9a70:	0092      	lsls	r2, r2, #2
   d9a72:	b570      	push	{r4, r5, r6, lr}
   d9a74:	f1c2 0620 	rsb	r6, r2, #32
   d9a78:	6843      	ldr	r3, [r0, #4]
   d9a7a:	6805      	ldr	r5, [r0, #0]
   d9a7c:	fa03 f406 	lsl.w	r4, r3, r6
   d9a80:	432c      	orrs	r4, r5
   d9a82:	40d3      	lsrs	r3, r2
   d9a84:	6004      	str	r4, [r0, #0]
   d9a86:	f840 3f04 	str.w	r3, [r0, #4]!
   d9a8a:	4288      	cmp	r0, r1
   d9a8c:	d3f4      	bcc.n	d9a78 <L_shift+0xc>
   d9a8e:	bd70      	pop	{r4, r5, r6, pc}

000d9a90 <__match>:
   d9a90:	b530      	push	{r4, r5, lr}
   d9a92:	6803      	ldr	r3, [r0, #0]
   d9a94:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9a98:	3301      	adds	r3, #1
   d9a9a:	b14c      	cbz	r4, d9ab0 <__match+0x20>
   d9a9c:	781a      	ldrb	r2, [r3, #0]
   d9a9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9aa2:	2d19      	cmp	r5, #25
   d9aa4:	bf98      	it	ls
   d9aa6:	3220      	addls	r2, #32
   d9aa8:	42a2      	cmp	r2, r4
   d9aaa:	d0f3      	beq.n	d9a94 <__match+0x4>
   d9aac:	2000      	movs	r0, #0
   d9aae:	bd30      	pop	{r4, r5, pc}
   d9ab0:	6003      	str	r3, [r0, #0]
   d9ab2:	2001      	movs	r0, #1
   d9ab4:	bd30      	pop	{r4, r5, pc}

000d9ab6 <__hexnan>:
   d9ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9aba:	680b      	ldr	r3, [r1, #0]
   d9abc:	f8d0 b000 	ldr.w	fp, [r0]
   d9ac0:	115e      	asrs	r6, r3, #5
   d9ac2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d9ac6:	f013 031f 	ands.w	r3, r3, #31
   d9aca:	b085      	sub	sp, #20
   d9acc:	bf18      	it	ne
   d9ace:	3604      	addne	r6, #4
   d9ad0:	1f35      	subs	r5, r6, #4
   d9ad2:	4617      	mov	r7, r2
   d9ad4:	2200      	movs	r2, #0
   d9ad6:	4682      	mov	sl, r0
   d9ad8:	9301      	str	r3, [sp, #4]
   d9ada:	f846 2c04 	str.w	r2, [r6, #-4]
   d9ade:	46a8      	mov	r8, r5
   d9ae0:	462c      	mov	r4, r5
   d9ae2:	9200      	str	r2, [sp, #0]
   d9ae4:	4691      	mov	r9, r2
   d9ae6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   d9aea:	2900      	cmp	r1, #0
   d9aec:	d03c      	beq.n	d9b68 <__hexnan+0xb2>
   d9aee:	4608      	mov	r0, r1
   d9af0:	9203      	str	r2, [sp, #12]
   d9af2:	9102      	str	r1, [sp, #8]
   d9af4:	f7ff fd86 	bl	d9604 <__hexdig_fun>
   d9af8:	9a03      	ldr	r2, [sp, #12]
   d9afa:	bb00      	cbnz	r0, d9b3e <__hexnan+0x88>
   d9afc:	9902      	ldr	r1, [sp, #8]
   d9afe:	2920      	cmp	r1, #32
   d9b00:	d816      	bhi.n	d9b30 <__hexnan+0x7a>
   d9b02:	9b00      	ldr	r3, [sp, #0]
   d9b04:	4599      	cmp	r9, r3
   d9b06:	ddee      	ble.n	d9ae6 <__hexnan+0x30>
   d9b08:	4544      	cmp	r4, r8
   d9b0a:	d205      	bcs.n	d9b18 <__hexnan+0x62>
   d9b0c:	2a07      	cmp	r2, #7
   d9b0e:	dc03      	bgt.n	d9b18 <__hexnan+0x62>
   d9b10:	4641      	mov	r1, r8
   d9b12:	4620      	mov	r0, r4
   d9b14:	f7ff ffaa 	bl	d9a6c <L_shift>
   d9b18:	42bc      	cmp	r4, r7
   d9b1a:	d923      	bls.n	d9b64 <__hexnan+0xae>
   d9b1c:	2300      	movs	r3, #0
   d9b1e:	f1a4 0804 	sub.w	r8, r4, #4
   d9b22:	f844 3c04 	str.w	r3, [r4, #-4]
   d9b26:	f8cd 9000 	str.w	r9, [sp]
   d9b2a:	4644      	mov	r4, r8
   d9b2c:	461a      	mov	r2, r3
   d9b2e:	e7da      	b.n	d9ae6 <__hexnan+0x30>
   d9b30:	2929      	cmp	r1, #41	; 0x29
   d9b32:	d148      	bne.n	d9bc6 <__hexnan+0x110>
   d9b34:	f10b 0301 	add.w	r3, fp, #1
   d9b38:	f8ca 3000 	str.w	r3, [sl]
   d9b3c:	e014      	b.n	d9b68 <__hexnan+0xb2>
   d9b3e:	3201      	adds	r2, #1
   d9b40:	2a08      	cmp	r2, #8
   d9b42:	f109 0901 	add.w	r9, r9, #1
   d9b46:	dd06      	ble.n	d9b56 <__hexnan+0xa0>
   d9b48:	42bc      	cmp	r4, r7
   d9b4a:	d9cc      	bls.n	d9ae6 <__hexnan+0x30>
   d9b4c:	2300      	movs	r3, #0
   d9b4e:	f844 3c04 	str.w	r3, [r4, #-4]
   d9b52:	2201      	movs	r2, #1
   d9b54:	3c04      	subs	r4, #4
   d9b56:	6821      	ldr	r1, [r4, #0]
   d9b58:	f000 000f 	and.w	r0, r0, #15
   d9b5c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   d9b60:	6020      	str	r0, [r4, #0]
   d9b62:	e7c0      	b.n	d9ae6 <__hexnan+0x30>
   d9b64:	2208      	movs	r2, #8
   d9b66:	e7be      	b.n	d9ae6 <__hexnan+0x30>
   d9b68:	f1b9 0f00 	cmp.w	r9, #0
   d9b6c:	d02b      	beq.n	d9bc6 <__hexnan+0x110>
   d9b6e:	4544      	cmp	r4, r8
   d9b70:	d205      	bcs.n	d9b7e <__hexnan+0xc8>
   d9b72:	2a07      	cmp	r2, #7
   d9b74:	dc03      	bgt.n	d9b7e <__hexnan+0xc8>
   d9b76:	4641      	mov	r1, r8
   d9b78:	4620      	mov	r0, r4
   d9b7a:	f7ff ff77 	bl	d9a6c <L_shift>
   d9b7e:	42bc      	cmp	r4, r7
   d9b80:	d90c      	bls.n	d9b9c <__hexnan+0xe6>
   d9b82:	463b      	mov	r3, r7
   d9b84:	f854 2b04 	ldr.w	r2, [r4], #4
   d9b88:	f843 2b04 	str.w	r2, [r3], #4
   d9b8c:	42a5      	cmp	r5, r4
   d9b8e:	d2f9      	bcs.n	d9b84 <__hexnan+0xce>
   d9b90:	2200      	movs	r2, #0
   d9b92:	f843 2b04 	str.w	r2, [r3], #4
   d9b96:	429d      	cmp	r5, r3
   d9b98:	d2fb      	bcs.n	d9b92 <__hexnan+0xdc>
   d9b9a:	e00b      	b.n	d9bb4 <__hexnan+0xfe>
   d9b9c:	9b01      	ldr	r3, [sp, #4]
   d9b9e:	b14b      	cbz	r3, d9bb4 <__hexnan+0xfe>
   d9ba0:	f1c3 0220 	rsb	r2, r3, #32
   d9ba4:	f04f 33ff 	mov.w	r3, #4294967295
   d9ba8:	40d3      	lsrs	r3, r2
   d9baa:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9bae:	4013      	ands	r3, r2
   d9bb0:	f846 3c04 	str.w	r3, [r6, #-4]
   d9bb4:	682b      	ldr	r3, [r5, #0]
   d9bb6:	b943      	cbnz	r3, d9bca <__hexnan+0x114>
   d9bb8:	42bd      	cmp	r5, r7
   d9bba:	d102      	bne.n	d9bc2 <__hexnan+0x10c>
   d9bbc:	2301      	movs	r3, #1
   d9bbe:	602b      	str	r3, [r5, #0]
   d9bc0:	e003      	b.n	d9bca <__hexnan+0x114>
   d9bc2:	3d04      	subs	r5, #4
   d9bc4:	e7f6      	b.n	d9bb4 <__hexnan+0xfe>
   d9bc6:	2004      	movs	r0, #4
   d9bc8:	e000      	b.n	d9bcc <__hexnan+0x116>
   d9bca:	2005      	movs	r0, #5
   d9bcc:	b005      	add	sp, #20
   d9bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9bd2 <_Balloc>:
   d9bd2:	b570      	push	{r4, r5, r6, lr}
   d9bd4:	6a45      	ldr	r5, [r0, #36]	; 0x24
   d9bd6:	4604      	mov	r4, r0
   d9bd8:	460e      	mov	r6, r1
   d9bda:	b93d      	cbnz	r5, d9bec <_Balloc+0x1a>
   d9bdc:	2010      	movs	r0, #16
   d9bde:	f7fb feb9 	bl	d5954 <malloc>
   d9be2:	6260      	str	r0, [r4, #36]	; 0x24
   d9be4:	6045      	str	r5, [r0, #4]
   d9be6:	6085      	str	r5, [r0, #8]
   d9be8:	6005      	str	r5, [r0, #0]
   d9bea:	60c5      	str	r5, [r0, #12]
   d9bec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   d9bee:	68eb      	ldr	r3, [r5, #12]
   d9bf0:	b143      	cbz	r3, d9c04 <_Balloc+0x32>
   d9bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9bf4:	68db      	ldr	r3, [r3, #12]
   d9bf6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   d9bfa:	b178      	cbz	r0, d9c1c <_Balloc+0x4a>
   d9bfc:	6802      	ldr	r2, [r0, #0]
   d9bfe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   d9c02:	e017      	b.n	d9c34 <_Balloc+0x62>
   d9c04:	2221      	movs	r2, #33	; 0x21
   d9c06:	2104      	movs	r1, #4
   d9c08:	4620      	mov	r0, r4
   d9c0a:	f000 fbd2 	bl	da3b2 <_calloc_r>
   d9c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9c10:	60e8      	str	r0, [r5, #12]
   d9c12:	68db      	ldr	r3, [r3, #12]
   d9c14:	2b00      	cmp	r3, #0
   d9c16:	d1ec      	bne.n	d9bf2 <_Balloc+0x20>
   d9c18:	2000      	movs	r0, #0
   d9c1a:	bd70      	pop	{r4, r5, r6, pc}
   d9c1c:	2101      	movs	r1, #1
   d9c1e:	fa01 f506 	lsl.w	r5, r1, r6
   d9c22:	1d6a      	adds	r2, r5, #5
   d9c24:	0092      	lsls	r2, r2, #2
   d9c26:	4620      	mov	r0, r4
   d9c28:	f000 fbc3 	bl	da3b2 <_calloc_r>
   d9c2c:	2800      	cmp	r0, #0
   d9c2e:	d0f3      	beq.n	d9c18 <_Balloc+0x46>
   d9c30:	6046      	str	r6, [r0, #4]
   d9c32:	6085      	str	r5, [r0, #8]
   d9c34:	2300      	movs	r3, #0
   d9c36:	6103      	str	r3, [r0, #16]
   d9c38:	60c3      	str	r3, [r0, #12]
   d9c3a:	bd70      	pop	{r4, r5, r6, pc}

000d9c3c <_Bfree>:
   d9c3c:	b570      	push	{r4, r5, r6, lr}
   d9c3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
   d9c40:	4606      	mov	r6, r0
   d9c42:	460d      	mov	r5, r1
   d9c44:	b93c      	cbnz	r4, d9c56 <_Bfree+0x1a>
   d9c46:	2010      	movs	r0, #16
   d9c48:	f7fb fe84 	bl	d5954 <malloc>
   d9c4c:	6270      	str	r0, [r6, #36]	; 0x24
   d9c4e:	6044      	str	r4, [r0, #4]
   d9c50:	6084      	str	r4, [r0, #8]
   d9c52:	6004      	str	r4, [r0, #0]
   d9c54:	60c4      	str	r4, [r0, #12]
   d9c56:	b13d      	cbz	r5, d9c68 <_Bfree+0x2c>
   d9c58:	6a73      	ldr	r3, [r6, #36]	; 0x24
   d9c5a:	686a      	ldr	r2, [r5, #4]
   d9c5c:	68db      	ldr	r3, [r3, #12]
   d9c5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9c62:	6029      	str	r1, [r5, #0]
   d9c64:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   d9c68:	bd70      	pop	{r4, r5, r6, pc}

000d9c6a <__multadd>:
   d9c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c6e:	690d      	ldr	r5, [r1, #16]
   d9c70:	461f      	mov	r7, r3
   d9c72:	4606      	mov	r6, r0
   d9c74:	460c      	mov	r4, r1
   d9c76:	f101 0e14 	add.w	lr, r1, #20
   d9c7a:	2300      	movs	r3, #0
   d9c7c:	f8de 0000 	ldr.w	r0, [lr]
   d9c80:	b281      	uxth	r1, r0
   d9c82:	fb02 7101 	mla	r1, r2, r1, r7
   d9c86:	0c0f      	lsrs	r7, r1, #16
   d9c88:	0c00      	lsrs	r0, r0, #16
   d9c8a:	fb02 7000 	mla	r0, r2, r0, r7
   d9c8e:	b289      	uxth	r1, r1
   d9c90:	3301      	adds	r3, #1
   d9c92:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   d9c96:	429d      	cmp	r5, r3
   d9c98:	ea4f 4710 	mov.w	r7, r0, lsr #16
   d9c9c:	f84e 1b04 	str.w	r1, [lr], #4
   d9ca0:	dcec      	bgt.n	d9c7c <__multadd+0x12>
   d9ca2:	b1d7      	cbz	r7, d9cda <__multadd+0x70>
   d9ca4:	68a3      	ldr	r3, [r4, #8]
   d9ca6:	429d      	cmp	r5, r3
   d9ca8:	db12      	blt.n	d9cd0 <__multadd+0x66>
   d9caa:	6861      	ldr	r1, [r4, #4]
   d9cac:	4630      	mov	r0, r6
   d9cae:	3101      	adds	r1, #1
   d9cb0:	f7ff ff8f 	bl	d9bd2 <_Balloc>
   d9cb4:	6922      	ldr	r2, [r4, #16]
   d9cb6:	3202      	adds	r2, #2
   d9cb8:	f104 010c 	add.w	r1, r4, #12
   d9cbc:	4680      	mov	r8, r0
   d9cbe:	0092      	lsls	r2, r2, #2
   d9cc0:	300c      	adds	r0, #12
   d9cc2:	f7fe fd03 	bl	d86cc <memcpy>
   d9cc6:	4621      	mov	r1, r4
   d9cc8:	4630      	mov	r0, r6
   d9cca:	f7ff ffb7 	bl	d9c3c <_Bfree>
   d9cce:	4644      	mov	r4, r8
   d9cd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   d9cd4:	3501      	adds	r5, #1
   d9cd6:	615f      	str	r7, [r3, #20]
   d9cd8:	6125      	str	r5, [r4, #16]
   d9cda:	4620      	mov	r0, r4
   d9cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9ce0 <__s2b>:
   d9ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9ce4:	460c      	mov	r4, r1
   d9ce6:	4615      	mov	r5, r2
   d9ce8:	461f      	mov	r7, r3
   d9cea:	2209      	movs	r2, #9
   d9cec:	3308      	adds	r3, #8
   d9cee:	4606      	mov	r6, r0
   d9cf0:	fb93 f3f2 	sdiv	r3, r3, r2
   d9cf4:	2100      	movs	r1, #0
   d9cf6:	2201      	movs	r2, #1
   d9cf8:	429a      	cmp	r2, r3
   d9cfa:	da02      	bge.n	d9d02 <__s2b+0x22>
   d9cfc:	0052      	lsls	r2, r2, #1
   d9cfe:	3101      	adds	r1, #1
   d9d00:	e7fa      	b.n	d9cf8 <__s2b+0x18>
   d9d02:	4630      	mov	r0, r6
   d9d04:	f7ff ff65 	bl	d9bd2 <_Balloc>
   d9d08:	9b08      	ldr	r3, [sp, #32]
   d9d0a:	6143      	str	r3, [r0, #20]
   d9d0c:	2d09      	cmp	r5, #9
   d9d0e:	f04f 0301 	mov.w	r3, #1
   d9d12:	6103      	str	r3, [r0, #16]
   d9d14:	dd11      	ble.n	d9d3a <__s2b+0x5a>
   d9d16:	f104 0809 	add.w	r8, r4, #9
   d9d1a:	46c1      	mov	r9, r8
   d9d1c:	442c      	add	r4, r5
   d9d1e:	f819 3b01 	ldrb.w	r3, [r9], #1
   d9d22:	4601      	mov	r1, r0
   d9d24:	3b30      	subs	r3, #48	; 0x30
   d9d26:	220a      	movs	r2, #10
   d9d28:	4630      	mov	r0, r6
   d9d2a:	f7ff ff9e 	bl	d9c6a <__multadd>
   d9d2e:	45a1      	cmp	r9, r4
   d9d30:	d1f5      	bne.n	d9d1e <__s2b+0x3e>
   d9d32:	eb08 0405 	add.w	r4, r8, r5
   d9d36:	3c08      	subs	r4, #8
   d9d38:	e001      	b.n	d9d3e <__s2b+0x5e>
   d9d3a:	340a      	adds	r4, #10
   d9d3c:	2509      	movs	r5, #9
   d9d3e:	1b2d      	subs	r5, r5, r4
   d9d40:	1963      	adds	r3, r4, r5
   d9d42:	429f      	cmp	r7, r3
   d9d44:	dd08      	ble.n	d9d58 <__s2b+0x78>
   d9d46:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9d4a:	4601      	mov	r1, r0
   d9d4c:	3b30      	subs	r3, #48	; 0x30
   d9d4e:	220a      	movs	r2, #10
   d9d50:	4630      	mov	r0, r6
   d9d52:	f7ff ff8a 	bl	d9c6a <__multadd>
   d9d56:	e7f3      	b.n	d9d40 <__s2b+0x60>
   d9d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d9d5c <__hi0bits>:
   d9d5c:	0c03      	lsrs	r3, r0, #16
   d9d5e:	041b      	lsls	r3, r3, #16
   d9d60:	b913      	cbnz	r3, d9d68 <__hi0bits+0xc>
   d9d62:	0400      	lsls	r0, r0, #16
   d9d64:	2310      	movs	r3, #16
   d9d66:	e000      	b.n	d9d6a <__hi0bits+0xe>
   d9d68:	2300      	movs	r3, #0
   d9d6a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9d6e:	bf04      	itt	eq
   d9d70:	0200      	lsleq	r0, r0, #8
   d9d72:	3308      	addeq	r3, #8
   d9d74:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9d78:	bf04      	itt	eq
   d9d7a:	0100      	lsleq	r0, r0, #4
   d9d7c:	3304      	addeq	r3, #4
   d9d7e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9d82:	bf04      	itt	eq
   d9d84:	0080      	lsleq	r0, r0, #2
   d9d86:	3302      	addeq	r3, #2
   d9d88:	2800      	cmp	r0, #0
   d9d8a:	db03      	blt.n	d9d94 <__hi0bits+0x38>
   d9d8c:	0042      	lsls	r2, r0, #1
   d9d8e:	d503      	bpl.n	d9d98 <__hi0bits+0x3c>
   d9d90:	1c58      	adds	r0, r3, #1
   d9d92:	4770      	bx	lr
   d9d94:	4618      	mov	r0, r3
   d9d96:	4770      	bx	lr
   d9d98:	2020      	movs	r0, #32
   d9d9a:	4770      	bx	lr

000d9d9c <__lo0bits>:
   d9d9c:	6803      	ldr	r3, [r0, #0]
   d9d9e:	f013 0207 	ands.w	r2, r3, #7
   d9da2:	d00b      	beq.n	d9dbc <__lo0bits+0x20>
   d9da4:	07d9      	lsls	r1, r3, #31
   d9da6:	d422      	bmi.n	d9dee <__lo0bits+0x52>
   d9da8:	079a      	lsls	r2, r3, #30
   d9daa:	bf4b      	itete	mi
   d9dac:	085b      	lsrmi	r3, r3, #1
   d9dae:	089b      	lsrpl	r3, r3, #2
   d9db0:	6003      	strmi	r3, [r0, #0]
   d9db2:	6003      	strpl	r3, [r0, #0]
   d9db4:	bf4c      	ite	mi
   d9db6:	2001      	movmi	r0, #1
   d9db8:	2002      	movpl	r0, #2
   d9dba:	4770      	bx	lr
   d9dbc:	b299      	uxth	r1, r3
   d9dbe:	b909      	cbnz	r1, d9dc4 <__lo0bits+0x28>
   d9dc0:	0c1b      	lsrs	r3, r3, #16
   d9dc2:	2210      	movs	r2, #16
   d9dc4:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9dc8:	bf04      	itt	eq
   d9dca:	0a1b      	lsreq	r3, r3, #8
   d9dcc:	3208      	addeq	r2, #8
   d9dce:	0719      	lsls	r1, r3, #28
   d9dd0:	bf04      	itt	eq
   d9dd2:	091b      	lsreq	r3, r3, #4
   d9dd4:	3204      	addeq	r2, #4
   d9dd6:	0799      	lsls	r1, r3, #30
   d9dd8:	bf04      	itt	eq
   d9dda:	089b      	lsreq	r3, r3, #2
   d9ddc:	3202      	addeq	r2, #2
   d9dde:	07d9      	lsls	r1, r3, #31
   d9de0:	d402      	bmi.n	d9de8 <__lo0bits+0x4c>
   d9de2:	085b      	lsrs	r3, r3, #1
   d9de4:	d005      	beq.n	d9df2 <__lo0bits+0x56>
   d9de6:	3201      	adds	r2, #1
   d9de8:	6003      	str	r3, [r0, #0]
   d9dea:	4610      	mov	r0, r2
   d9dec:	4770      	bx	lr
   d9dee:	2000      	movs	r0, #0
   d9df0:	4770      	bx	lr
   d9df2:	2020      	movs	r0, #32
   d9df4:	4770      	bx	lr

000d9df6 <__i2b>:
   d9df6:	b510      	push	{r4, lr}
   d9df8:	460c      	mov	r4, r1
   d9dfa:	2101      	movs	r1, #1
   d9dfc:	f7ff fee9 	bl	d9bd2 <_Balloc>
   d9e00:	2201      	movs	r2, #1
   d9e02:	6144      	str	r4, [r0, #20]
   d9e04:	6102      	str	r2, [r0, #16]
   d9e06:	bd10      	pop	{r4, pc}

000d9e08 <__multiply>:
   d9e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e0c:	4614      	mov	r4, r2
   d9e0e:	690a      	ldr	r2, [r1, #16]
   d9e10:	6923      	ldr	r3, [r4, #16]
   d9e12:	429a      	cmp	r2, r3
   d9e14:	bfb8      	it	lt
   d9e16:	460b      	movlt	r3, r1
   d9e18:	4688      	mov	r8, r1
   d9e1a:	bfbc      	itt	lt
   d9e1c:	46a0      	movlt	r8, r4
   d9e1e:	461c      	movlt	r4, r3
   d9e20:	f8d8 7010 	ldr.w	r7, [r8, #16]
   d9e24:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d9e28:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9e2c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   d9e30:	eb07 0609 	add.w	r6, r7, r9
   d9e34:	429e      	cmp	r6, r3
   d9e36:	bfc8      	it	gt
   d9e38:	3101      	addgt	r1, #1
   d9e3a:	f7ff feca 	bl	d9bd2 <_Balloc>
   d9e3e:	f100 0514 	add.w	r5, r0, #20
   d9e42:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   d9e46:	462b      	mov	r3, r5
   d9e48:	2200      	movs	r2, #0
   d9e4a:	4563      	cmp	r3, ip
   d9e4c:	d202      	bcs.n	d9e54 <__multiply+0x4c>
   d9e4e:	f843 2b04 	str.w	r2, [r3], #4
   d9e52:	e7fa      	b.n	d9e4a <__multiply+0x42>
   d9e54:	f104 0214 	add.w	r2, r4, #20
   d9e58:	f108 0114 	add.w	r1, r8, #20
   d9e5c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9e60:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   d9e64:	9300      	str	r3, [sp, #0]
   d9e66:	9b00      	ldr	r3, [sp, #0]
   d9e68:	9201      	str	r2, [sp, #4]
   d9e6a:	4293      	cmp	r3, r2
   d9e6c:	d957      	bls.n	d9f1e <__multiply+0x116>
   d9e6e:	f8b2 b000 	ldrh.w	fp, [r2]
   d9e72:	f1bb 0f00 	cmp.w	fp, #0
   d9e76:	d023      	beq.n	d9ec0 <__multiply+0xb8>
   d9e78:	4689      	mov	r9, r1
   d9e7a:	46ae      	mov	lr, r5
   d9e7c:	f04f 0800 	mov.w	r8, #0
   d9e80:	f859 4b04 	ldr.w	r4, [r9], #4
   d9e84:	f8be a000 	ldrh.w	sl, [lr]
   d9e88:	b2a3      	uxth	r3, r4
   d9e8a:	fb0b a303 	mla	r3, fp, r3, sl
   d9e8e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   d9e92:	f8de 4000 	ldr.w	r4, [lr]
   d9e96:	4443      	add	r3, r8
   d9e98:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9e9c:	fb0b 840a 	mla	r4, fp, sl, r8
   d9ea0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   d9ea4:	46f2      	mov	sl, lr
   d9ea6:	b29b      	uxth	r3, r3
   d9ea8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   d9eac:	454f      	cmp	r7, r9
   d9eae:	ea4f 4814 	mov.w	r8, r4, lsr #16
   d9eb2:	f84a 3b04 	str.w	r3, [sl], #4
   d9eb6:	d901      	bls.n	d9ebc <__multiply+0xb4>
   d9eb8:	46d6      	mov	lr, sl
   d9eba:	e7e1      	b.n	d9e80 <__multiply+0x78>
   d9ebc:	f8ce 8004 	str.w	r8, [lr, #4]
   d9ec0:	9b01      	ldr	r3, [sp, #4]
   d9ec2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   d9ec6:	3204      	adds	r2, #4
   d9ec8:	f1ba 0f00 	cmp.w	sl, #0
   d9ecc:	d021      	beq.n	d9f12 <__multiply+0x10a>
   d9ece:	682b      	ldr	r3, [r5, #0]
   d9ed0:	462c      	mov	r4, r5
   d9ed2:	4689      	mov	r9, r1
   d9ed4:	f04f 0800 	mov.w	r8, #0
   d9ed8:	f8b9 e000 	ldrh.w	lr, [r9]
   d9edc:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   d9ee0:	fb0a be0e 	mla	lr, sl, lr, fp
   d9ee4:	44f0      	add	r8, lr
   d9ee6:	46a3      	mov	fp, r4
   d9ee8:	b29b      	uxth	r3, r3
   d9eea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   d9eee:	f84b 3b04 	str.w	r3, [fp], #4
   d9ef2:	f859 3b04 	ldr.w	r3, [r9], #4
   d9ef6:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   d9efa:	0c1b      	lsrs	r3, r3, #16
   d9efc:	fb0a e303 	mla	r3, sl, r3, lr
   d9f00:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   d9f04:	454f      	cmp	r7, r9
   d9f06:	ea4f 4813 	mov.w	r8, r3, lsr #16
   d9f0a:	d901      	bls.n	d9f10 <__multiply+0x108>
   d9f0c:	465c      	mov	r4, fp
   d9f0e:	e7e3      	b.n	d9ed8 <__multiply+0xd0>
   d9f10:	6063      	str	r3, [r4, #4]
   d9f12:	3504      	adds	r5, #4
   d9f14:	e7a7      	b.n	d9e66 <__multiply+0x5e>
   d9f16:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   d9f1a:	b913      	cbnz	r3, d9f22 <__multiply+0x11a>
   d9f1c:	3e01      	subs	r6, #1
   d9f1e:	2e00      	cmp	r6, #0
   d9f20:	dcf9      	bgt.n	d9f16 <__multiply+0x10e>
   d9f22:	6106      	str	r6, [r0, #16]
   d9f24:	b003      	add	sp, #12
   d9f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000d9f2c <__pow5mult>:
   d9f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9f30:	4615      	mov	r5, r2
   d9f32:	f012 0203 	ands.w	r2, r2, #3
   d9f36:	4606      	mov	r6, r0
   d9f38:	460f      	mov	r7, r1
   d9f3a:	d007      	beq.n	d9f4c <__pow5mult+0x20>
   d9f3c:	3a01      	subs	r2, #1
   d9f3e:	4c21      	ldr	r4, [pc, #132]	; (d9fc4 <__pow5mult+0x98>)
   d9f40:	2300      	movs	r3, #0
   d9f42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9f46:	f7ff fe90 	bl	d9c6a <__multadd>
   d9f4a:	4607      	mov	r7, r0
   d9f4c:	10ad      	asrs	r5, r5, #2
   d9f4e:	d036      	beq.n	d9fbe <__pow5mult+0x92>
   d9f50:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9f52:	b93c      	cbnz	r4, d9f64 <__pow5mult+0x38>
   d9f54:	2010      	movs	r0, #16
   d9f56:	f7fb fcfd 	bl	d5954 <malloc>
   d9f5a:	6270      	str	r0, [r6, #36]	; 0x24
   d9f5c:	6044      	str	r4, [r0, #4]
   d9f5e:	6084      	str	r4, [r0, #8]
   d9f60:	6004      	str	r4, [r0, #0]
   d9f62:	60c4      	str	r4, [r0, #12]
   d9f64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9f68:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9f6c:	b94c      	cbnz	r4, d9f82 <__pow5mult+0x56>
   d9f6e:	f240 2171 	movw	r1, #625	; 0x271
   d9f72:	4630      	mov	r0, r6
   d9f74:	f7ff ff3f 	bl	d9df6 <__i2b>
   d9f78:	2300      	movs	r3, #0
   d9f7a:	f8c8 0008 	str.w	r0, [r8, #8]
   d9f7e:	4604      	mov	r4, r0
   d9f80:	6003      	str	r3, [r0, #0]
   d9f82:	f04f 0800 	mov.w	r8, #0
   d9f86:	07eb      	lsls	r3, r5, #31
   d9f88:	d50a      	bpl.n	d9fa0 <__pow5mult+0x74>
   d9f8a:	4639      	mov	r1, r7
   d9f8c:	4622      	mov	r2, r4
   d9f8e:	4630      	mov	r0, r6
   d9f90:	f7ff ff3a 	bl	d9e08 <__multiply>
   d9f94:	4639      	mov	r1, r7
   d9f96:	4681      	mov	r9, r0
   d9f98:	4630      	mov	r0, r6
   d9f9a:	f7ff fe4f 	bl	d9c3c <_Bfree>
   d9f9e:	464f      	mov	r7, r9
   d9fa0:	106d      	asrs	r5, r5, #1
   d9fa2:	d00c      	beq.n	d9fbe <__pow5mult+0x92>
   d9fa4:	6820      	ldr	r0, [r4, #0]
   d9fa6:	b108      	cbz	r0, d9fac <__pow5mult+0x80>
   d9fa8:	4604      	mov	r4, r0
   d9faa:	e7ec      	b.n	d9f86 <__pow5mult+0x5a>
   d9fac:	4622      	mov	r2, r4
   d9fae:	4621      	mov	r1, r4
   d9fb0:	4630      	mov	r0, r6
   d9fb2:	f7ff ff29 	bl	d9e08 <__multiply>
   d9fb6:	6020      	str	r0, [r4, #0]
   d9fb8:	f8c0 8000 	str.w	r8, [r0]
   d9fbc:	e7f4      	b.n	d9fa8 <__pow5mult+0x7c>
   d9fbe:	4638      	mov	r0, r7
   d9fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9fc4:	000dac48 	.word	0x000dac48

000d9fc8 <__lshift>:
   d9fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9fcc:	460c      	mov	r4, r1
   d9fce:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9fd2:	6926      	ldr	r6, [r4, #16]
   d9fd4:	6849      	ldr	r1, [r1, #4]
   d9fd6:	68a3      	ldr	r3, [r4, #8]
   d9fd8:	4456      	add	r6, sl
   d9fda:	4607      	mov	r7, r0
   d9fdc:	4691      	mov	r9, r2
   d9fde:	1c75      	adds	r5, r6, #1
   d9fe0:	42ab      	cmp	r3, r5
   d9fe2:	da02      	bge.n	d9fea <__lshift+0x22>
   d9fe4:	3101      	adds	r1, #1
   d9fe6:	005b      	lsls	r3, r3, #1
   d9fe8:	e7fa      	b.n	d9fe0 <__lshift+0x18>
   d9fea:	4638      	mov	r0, r7
   d9fec:	f7ff fdf1 	bl	d9bd2 <_Balloc>
   d9ff0:	2300      	movs	r3, #0
   d9ff2:	4680      	mov	r8, r0
   d9ff4:	f100 0114 	add.w	r1, r0, #20
   d9ff8:	461a      	mov	r2, r3
   d9ffa:	4553      	cmp	r3, sl
   d9ffc:	da03      	bge.n	da006 <__lshift+0x3e>
   d9ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   da002:	3301      	adds	r3, #1
   da004:	e7f9      	b.n	d9ffa <__lshift+0x32>
   da006:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   da00a:	6920      	ldr	r0, [r4, #16]
   da00c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   da010:	f019 091f 	ands.w	r9, r9, #31
   da014:	f104 0114 	add.w	r1, r4, #20
   da018:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   da01c:	d014      	beq.n	da048 <__lshift+0x80>
   da01e:	f1c9 0c20 	rsb	ip, r9, #32
   da022:	2200      	movs	r2, #0
   da024:	6808      	ldr	r0, [r1, #0]
   da026:	fa00 f009 	lsl.w	r0, r0, r9
   da02a:	4302      	orrs	r2, r0
   da02c:	469a      	mov	sl, r3
   da02e:	f843 2b04 	str.w	r2, [r3], #4
   da032:	f851 2b04 	ldr.w	r2, [r1], #4
   da036:	458e      	cmp	lr, r1
   da038:	fa22 f20c 	lsr.w	r2, r2, ip
   da03c:	d8f2      	bhi.n	da024 <__lshift+0x5c>
   da03e:	f8ca 2004 	str.w	r2, [sl, #4]
   da042:	b142      	cbz	r2, da056 <__lshift+0x8e>
   da044:	1cb5      	adds	r5, r6, #2
   da046:	e006      	b.n	da056 <__lshift+0x8e>
   da048:	3b04      	subs	r3, #4
   da04a:	f851 2b04 	ldr.w	r2, [r1], #4
   da04e:	f843 2f04 	str.w	r2, [r3, #4]!
   da052:	458e      	cmp	lr, r1
   da054:	d8f9      	bhi.n	da04a <__lshift+0x82>
   da056:	3d01      	subs	r5, #1
   da058:	4638      	mov	r0, r7
   da05a:	f8c8 5010 	str.w	r5, [r8, #16]
   da05e:	4621      	mov	r1, r4
   da060:	f7ff fdec 	bl	d9c3c <_Bfree>
   da064:	4640      	mov	r0, r8
   da066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000da06a <__mcmp>:
   da06a:	6903      	ldr	r3, [r0, #16]
   da06c:	690a      	ldr	r2, [r1, #16]
   da06e:	1a9b      	subs	r3, r3, r2
   da070:	b510      	push	{r4, lr}
   da072:	d111      	bne.n	da098 <__mcmp+0x2e>
   da074:	0092      	lsls	r2, r2, #2
   da076:	3014      	adds	r0, #20
   da078:	3114      	adds	r1, #20
   da07a:	1883      	adds	r3, r0, r2
   da07c:	440a      	add	r2, r1
   da07e:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   da082:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   da086:	428c      	cmp	r4, r1
   da088:	d002      	beq.n	da090 <__mcmp+0x26>
   da08a:	d307      	bcc.n	da09c <__mcmp+0x32>
   da08c:	2001      	movs	r0, #1
   da08e:	bd10      	pop	{r4, pc}
   da090:	4298      	cmp	r0, r3
   da092:	d3f4      	bcc.n	da07e <__mcmp+0x14>
   da094:	2000      	movs	r0, #0
   da096:	bd10      	pop	{r4, pc}
   da098:	4618      	mov	r0, r3
   da09a:	bd10      	pop	{r4, pc}
   da09c:	f04f 30ff 	mov.w	r0, #4294967295
   da0a0:	bd10      	pop	{r4, pc}

000da0a2 <__mdiff>:
   da0a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da0a6:	460c      	mov	r4, r1
   da0a8:	4607      	mov	r7, r0
   da0aa:	4611      	mov	r1, r2
   da0ac:	4620      	mov	r0, r4
   da0ae:	4615      	mov	r5, r2
   da0b0:	f7ff ffdb 	bl	da06a <__mcmp>
   da0b4:	1e06      	subs	r6, r0, #0
   da0b6:	d108      	bne.n	da0ca <__mdiff+0x28>
   da0b8:	4631      	mov	r1, r6
   da0ba:	4638      	mov	r0, r7
   da0bc:	f7ff fd89 	bl	d9bd2 <_Balloc>
   da0c0:	2301      	movs	r3, #1
   da0c2:	6103      	str	r3, [r0, #16]
   da0c4:	6146      	str	r6, [r0, #20]
   da0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da0ca:	bfbc      	itt	lt
   da0cc:	4623      	movlt	r3, r4
   da0ce:	462c      	movlt	r4, r5
   da0d0:	4638      	mov	r0, r7
   da0d2:	6861      	ldr	r1, [r4, #4]
   da0d4:	bfba      	itte	lt
   da0d6:	461d      	movlt	r5, r3
   da0d8:	2601      	movlt	r6, #1
   da0da:	2600      	movge	r6, #0
   da0dc:	f7ff fd79 	bl	d9bd2 <_Balloc>
   da0e0:	692b      	ldr	r3, [r5, #16]
   da0e2:	60c6      	str	r6, [r0, #12]
   da0e4:	6926      	ldr	r6, [r4, #16]
   da0e6:	f105 0914 	add.w	r9, r5, #20
   da0ea:	3414      	adds	r4, #20
   da0ec:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   da0f0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   da0f4:	f100 0514 	add.w	r5, r0, #20
   da0f8:	f04f 0c00 	mov.w	ip, #0
   da0fc:	f854 3b04 	ldr.w	r3, [r4], #4
   da100:	f859 2b04 	ldr.w	r2, [r9], #4
   da104:	fa1c f183 	uxtah	r1, ip, r3
   da108:	fa1f fe82 	uxth.w	lr, r2
   da10c:	0c12      	lsrs	r2, r2, #16
   da10e:	ebce 0101 	rsb	r1, lr, r1
   da112:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   da116:	eb03 4321 	add.w	r3, r3, r1, asr #16
   da11a:	b289      	uxth	r1, r1
   da11c:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da120:	45c8      	cmp	r8, r9
   da122:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   da126:	46a6      	mov	lr, r4
   da128:	f845 3b04 	str.w	r3, [r5], #4
   da12c:	d8e6      	bhi.n	da0fc <__mdiff+0x5a>
   da12e:	45be      	cmp	lr, r7
   da130:	d20e      	bcs.n	da150 <__mdiff+0xae>
   da132:	f85e 1b04 	ldr.w	r1, [lr], #4
   da136:	fa1c f281 	uxtah	r2, ip, r1
   da13a:	1413      	asrs	r3, r2, #16
   da13c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   da140:	b292      	uxth	r2, r2
   da142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   da146:	ea4f 4c23 	mov.w	ip, r3, asr #16
   da14a:	f845 2b04 	str.w	r2, [r5], #4
   da14e:	e7ee      	b.n	da12e <__mdiff+0x8c>
   da150:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   da154:	b90b      	cbnz	r3, da15a <__mdiff+0xb8>
   da156:	3e01      	subs	r6, #1
   da158:	e7fa      	b.n	da150 <__mdiff+0xae>
   da15a:	6106      	str	r6, [r0, #16]
   da15c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000da160 <__ulp>:
   da160:	4b12      	ldr	r3, [pc, #72]	; (da1ac <__ulp+0x4c>)
   da162:	ee10 2a90 	vmov	r2, s1
   da166:	401a      	ands	r2, r3
   da168:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   da16c:	2b00      	cmp	r3, #0
   da16e:	dd02      	ble.n	da176 <__ulp+0x16>
   da170:	2000      	movs	r0, #0
   da172:	4619      	mov	r1, r3
   da174:	e017      	b.n	da1a6 <__ulp+0x46>
   da176:	425b      	negs	r3, r3
   da178:	151b      	asrs	r3, r3, #20
   da17a:	2b13      	cmp	r3, #19
   da17c:	f04f 0000 	mov.w	r0, #0
   da180:	f04f 0100 	mov.w	r1, #0
   da184:	dc04      	bgt.n	da190 <__ulp+0x30>
   da186:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   da18a:	fa42 f103 	asr.w	r1, r2, r3
   da18e:	e00a      	b.n	da1a6 <__ulp+0x46>
   da190:	3b14      	subs	r3, #20
   da192:	2b1e      	cmp	r3, #30
   da194:	f04f 0201 	mov.w	r2, #1
   da198:	bfda      	itte	le
   da19a:	f1c3 031f 	rsble	r3, r3, #31
   da19e:	fa02 f303 	lslle.w	r3, r2, r3
   da1a2:	4613      	movgt	r3, r2
   da1a4:	4618      	mov	r0, r3
   da1a6:	ec41 0b10 	vmov	d0, r0, r1
   da1aa:	4770      	bx	lr
   da1ac:	7ff00000 	.word	0x7ff00000

000da1b0 <__b2d>:
   da1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da1b2:	6905      	ldr	r5, [r0, #16]
   da1b4:	f100 0614 	add.w	r6, r0, #20
   da1b8:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   da1bc:	1f2f      	subs	r7, r5, #4
   da1be:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da1c2:	4620      	mov	r0, r4
   da1c4:	f7ff fdca 	bl	d9d5c <__hi0bits>
   da1c8:	f1c0 0320 	rsb	r3, r0, #32
   da1cc:	280a      	cmp	r0, #10
   da1ce:	600b      	str	r3, [r1, #0]
   da1d0:	dc14      	bgt.n	da1fc <__b2d+0x4c>
   da1d2:	f1c0 0e0b 	rsb	lr, r0, #11
   da1d6:	fa24 f10e 	lsr.w	r1, r4, lr
   da1da:	42be      	cmp	r6, r7
   da1dc:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   da1e0:	bf34      	ite	cc
   da1e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da1e6:	2100      	movcs	r1, #0
   da1e8:	3015      	adds	r0, #21
   da1ea:	fa04 f000 	lsl.w	r0, r4, r0
   da1ee:	fa21 f10e 	lsr.w	r1, r1, lr
   da1f2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da1f6:	ea40 0201 	orr.w	r2, r0, r1
   da1fa:	e023      	b.n	da244 <__b2d+0x94>
   da1fc:	42be      	cmp	r6, r7
   da1fe:	bf3a      	itte	cc
   da200:	f1a5 0708 	subcc.w	r7, r5, #8
   da204:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da208:	2100      	movcs	r1, #0
   da20a:	380b      	subs	r0, #11
   da20c:	d015      	beq.n	da23a <__b2d+0x8a>
   da20e:	4084      	lsls	r4, r0
   da210:	f1c0 0520 	rsb	r5, r0, #32
   da214:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   da218:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   da21c:	42b7      	cmp	r7, r6
   da21e:	fa21 fe05 	lsr.w	lr, r1, r5
   da222:	ea44 030e 	orr.w	r3, r4, lr
   da226:	bf8c      	ite	hi
   da228:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   da22c:	2400      	movls	r4, #0
   da22e:	fa01 f000 	lsl.w	r0, r1, r0
   da232:	40ec      	lsrs	r4, r5
   da234:	ea40 0204 	orr.w	r2, r0, r4
   da238:	e004      	b.n	da244 <__b2d+0x94>
   da23a:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   da23e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da242:	460a      	mov	r2, r1
   da244:	ec43 2b10 	vmov	d0, r2, r3
   da248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da24a <__d2b>:
   da24a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da24e:	460e      	mov	r6, r1
   da250:	2101      	movs	r1, #1
   da252:	ec59 8b10 	vmov	r8, r9, d0
   da256:	4615      	mov	r5, r2
   da258:	f7ff fcbb 	bl	d9bd2 <_Balloc>
   da25c:	f3c9 540a 	ubfx	r4, r9, #20, #11
   da260:	4607      	mov	r7, r0
   da262:	f3c9 0313 	ubfx	r3, r9, #0, #20
   da266:	b10c      	cbz	r4, da26c <__d2b+0x22>
   da268:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da26c:	9301      	str	r3, [sp, #4]
   da26e:	f1b8 0f00 	cmp.w	r8, #0
   da272:	d019      	beq.n	da2a8 <__d2b+0x5e>
   da274:	a802      	add	r0, sp, #8
   da276:	f840 8d08 	str.w	r8, [r0, #-8]!
   da27a:	f7ff fd8f 	bl	d9d9c <__lo0bits>
   da27e:	9b00      	ldr	r3, [sp, #0]
   da280:	b148      	cbz	r0, da296 <__d2b+0x4c>
   da282:	9a01      	ldr	r2, [sp, #4]
   da284:	f1c0 0120 	rsb	r1, r0, #32
   da288:	fa02 f101 	lsl.w	r1, r2, r1
   da28c:	430b      	orrs	r3, r1
   da28e:	40c2      	lsrs	r2, r0
   da290:	617b      	str	r3, [r7, #20]
   da292:	9201      	str	r2, [sp, #4]
   da294:	e000      	b.n	da298 <__d2b+0x4e>
   da296:	617b      	str	r3, [r7, #20]
   da298:	9b01      	ldr	r3, [sp, #4]
   da29a:	61bb      	str	r3, [r7, #24]
   da29c:	2b00      	cmp	r3, #0
   da29e:	bf14      	ite	ne
   da2a0:	2102      	movne	r1, #2
   da2a2:	2101      	moveq	r1, #1
   da2a4:	6139      	str	r1, [r7, #16]
   da2a6:	e007      	b.n	da2b8 <__d2b+0x6e>
   da2a8:	a801      	add	r0, sp, #4
   da2aa:	f7ff fd77 	bl	d9d9c <__lo0bits>
   da2ae:	9b01      	ldr	r3, [sp, #4]
   da2b0:	617b      	str	r3, [r7, #20]
   da2b2:	2101      	movs	r1, #1
   da2b4:	6139      	str	r1, [r7, #16]
   da2b6:	3020      	adds	r0, #32
   da2b8:	b134      	cbz	r4, da2c8 <__d2b+0x7e>
   da2ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   da2be:	4404      	add	r4, r0
   da2c0:	6034      	str	r4, [r6, #0]
   da2c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da2c6:	e009      	b.n	da2dc <__d2b+0x92>
   da2c8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   da2cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da2d0:	6030      	str	r0, [r6, #0]
   da2d2:	6918      	ldr	r0, [r3, #16]
   da2d4:	f7ff fd42 	bl	d9d5c <__hi0bits>
   da2d8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   da2dc:	6028      	str	r0, [r5, #0]
   da2de:	4638      	mov	r0, r7
   da2e0:	b003      	add	sp, #12
   da2e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da2e6 <__ratio>:
   da2e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da2ea:	4688      	mov	r8, r1
   da2ec:	4669      	mov	r1, sp
   da2ee:	4681      	mov	r9, r0
   da2f0:	f7ff ff5e 	bl	da1b0 <__b2d>
   da2f4:	a901      	add	r1, sp, #4
   da2f6:	4640      	mov	r0, r8
   da2f8:	ec55 4b10 	vmov	r4, r5, d0
   da2fc:	f7ff ff58 	bl	da1b0 <__b2d>
   da300:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da304:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da308:	1a9a      	subs	r2, r3, r2
   da30a:	e89d 000a 	ldmia.w	sp, {r1, r3}
   da30e:	1ac9      	subs	r1, r1, r3
   da310:	ec57 6b10 	vmov	r6, r7, d0
   da314:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   da318:	2b00      	cmp	r3, #0
   da31a:	bfcc      	ite	gt
   da31c:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   da320:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   da324:	4632      	mov	r2, r6
   da326:	463b      	mov	r3, r7
   da328:	4620      	mov	r0, r4
   da32a:	4629      	mov	r1, r5
   da32c:	f7fd ff92 	bl	d8254 <__aeabi_ddiv>
   da330:	ec41 0b10 	vmov	d0, r0, r1
   da334:	b003      	add	sp, #12
   da336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da33a <__copybits>:
   da33a:	3901      	subs	r1, #1
   da33c:	b510      	push	{r4, lr}
   da33e:	1149      	asrs	r1, r1, #5
   da340:	6914      	ldr	r4, [r2, #16]
   da342:	3101      	adds	r1, #1
   da344:	f102 0314 	add.w	r3, r2, #20
   da348:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da34c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da350:	42a3      	cmp	r3, r4
   da352:	4602      	mov	r2, r0
   da354:	d204      	bcs.n	da360 <__copybits+0x26>
   da356:	f853 2b04 	ldr.w	r2, [r3], #4
   da35a:	f840 2b04 	str.w	r2, [r0], #4
   da35e:	e7f7      	b.n	da350 <__copybits+0x16>
   da360:	2300      	movs	r3, #0
   da362:	428a      	cmp	r2, r1
   da364:	d202      	bcs.n	da36c <__copybits+0x32>
   da366:	f842 3b04 	str.w	r3, [r2], #4
   da36a:	e7fa      	b.n	da362 <__copybits+0x28>
   da36c:	bd10      	pop	{r4, pc}

000da36e <__any_on>:
   da36e:	f100 0214 	add.w	r2, r0, #20
   da372:	6900      	ldr	r0, [r0, #16]
   da374:	114b      	asrs	r3, r1, #5
   da376:	4298      	cmp	r0, r3
   da378:	b510      	push	{r4, lr}
   da37a:	db0c      	blt.n	da396 <__any_on+0x28>
   da37c:	dd0c      	ble.n	da398 <__any_on+0x2a>
   da37e:	f011 011f 	ands.w	r1, r1, #31
   da382:	d009      	beq.n	da398 <__any_on+0x2a>
   da384:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da388:	fa24 f001 	lsr.w	r0, r4, r1
   da38c:	fa00 f101 	lsl.w	r1, r0, r1
   da390:	428c      	cmp	r4, r1
   da392:	d10c      	bne.n	da3ae <__any_on+0x40>
   da394:	e000      	b.n	da398 <__any_on+0x2a>
   da396:	4603      	mov	r3, r0
   da398:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da39c:	4293      	cmp	r3, r2
   da39e:	d904      	bls.n	da3aa <__any_on+0x3c>
   da3a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da3a4:	2900      	cmp	r1, #0
   da3a6:	d0f9      	beq.n	da39c <__any_on+0x2e>
   da3a8:	e001      	b.n	da3ae <__any_on+0x40>
   da3aa:	2000      	movs	r0, #0
   da3ac:	bd10      	pop	{r4, pc}
   da3ae:	2001      	movs	r0, #1
   da3b0:	bd10      	pop	{r4, pc}

000da3b2 <_calloc_r>:
   da3b2:	b538      	push	{r3, r4, r5, lr}
   da3b4:	fb02 f401 	mul.w	r4, r2, r1
   da3b8:	4621      	mov	r1, r4
   da3ba:	f7fb faeb 	bl	d5994 <_malloc_r>
   da3be:	4605      	mov	r5, r0
   da3c0:	b118      	cbz	r0, da3ca <_calloc_r+0x18>
   da3c2:	4622      	mov	r2, r4
   da3c4:	2100      	movs	r1, #0
   da3c6:	f7fe f98c 	bl	d86e2 <memset>
   da3ca:	4628      	mov	r0, r5
   da3cc:	bd38      	pop	{r3, r4, r5, pc}

000da3ce <link_code_end>:
	...

000da3d0 <dynalib_user>:
   da3d0:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   da3e0:	0000 0000 5047 2053 203a 6573 7574 0070     ....GPS : setup.
   da3f0:	7067 0073 5024 544d 334b 3431 302c 312c     gps.$PMTK314,0,1
   da400:	302c 312c 302c 302c 302c 302c 302c 302c     ,0,1,0,0,0,0,0,0
   da410:	302c 302c 302c 302c 302c 302c 302c 302c     ,0,0,0,0,0,0,0,0
   da420:	302c 322a 0038 5024 544d 324b 3032 312c     ,0*28.$PMTK220,1
   da430:	3030 2a30 4631 2400 4750 4d43 2c44 3333     000*1F.$PGCMD,33
   da440:	312c 362a 0043 5024 544d 364b 3530 332a     ,1*6C.$PMTK605*3
   da450:	0031 4844 2054 203a 6573 7574 0070 6864     1.DHT : setup.dh
   da460:	0074 4844 2054 203a 6166 6c69 6465 7420     t.DHT : failed t
   da470:	206f 6572 6461 4400 5448 3a20 6920 766e     o read.DHT : inv
   da480:	6c61 6469 7420 6d65 6570 6172 7574 6572     alid temperature
   da490:	4d00 6f49 2074 7254 6361 656b 0072 227b     .MIot Tracker.{"
   da4a0:	7067 5f73 6974 656d 7473 6d61 2270 223a     gps_timestamp":"
   da4b0:	7525 252d 3230 2d75 3025 7532 2554 3230     %u-%02u-%02uT%02
   da4c0:	3a75 3025 7532 253a 3230 2275 222c 616c     u:%02u:%02u","la
   da4d0:	6974 7574 6564 3a22 2522 6c33 2e75 3725     titude":"%3lu.%7
   da4e0:	756c 6325 2c22 6c22 6e6f 6967 7574 6564     lu%c","longitude
   da4f0:	3a22 2522 6c33 2e75 3725 756c 6325 2c22     ":"%3lu.%7lu%c",
   da500:	6122 746c 7469 6475 2265 253a 2e38 6632     "altitude":%8.2f
   da510:	222c 7073 6565 2264 253a 2e36 6632 222c     ,"speed":%6.2f,"
   da520:	6568 6461 6e69 2267 253a 2e36 6632 222c     heading":%6.2f,"
   da530:	6173 6574 6c6c 7469 7365 3a22 7525 222c     satellites":%u,"
   da540:	7571 6c61 7469 2279 253a 7d75 4700 5350     quality":%u}.GPS
   da550:	203a 2a00 7b00 7422 6d65 6570 6172 7574     : .*.{"temperatu
   da560:	6572 3a22 3625 322e 2c66 6822 6d75 6469     re":%6.2f,"humid
   da570:	7469 2279 253a 2e36 6632 222c 6564 5f77     ity":%6.2f,"dew_
   da580:	6f70 6e69 2274 253a 2e36 6632 222c 6568     point":%6.2f,"he
   da590:	7461 695f 646e 7865 3a22 3625 322e 7d66     at_index":%6.2f}
   da5a0:	4400 5448 203a 4700 5350 3a20 6e20 206f     .DHT: .GPS : no 
   da5b0:	6966 0078 4724 4750 4147 2400 4e47 4747     fix.$GPGGA.$GNGG
   da5c0:	0041 4724 5250 434d 2400 4e47 4d52 0043     A.$GPRMC.$GNRMC.
   da5d0:	5024 544d 314b 3538 302c 322a 0032 5024     $PMTK185,0*22.$P
   da5e0:	544d 304b 3130 312c 3538 332c 332a 0043     MTK001,185,3*3C.
   da5f0:	5024 544d 314b 3538 312c 322a 0033 5024     $PMTK185,1*23.$P
   da600:	544d 314b 3338 332a 0038 5024 544d 4c4b     MTK183*38.$PMTKL
   da610:	474f 2400 4d50 4b54 3631 2c31 2a30 3832     OG.$PMTK161,0*28
   da620:	2400 4d50 4b54 3130 2c30 3030 2a32 4432     .$PMTK010,002*2D
   da630:	0000 0000                                   ....

000da634 <_ZTVN5spark13EthernetClassE>:
	...
   da63c:	5a13 000d 5a09 000d 59ff 000d 59f5 000d     .Z...Z...Y...Y..
   da64c:	59e9 000d 59dd 000d 59d1 000d 59c9 000d     .Y...Y...Y...Y..
   da65c:	59bf 000d 59b5 000d 6fed 000d               .Y...Y...o..

000da668 <_ZTV8SPIClass>:
	...
   da670:	5a31 000d 5a33 000d                         1Z..3Z..

000da678 <_ZTV3UDP>:
	...
   da680:	60c5 000d 60e9 000d 5aa9 000d 5bd3 000d     .`...`...Z...[..
   da690:	5aa1 000d 5abf 000d 5add 000d 5af7 000d     .Z...Z...Z...Z..
   da6a0:	5b1b 000d 5bb7 000d 5eb9 000d 5c59 000d     .[...[...^..Y\..
   da6b0:	5dd9 000d 5a89 000d 605f 000d 5d5d 000d     .]...Z.._`..]]..
   da6c0:	5c91 000d 608d 000d 5bfd 000d 5a97 000d     .\...`...[...Z..
   da6d0:	5c39 000d 5a9d 000d 5af9 000d fff0 ffff     9\...Z...Z......
   da6e0:	0000 0000 5b13 000d 6e6c 6600 006e 6f63     .....[..ln.fn.co
   da6f0:	6564 6400 7465 6961 006c 0a0d 2500 3130     de.detail....%01
   da700:	7530 0020 205d 2c00 0020 2928 203a 2000     0u .] ., .(): . 
   da710:	005b 6f63 6564 3d20 0020 6925 6400 7465     [.code = .%i.det
   da720:	6961 736c 3d20 0020 6162 6475 5300 7265     ails = .baud.Ser
   da730:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   da740:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   da750:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   da760:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   da770:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   da780:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   da790:	6f4c 4867 6e61 6c64 7265 6100 7070 6e00     LogHandler.app.n
   da7a0:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   da7b0:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   da7c0:	6c61 006c 005a 2b25 3330 3a64 3025 7532     all.Z.%+03d:%02u
   da7d0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   da7e0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000da7f0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da7f8:	635d 000d 6363 000d 6379 000d 636f 000d     ]c..cc..yc..oc..
   da808:	635f 000d                                   _c..

000da80c <_ZTV9IPAddress>:
	...
   da814:	686f 000d 6861 000d 6863 000d               oh..ah..ch..

000da820 <_ZTV9USBSerial>:
	...
   da828:	6975 000d 69b9 000d 6993 000d 6113 000d     ui...i...i...a..
   da838:	698d 000d 6977 000d 697f 000d 69b3 000d     .i..wi...i...i..
   da848:	6987 000d 6971 000d                         .i..qi..

000da850 <_ZTVN5spark13CellularClassE>:
	...
   da858:	6ab7 000d 6aad 000d 6aa3 000d 6a59 000d     .j...j...j..Yj..
   da868:	6a97 000d 6a8b 000d 6a7f 000d 6a77 000d     .j...j...j..wj..
   da878:	6a6d 000d 6a63 000d 6fed 000d               mj..cj...o..

000da884 <_ZTV11USARTSerial>:
	...
   da88c:	6b01 000d 6b25 000d 6b31 000d 6113 000d     .k..%k..1k...a..
   da89c:	6b0d 000d 6b19 000d 6b13 000d 6b1f 000d     .k...k...k...k..
   da8ac:	6b03 000d 6b07 000d                         .k...k..

000da8b4 <_ZTV7TwoWire>:
	...
   da8bc:	6c07 000d 6c51 000d 6c29 000d 6c09 000d     .l..Ql..)l...l..
   da8cc:	6c31 000d 6c39 000d 6c41 000d 6c49 000d     1l..9l..Al..Il..

000da8dc <_ZTVN5spark9MeshClassE>:
	...
   da8e4:	6ce7 000d 6cdd 000d 6cd3 000d 6cc9 000d     .l...l...l...l..
   da8f4:	6cbd 000d 6cb1 000d 6ca5 000d 6c9d 000d     .l...l...l...l..
   da904:	6c93 000d 6c89 000d 6fed 000d 6666 3330     .l...l...o..ff03
   da914:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   da924:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   da934:	2065 6170 6b63 7465 2520 0064               e packet %d.

000da940 <_ZTVN5spark12NetworkClassE>:
	...
   da948:	6f85 000d 6f8f 000d 6f99 000d 6fa3 000d     .o...o...o...o..
   da958:	6fad 000d 6fb9 000d 6fc5 000d 6fd1 000d     .o...o...o...o..
   da968:	6fd9 000d 6fe3 000d 6fed 000d 6d66 646f     .o...o...o..fmod
   da978:	0000 0000 6f6c 0067                         ....log.

000da980 <Zero>:
	...
   da98c:	0000 8000                                   ....

000da990 <_ctype_>:
   da990:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da9a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da9b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da9c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da9d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da9e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da9f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   daa00:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   daa10:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000daa94 <__sf_fake_stdin>:
	...

000daab4 <__sf_fake_stdout>:
	...

000daad4 <__sf_fake_stderr>:
	...
   daaf4:	4f50 4953 0058 002e                         POSIX...

000daafc <fpi.5344>:
   daafc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dab0c:	0000 0000                                   ....

000dab10 <fpinan.5380>:
   dab10:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dab20:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000dab30 <tinytens>:
   dab30:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dab40:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dab50:	6f43 64ac 0628 1168                         Co.d(.h.

000dab58 <__mprec_tens>:
   dab58:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dab68:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dab78:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dab88:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dab98:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   daba8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dabb8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dabc8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dabd8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dabe8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dabf8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dac08:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dac18:	9db4 79d9 7843 44ea                         ...yCx.D

000dac20 <__mprec_bigtens>:
   dac20:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dac30:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dac40:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dac48 <p05.5387>:
   dac48:	0005 0000 0019 0000 007d 0000               ........}...

000dac54 <link_const_variable_data_end>:
   dac54:	000d4611 	.word	0x000d4611
   dac58:	000d4e69 	.word	0x000d4e69
   dac5c:	000d546d 	.word	0x000d546d
   dac60:	000d5a1d 	.word	0x000d5a1d
   dac64:	000d5a71 	.word	0x000d5a71
   dac68:	000d6205 	.word	0x000d6205
   dac6c:	000d6215 	.word	0x000d6215
   dac70:	000d626d 	.word	0x000d626d
   dac74:	000d6ac1 	.word	0x000d6ac1
   dac78:	000d6f39 	.word	0x000d6f39
   dac7c:	000d7071 	.word	0x000d7071
   dac80:	000d70f1 	.word	0x000d70f1
   dac84:	000d7185 	.word	0x000d7185
   dac88:	000d7209 	.word	0x000d7209
   dac8c:	000d72cd 	.word	0x000d72cd
   dac90:	000d7391 	.word	0x000d7391

000dac94 <link_constructors_end>:
	...
